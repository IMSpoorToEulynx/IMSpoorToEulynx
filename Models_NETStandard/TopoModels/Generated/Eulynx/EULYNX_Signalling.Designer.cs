// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 5.2.0.0. www.xsd2code.com
//    {"TargetFramework":"Net20","NameSpace":"Models.TopoModels.Eulynx","CollectionObjectType":"Array","CollectionBase":"","ExcludeImportedTypes":true,"Properties":{"LazyLoading":true,"PrivateFieldCustomPrefix":""},"XmlAttribute":{"Enabled":true,"GenerateOrderXmlAttributes":true},"ClassParams":{"GenerateInSeparateFilesDirectory":""},"Miscellaneous":{"EnableDebug":true,"EnableSummaryComment":true},"CustomUsings":[{"NameSpace":"Models.TopoModels.Eulynx.Common"},{"NameSpace":"Models.TopoModels.Eulynx.EULYNX_Signalling"},{"NameSpace":"Models.TopoModels.Eulynx.DB"},{"NameSpace":"Models.TopoModels.Eulynx.EULYNX_XSD"},{"NameSpace":"Models.TopoModels.Eulynx.NetEntity"},{"NameSpace":"Models.TopoModels.Eulynx.NR"},{"NameSpace":"Models.TopoModels.Eulynx.ProRail"},{"NameSpace":"Models.TopoModels.Eulynx.RFI"},{"NameSpace":"Models.TopoModels.Eulynx.Signalling"},{"NameSpace":"Models.TopoModels.Eulynx.SNCF"},{"NameSpace":"Models.TopoModels.Eulynx.TRV"}]}
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace Models.TopoModels.Eulynx.EULYNX_Signalling
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Runtime.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using Models.TopoModels.Eulynx.Common;
    using Models.TopoModels.Eulynx.EULYNX_Signalling;
    using Models.TopoModels.Eulynx.DB;
    using Models.TopoModels.Eulynx.EULYNX_XSD;
    using Models.TopoModels.Eulynx.NetEntity;
    using Models.TopoModels.Eulynx.NR;
    using Models.TopoModels.Eulynx.ProRail;
    using Models.TopoModels.Eulynx.RFI;
    using Models.TopoModels.Eulynx.Signalling;
    using Models.TopoModels.Eulynx.SNCF;
    using Models.TopoModels.Eulynx.TRV;
    using System.Xml;
    
    
    /// <summary>
    /// Area equipped with a train protection system for tilting trains.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("tiltingArea", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class TiltingArea : TpArea
    {
    }
    
    /// <summary>
    /// Area equipped with a Train Protection (TP) System.
    /// If different directional TP systems are used in an area (border area), directional area locations must be created.
    /// </summary>
    [XmlIncludeAttribute(typeof(AreaWithoutTps))]
    [XmlIncludeAttribute(typeof(EtcsArea))]
    [XmlIncludeAttribute(typeof(TiltingArea))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("tpArea", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class TpArea : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref _isLocatedAt;
        private int _nid_ntc;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref isLocatedAt
        {
            get
            {
                if ((_isLocatedAt == null))
                {
                    _isLocatedAt = new tElementWithIDref();
                }
                return _isLocatedAt;
            }
            set
            {
                _isLocatedAt = value;
            }
        }
        
        /// <summary>
        /// NID_NTC as defined by ERA_ERTMS_040001
        /// </summary>
        [XmlElement(Order=1)]
        public int nid_ntc
        {
            get
            {
                return _nid_ntc;
            }
            set
            {
                _nid_ntc = value;
            }
        }
    }
    
    [XmlIncludeAttribute(typeof(OppositeTrackSignal))]
    [XmlIncludeAttribute(typeof(BaselineOfRuleSet))]
    [XmlIncludeAttribute(typeof(NotUpgradeableSpeedRestriction))]
    [XmlIncludeAttribute(typeof(ModificationInformation))]
    [XmlIncludeAttribute(typeof(ManualOverlapRelease))]
    [XmlIncludeAttribute(typeof(TimeFrame))]
    [XmlIncludeAttribute(typeof(EtcsPacket))]
    [XmlIncludeAttribute(typeof(TrackAssetConfiguration))]
    [XmlIncludeAttribute(typeof(LxConfiguration))]
    [XmlIncludeAttribute(typeof(TdsSectionAsBuiltConfiguration))]
    [XmlIncludeAttribute(typeof(MovableElementConfiguration))]
    [XmlIncludeAttribute(typeof(DerailerElementConfiguration))]
    [XmlIncludeAttribute(typeof(PointCrossingElementConfiguration))]
    [XmlIncludeAttribute(typeof(TdsComponentConfiguration))]
    [XmlIncludeAttribute(typeof(TurnoutComponentConfiguration))]
    [XmlIncludeAttribute(typeof(TdsSectionConfiguration))]
    [XmlIncludeAttribute(typeof(TvpSectionConfiguration))]
    [XmlIncludeAttribute(typeof(MovableElementAsBuiltConfiguration))]
    [XmlIncludeAttribute(typeof(Annotation))]
    [XmlIncludeAttribute(typeof(SignalType))]
    [XmlIncludeAttribute(typeof(OperationalLocality))]
    [XmlIncludeAttribute(typeof(SignalFunction))]
    [XmlIncludeAttribute(typeof(ActiveAspectSet))]
    [XmlIncludeAttribute(typeof(AspectComposition))]
    [XmlIncludeAttribute(typeof(StopMessage))]
    [XmlIncludeAttribute(typeof(ProceedMessage))]
    [XmlIncludeAttribute(typeof(LxDepartureDetection))]
    [XmlIncludeAttribute(typeof(NonStopMovement))]
    [XmlIncludeAttribute(typeof(MaxRouteBodySpeed))]
    [XmlIncludeAttribute(typeof(RouteProperty))]
    [XmlIncludeAttribute(typeof(AutoRoute))]
    [XmlIncludeAttribute(typeof(RouteTowardsTunnel))]
    [XmlIncludeAttribute(typeof(RouteSetupTime))]
    [XmlIncludeAttribute(typeof(IntermediatePointRelatedSpeedUpgrade))]
    [XmlIncludeAttribute(typeof(RoutePriority))]
    [XmlIncludeAttribute(typeof(RouteAvailableInARS))]
    [XmlIncludeAttribute(typeof(RouteWithReducedBrakingDistance))]
    [XmlIncludeAttribute(typeof(RouteSpeedRestriction))]
    [XmlIncludeAttribute(typeof(RouteTractionType))]
    [XmlIncludeAttribute(typeof(ReferenceDrawingParameter))]
    [XmlIncludeAttribute(typeof(EtcsDangerpoint))]
    [XmlIncludeAttribute(typeof(Condition))]
    [XmlIncludeAttribute(typeof(StdCondition))]
    [XmlIncludeAttribute(typeof(Diamond))]
    [XmlIncludeAttribute(typeof(DiamondHalf))]
    [XmlIncludeAttribute(typeof(LocalDatum))]
    [XmlIncludeAttribute(typeof(TrackCircuitProperties))]
    [XmlIncludeAttribute(typeof(FtgsTrackCircuitProperties))]
    [XmlIncludeAttribute(typeof(LowFrequencyTrackCircuitProperties))]
    [XmlIncludeAttribute(typeof(LeuPort))]
    [XmlIncludeAttribute(typeof(Attachment))]
    [XmlIncludeAttribute(typeof(PlatformEdgeAccessPoint))]
    [XmlIncludeAttribute(typeof(ConfigurationProperty))]
    [XmlIncludeAttribute(typeof(SupplierInformation))]
    [XmlIncludeAttribute(typeof(ControlCode))]
    [XmlIncludeAttribute(typeof(ForeignKey))]
    [XmlIncludeAttribute(typeof(Description))]
    [XmlIncludeAttribute(typeof(Designation))]
    [XmlIncludeAttribute(typeof(SimpleDesignation))]
    [XmlIncludeAttribute(typeof(ObjectStatus))]
    [XmlIncludeAttribute(typeof(DummyMode))]
    [XmlIncludeAttribute(typeof(CoveredObject))]
    [XmlIncludeAttribute(typeof(OutOfService))]
    [XmlIncludeAttribute(typeof(OutOfServicePreparative))]
    [XmlIncludeAttribute(typeof(Configuration))]
    [XmlIncludeAttribute(typeof(ConfiguredBaseObject))]
    [XmlIncludeAttribute(typeof(TempShuntingArea))]
    [XmlIncludeAttribute(typeof(TpsDataTransmissionSystem))]
    [XmlIncludeAttribute(typeof(BaliseGroup))]
    [XmlIncludeAttribute(typeof(EtcsBaliseGroup))]
    [XmlIncludeAttribute(typeof(ViaLocation))]
    [XmlIncludeAttribute(typeof(TunnelSignal))]
    [XmlIncludeAttribute(typeof(TpsDataTransmissionSystemProperties))]
    [XmlIncludeAttribute(typeof(InfrastructureBorder))]
    [XmlIncludeAttribute(typeof(RouteApproachLocking))]
    [XmlIncludeAttribute(typeof(ReferenceDrawing))]
    [XmlIncludeAttribute(typeof(LevelCrossingTimerSet))]
    [XmlIncludeAttribute(typeof(EtcsSystemVersion))]
    [XmlIncludeAttribute(typeof(Normalisation))]
    [XmlIncludeAttribute(typeof(RouteCondition))]
    [XmlIncludeAttribute(typeof(ConditionAffectingRoute))]
    [XmlIncludeAttribute(typeof(ConditionAffectingKRI))]
    [XmlIncludeAttribute(typeof(ConditionAffectingSignal))]
    [XmlIncludeAttribute(typeof(ControlRelation))]
    [XmlIncludeAttribute(typeof(ControllerRelation))]
    [XmlIncludeAttribute(typeof(AssetControlRelation))]
    [XmlIncludeAttribute(typeof(EtcsPointCrossing))]
    [XmlIncludeAttribute(typeof(LocalOperatingZoneRelation))]
    [XmlIncludeAttribute(typeof(LockCombination))]
    [XmlIncludeAttribute(typeof(ExpansionJoint))]
    [XmlIncludeAttribute(typeof(DangerAreaTrack))]
    [XmlIncludeAttribute(typeof(LineSideSpotDevice))]
    [XmlIncludeAttribute(typeof(LineSideSpotDetector))]
    [XmlIncludeAttribute(typeof(LocalOperatingZone))]
    [XmlIncludeAttribute(typeof(Segment))]
    [XmlIncludeAttribute(typeof(SpeedSegment))]
    [XmlIncludeAttribute(typeof(TrainCategorySpeedRestriction))]
    [XmlIncludeAttribute(typeof(TemporarySpeedRestriction))]
    [XmlIncludeAttribute(typeof(AssetUser))]
    [XmlIncludeAttribute(typeof(LocalOperatingZoneLimit))]
    [XmlIncludeAttribute(typeof(EtcsNode))]
    [XmlIncludeAttribute(typeof(CssArea))]
    [XmlIncludeAttribute(typeof(SignalFrame))]
    [XmlIncludeAttribute(typeof(TrackConditionArea))]
    [XmlIncludeAttribute(typeof(NoEddyCurrentBrakeArea))]
    [XmlIncludeAttribute(typeof(LimitedCurrentArea))]
    [XmlIncludeAttribute(typeof(BigMetalMassArea))]
    [XmlIncludeAttribute(typeof(NoRegenerativeBrakeArea))]
    [XmlIncludeAttribute(typeof(NonStoppingArea))]
    [XmlIncludeAttribute(typeof(TrainCategory))]
    [XmlIncludeAttribute(typeof(PassengerTrain))]
    [XmlIncludeAttribute(typeof(KvbTrain))]
    [XmlIncludeAttribute(typeof(FreightTrain))]
    [XmlIncludeAttribute(typeof(TiltingTrain))]
    [XmlIncludeAttribute(typeof(TpwsTrain))]
    [XmlIncludeAttribute(typeof(SignalVector))]
    [XmlIncludeAttribute(typeof(Route))]
    [XmlIncludeAttribute(typeof(MainRoute))]
    [XmlIncludeAttribute(typeof(ShuntingRoute))]
    [XmlIncludeAttribute(typeof(OnSightRoute))]
    [XmlIncludeAttribute(typeof(EtcsRoute))]
    [XmlIncludeAttribute(typeof(PlatformEdge))]
    [XmlIncludeAttribute(typeof(UsablePlatformEdge))]
    [XmlIncludeAttribute(typeof(InfrastructuralPlatformEdge))]
    [XmlIncludeAttribute(typeof(OperationalPlatformEdge))]
    [XmlIncludeAttribute(typeof(SpeedProfile))]
    [XmlIncludeAttribute(typeof(TrainCategorySpeedProfile))]
    [XmlIncludeAttribute(typeof(CableRoute))]
    [XmlIncludeAttribute(typeof(CableTray))]
    [XmlIncludeAttribute(typeof(CableTrough))]
    [XmlIncludeAttribute(typeof(RaisedCableTrough))]
    [XmlIncludeAttribute(typeof(FreeCableRoute))]
    [XmlIncludeAttribute(typeof(FreeHangingCableRoute))]
    [XmlIncludeAttribute(typeof(CableBridge))]
    [XmlIncludeAttribute(typeof(CableTrench))]
    [XmlIncludeAttribute(typeof(TemporaryCableRoute))]
    [XmlIncludeAttribute(typeof(CablePipe))]
    [XmlIncludeAttribute(typeof(UnderTrackCrossing))]
    [XmlIncludeAttribute(typeof(AssetAndState))]
    [XmlIncludeAttribute(typeof(LXandState))]
    [XmlIncludeAttribute(typeof(SectionAndVacancy))]
    [XmlIncludeAttribute(typeof(CompoundLogicalObjectAndState))]
    [XmlIncludeAttribute(typeof(MovableElementAndPosition))]
    [XmlIncludeAttribute(typeof(CrossingElementAndPosition))]
    [XmlIncludeAttribute(typeof(DerailerElementAndPosition))]
    [XmlIncludeAttribute(typeof(PointElementAndPosition))]
    [XmlIncludeAttribute(typeof(SignalAndMessage))]
    [XmlIncludeAttribute(typeof(PowerSupplyModule))]
    [XmlIncludeAttribute(typeof(VirtualPowerSupplyModule))]
    [XmlIncludeAttribute(typeof(PhysicalPowerSupplyModule))]
    [XmlIncludeAttribute(typeof(RbcArea))]
    [XmlIncludeAttribute(typeof(CivilStructure))]
    [XmlIncludeAttribute(typeof(TdsOccupancyOverrideGroup))]
    [XmlIncludeAttribute(typeof(ConflictingRoute))]
    [XmlIncludeAttribute(typeof(RouteConvergencyConflict))]
    [XmlIncludeAttribute(typeof(RouteConflictOverlappingTvpSections))]
    [XmlIncludeAttribute(typeof(RouteConflictOverlap))]
    [XmlIncludeAttribute(typeof(ControlArea))]
    [XmlIncludeAttribute(typeof(SafetyDistance))]
    [XmlIncludeAttribute(typeof(DistanceToDangerpoint))]
    [XmlIncludeAttribute(typeof(Overlap))]
    [XmlIncludeAttribute(typeof(LevelCrossingRouteRelation))]
    [XmlIncludeAttribute(typeof(EtcsEdge))]
    [XmlIncludeAttribute(typeof(SwingingOverlap))]
    [XmlIncludeAttribute(typeof(EtcsSignal))]
    [XmlIncludeAttribute(typeof(Key))]
    [XmlIncludeAttribute(typeof(Illumination))]
    [XmlIncludeAttribute(typeof(LevelCrossingSignalRelation))]
    [XmlIncludeAttribute(typeof(ConductorRail))]
    [XmlIncludeAttribute(typeof(SectionsForFlankProtection))]
    [XmlIncludeAttribute(typeof(DiagnosticsOpcUaConfiguration))]
    [XmlIncludeAttribute(typeof(BlockSystem))]
    [XmlIncludeAttribute(typeof(BaliseGroupFunction))]
    [XmlIncludeAttribute(typeof(LocalOperatingArea))]
    [XmlIncludeAttribute(typeof(RouteBody))]
    [XmlIncludeAttribute(typeof(LevelCrossingLocalOperationUiElement))]
    [XmlIncludeAttribute(typeof(CompositeRoute))]
    [XmlIncludeAttribute(typeof(ConditionSectionsClear))]
    [XmlIncludeAttribute(typeof(NonReplacement))]
    [XmlIncludeAttribute(typeof(TpsProtectionDistance))]
    [XmlIncludeAttribute(typeof(TrackCrossing))]
    [XmlIncludeAttribute(typeof(FootpathCrossing))]
    [XmlIncludeAttribute(typeof(TriggerAssignment))]
    [XmlIncludeAttribute(typeof(RastaPropertySet))]
    [XmlIncludeAttribute(typeof(PlatformFacility))]
    [XmlIncludeAttribute(typeof(EtcsTelegram))]
    [XmlIncludeAttribute(typeof(ChangeMarker))]
    [XmlIncludeAttribute(typeof(SpeedChangeMarker))]
    [XmlIncludeAttribute(typeof(TpMarker))]
    [XmlIncludeAttribute(typeof(EtcsMarker))]
    [XmlIncludeAttribute(typeof(EtcsTransitionMarker))]
    [XmlIncludeAttribute(typeof(EtcsRbcTransitionMarker))]
    [XmlIncludeAttribute(typeof(EtcsTsiCcsTransitionMarker))]
    [XmlIncludeAttribute(typeof(EtcsLevelTransitionMarker))]
    [XmlIncludeAttribute(typeof(EtcsModeTransitionMarker))]
    [XmlIncludeAttribute(typeof(EtcsGeoPosMarker))]
    [XmlIncludeAttribute(typeof(EtcsNationalValueChangeMarker))]
    [XmlIncludeAttribute(typeof(EtcsConditionalEmergencyStopMarker))]
    [XmlIncludeAttribute(typeof(EtcsTrackConditionMarker))]
    [XmlIncludeAttribute(typeof(TC67_BigMetalMass))]
    [XmlIncludeAttribute(typeof(TC40_ChangeOfAllowedCurrentConsumption))]
    [XmlIncludeAttribute(typeof(TC69_StationPlatforms))]
    [XmlIncludeAttribute(typeof(TC68_TrackCondition))]
    [XmlIncludeAttribute(typeof(TC39_ChangeOfTractionSystem))]
    [XmlIncludeAttribute(typeof(EtcsTextMessageMarker))]
    [XmlIncludeAttribute(typeof(EtcsSpeedChangeMarker))]
    [XmlIncludeAttribute(typeof(EtcsGradientChangeMarker))]
    [XmlIncludeAttribute(typeof(TpTransitionMarker))]
    [XmlIncludeAttribute(typeof(LozAssetRelation))]
    [XmlIncludeAttribute(typeof(LozTdsSection))]
    [XmlIncludeAttribute(typeof(LozDerailerRelation))]
    [XmlIncludeAttribute(typeof(LozPointRelation))]
    [XmlIncludeAttribute(typeof(LozKeyReleaseInstrumentRelation))]
    [XmlIncludeAttribute(typeof(LozSignalRelation))]
    [XmlIncludeAttribute(typeof(WorkZone))]
    [XmlIncludeAttribute(typeof(EtcsNationalValueSet))]
    [XmlIncludeAttribute(typeof(ShuntingRouteSectionProving))]
    [XmlIncludeAttribute(typeof(SpecialPositionArrangement))]
    [XmlIncludeAttribute(typeof(TrackAsset))]
    [XmlIncludeAttribute(typeof(TpsDevice))]
    [XmlIncludeAttribute(typeof(TpsLinearDevice))]
    [XmlIncludeAttribute(typeof(TpsSpotDevice))]
    [XmlIncludeAttribute(typeof(Detonator))]
    [XmlIncludeAttribute(typeof(Balise))]
    [XmlIncludeAttribute(typeof(EtcsBalise))]
    [XmlIncludeAttribute(typeof(VehicleStop))]
    [XmlIncludeAttribute(typeof(BufferStop))]
    [XmlIncludeAttribute(typeof(SandHump))]
    [XmlIncludeAttribute(typeof(LevelCrossingSystem))]
    [XmlIncludeAttribute(typeof(InterlockingIntegratedLevelCrossing))]
    [XmlIncludeAttribute(typeof(MainSignalProtectedLevelCrossing))]
    [XmlIncludeAttribute(typeof(SelfSupervisedLevelCrossing))]
    [XmlIncludeAttribute(typeof(LocallyMonitoredLevelCrossing))]
    [XmlIncludeAttribute(typeof(EtcsLevelCrossingSystem))]
    [XmlIncludeAttribute(typeof(VehiclePassageDetector))]
    [XmlIncludeAttribute(typeof(TdsComponent))]
    [XmlIncludeAttribute(typeof(AxleCountingHead))]
    [XmlIncludeAttribute(typeof(InsulatedRailJoint))]
    [XmlIncludeAttribute(typeof(ElectricJoint))]
    [XmlIncludeAttribute(typeof(VehicleSensor))]
    [XmlIncludeAttribute(typeof(TcSensor))]
    [XmlIncludeAttribute(typeof(TcSensorCombined))]
    [XmlIncludeAttribute(typeof(Loop))]
    [XmlIncludeAttribute(typeof(Treadle))]
    [XmlIncludeAttribute(typeof(EMSensor))]
    [XmlIncludeAttribute(typeof(BufferSensor))]
    [XmlIncludeAttribute(typeof(DepressionBar))]
    [XmlIncludeAttribute(typeof(MovableElement))]
    [XmlIncludeAttribute(typeof(MovableSystem))]
    [XmlIncludeAttribute(typeof(RailwayBarrier))]
    [XmlIncludeAttribute(typeof(MovableCatenary))]
    [XmlIncludeAttribute(typeof(Turnout))]
    [XmlIncludeAttribute(typeof(Derailer))]
    [XmlIncludeAttribute(typeof(PointCrossing))]
    [XmlIncludeAttribute(typeof(Point))]
    [XmlIncludeAttribute(typeof(Crossing))]
    [XmlIncludeAttribute(typeof(MovableBridge))]
    [XmlIncludeAttribute(typeof(MovableComponent))]
    [XmlIncludeAttribute(typeof(Mechanism))]
    [XmlIncludeAttribute(typeof(PoweredMechanism))]
    [XmlIncludeAttribute(typeof(ElectricDrive))]
    [XmlIncludeAttribute(typeof(HydraulicDrive))]
    [XmlIncludeAttribute(typeof(PneumaticDrive))]
    [XmlIncludeAttribute(typeof(HandOperatedMechanism))]
    [XmlIncludeAttribute(typeof(MechanicalMechanism))]
    [XmlIncludeAttribute(typeof(TurnoutComponent))]
    [XmlIncludeAttribute(typeof(PointBlades))]
    [XmlIncludeAttribute(typeof(PointBlade))]
    [XmlIncludeAttribute(typeof(DerailerComponent))]
    [XmlIncludeAttribute(typeof(Frog))]
    [XmlIncludeAttribute(typeof(FacingPointLock))]
    [XmlIncludeAttribute(typeof(TvpSection))]
    [XmlIncludeAttribute(typeof(Signal))]
    [XmlIncludeAttribute(typeof(VirtualSignal))]
    [XmlIncludeAttribute(typeof(NonPhysicalSignal))]
    [XmlIncludeAttribute(typeof(PhysicalSignal))]
    [XmlIncludeAttribute(typeof(Sign))]
    [XmlIncludeAttribute(typeof(Milepost))]
    [XmlIncludeAttribute(typeof(ActiveSignal))]
    [XmlIncludeAttribute(typeof(MechanicalSignal))]
    [XmlIncludeAttribute(typeof(LightSignal))]
    [XmlIncludeAttribute(typeof(CompoundLogicalObject))]
    [XmlIncludeAttribute(typeof(TcFeederReceiverElement))]
    [XmlIncludeAttribute(typeof(TdsSection))]
    [XmlIncludeAttribute(typeof(AxleCountingSystem))]
    [XmlIncludeAttribute(typeof(TrackCircuit))]
    [XmlIncludeAttribute(typeof(LowFrequencyTrackCircuit))]
    [XmlIncludeAttribute(typeof(AudioFrequencyTrackCircuit))]
    [XmlIncludeAttribute(typeof(FtgsTrackCircuit))]
    [XmlIncludeAttribute(typeof(DcVoltageTrackCircuit))]
    [XmlIncludeAttribute(typeof(HviTrackCircuit))]
    [XmlIncludeAttribute(typeof(Controller))]
    [XmlIncludeAttribute(typeof(VirtualController))]
    [XmlIncludeAttribute(typeof(FieldObjectController))]
    [XmlIncludeAttribute(typeof(TdsEvaluator))]
    [XmlIncludeAttribute(typeof(SignalController))]
    [XmlIncludeAttribute(typeof(IoController))]
    [XmlIncludeAttribute(typeof(LeuSystem))]
    [XmlIncludeAttribute(typeof(RBC))]
    [XmlIncludeAttribute(typeof(Interlocking))]
    [XmlIncludeAttribute(typeof(DecentralInterlocking))]
    [XmlIncludeAttribute(typeof(CentralInterlocking))]
    [XmlIncludeAttribute(typeof(TrafficControlSystem))]
    [XmlIncludeAttribute(typeof(ReleaseInstrument))]
    [XmlIncludeAttribute(typeof(KeyReleaseInstrument))]
    [XmlIncludeAttribute(typeof(ShutInSidingKeyReleaseInstrument))]
    [XmlIncludeAttribute(typeof(TcConnector))]
    [XmlIncludeAttribute(typeof(Bond))]
    [XmlIncludeAttribute(typeof(ImpedanceBond))]
    [XmlIncludeAttribute(typeof(TcFeedingReceivingCable))]
    [XmlIncludeAttribute(typeof(TrackProperty))]
    [XmlIncludeAttribute(typeof(TrackTypeSection))]
    [XmlIncludeAttribute(typeof(ShuntingSection))]
    [XmlIncludeAttribute(typeof(MainSection))]
    [XmlIncludeAttribute(typeof(OpenLineSection))]
    [XmlIncludeAttribute(typeof(SecondarySection))]
    [XmlIncludeAttribute(typeof(SidingSection))]
    [XmlIncludeAttribute(typeof(TrackDesignation))]
    [XmlIncludeAttribute(typeof(Trackway))]
    [XmlIncludeAttribute(typeof(SleeperTrack))]
    [XmlIncludeAttribute(typeof(SlabTrack))]
    [XmlIncludeAttribute(typeof(RestrictedArea))]
    [XmlIncludeAttribute(typeof(RemovedTrack))]
    [XmlIncludeAttribute(typeof(BlockedTrack))]
    [XmlIncludeAttribute(typeof(ConstructionArea))]
    [XmlIncludeAttribute(typeof(SpecialGauge))]
    [XmlIncludeAttribute(typeof(SpecialStructureGauge))]
    [XmlIncludeAttribute(typeof(SpecialTrackGauge))]
    [XmlIncludeAttribute(typeof(ElectrificationSegment))]
    [XmlIncludeAttribute(typeof(ElectrificationSection))]
    [XmlIncludeAttribute(typeof(OverheadLineSection))]
    [XmlIncludeAttribute(typeof(ConductorRailSection))]
    [XmlIncludeAttribute(typeof(ElectrificationGap))]
    [XmlIncludeAttribute(typeof(OverheadLineGap))]
    [XmlIncludeAttribute(typeof(ConductorRailGap))]
    [XmlIncludeAttribute(typeof(ElectrificationOverlap))]
    [XmlIncludeAttribute(typeof(Lock))]
    [XmlIncludeAttribute(typeof(PointLock))]
    [XmlIncludeAttribute(typeof(SignalSightingDistance))]
    [XmlIncludeAttribute(typeof(RbcWatchdog))]
    [XmlIncludeAttribute(typeof(TpArea))]
    [XmlIncludeAttribute(typeof(AreaWithoutTps))]
    [XmlIncludeAttribute(typeof(EtcsArea))]
    [XmlIncludeAttribute(typeof(TiltingArea))]
    [XmlIncludeAttribute(typeof(LevelCrossingActivation))]
    [XmlIncludeAttribute(typeof(LocalOperationDevice))]
    [XmlIncludeAttribute(typeof(ControlFrame))]
    [XmlIncludeAttribute(typeof(GroundFrame))]
    [XmlIncludeAttribute(typeof(Cable))]
    [XmlIncludeAttribute(typeof(LocationProxy))]
    [XmlIncludeAttribute(typeof(LocationOfInterest))]
    [XmlIncludeAttribute(typeof(LocationReference))]
    [XmlIncludeAttribute(typeof(SignalPostTelephone))]
    [XmlIncludeAttribute(typeof(LocalOperationUiElement))]
    [XmlIncludeAttribute(typeof(LocalOperationUiSwitch))]
    [XmlIncludeAttribute(typeof(LocalOperationUiButton))]
    [XmlIncludeAttribute(typeof(LocalOperationUiLever))]
    [XmlIncludeAttribute(typeof(LocalOperationUiIndicator))]
    [XmlIncludeAttribute(typeof(TrainRearConfirmation))]
    [XmlIncludeAttribute(typeof(BlockElement))]
    [XmlIncludeAttribute(typeof(LevelCrossingDeactivation))]
    [XmlIncludeAttribute(typeof(TpsRelation))]
    [XmlIncludeAttribute(typeof(Aspect))]
    [XmlIncludeAttribute(typeof(ActiveAspect))]
    [XmlIncludeAttribute(typeof(StartUpProcedureConfiguration))]
    [XmlIncludeAttribute(typeof(MaintenanceDataManagement))]
    [XmlIncludeAttribute(typeof(VirtualisedMDM))]
    [XmlIncludeAttribute(typeof(PhysicalMDM))]
    [XmlIncludeAttribute(typeof(EtcsMaSection))]
    [XmlIncludeAttribute(typeof(DispatchAnnouncerAssignment))]
    [XmlIncludeAttribute(typeof(PlatformAccess))]
    [XmlIncludeAttribute(typeof(AssetGroup))]
    [XmlIncludeAttribute(typeof(FlankProtection))]
    [XmlIncludeAttribute(typeof(StandOutControl))]
    [XmlIncludeAttribute(typeof(TpsDeviceProperties))]
    [XmlIncludeAttribute(typeof(LineBlockInformation))]
    [XmlIncludeAttribute(typeof(DirectionAuthorityDependentOverlap))]
    [XmlIncludeAttribute(typeof(LeuModule))]
    [XmlIncludeAttribute(typeof(EtcsTelegramConditionRelation))]
    [XmlIncludeAttribute(typeof(LocalOperatingAreaUiElement))]
    [XmlIncludeAttribute(typeof(SignalLocation))]
    [XmlIncludeAttribute(typeof(CableJointInstallation))]
    [XmlIncludeAttribute(typeof(CableDistributorDisconnector))]
    [XmlIncludeAttribute(typeof(CableTerminationRack))]
    [XmlIncludeAttribute(typeof(CableJointRack))]
    [XmlIncludeAttribute(typeof(SignalFrameComponent))]
    [XmlIncludeAttribute(typeof(SignalAspectDegradation))]
    [XmlIncludeAttribute(typeof(DispatchPosition))]
    [XmlIncludeAttribute(typeof(SignalMessageRelation))]
    [XmlIncludeAttribute(typeof(EquipmentSupport))]
    [XmlIncludeAttribute(typeof(Housing))]
    [XmlIncludeAttribute(typeof(Panel))]
    [XmlIncludeAttribute(typeof(Cabinet))]
    [XmlIncludeAttribute(typeof(LeuCabinet))]
    [XmlIncludeAttribute(typeof(CabinetGroup))]
    [XmlIncludeAttribute(typeof(EquipmentRoom))]
    [XmlIncludeAttribute(typeof(ControlRoom))]
    [XmlIncludeAttribute(typeof(Container))]
    [XmlIncludeAttribute(typeof(Building))]
    [XmlIncludeAttribute(typeof(EquipmentHouse))]
    [XmlIncludeAttribute(typeof(Fixing))]
    [XmlIncludeAttribute(typeof(SectionList))]
    [XmlIncludeAttribute(typeof(ControlledTrackAsset))]
    [XmlIncludeAttribute(typeof(DiagnosticsCollector))]
    [XmlIncludeAttribute(typeof(Automatic))]
    [XmlIncludeAttribute(typeof(SynchedFlashing))]
    [XmlIncludeAttribute(typeof(FlashInPhase))]
    [XmlIncludeAttribute(typeof(AlternateFlash))]
    [XmlIncludeAttribute(typeof(RouteExtremity))]
    [XmlIncludeAttribute(typeof(RouteEntry))]
    [XmlIncludeAttribute(typeof(RouteExit))]
    [XmlIncludeAttribute(typeof(SystemState))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(TypeName="BaseObject", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("baseObject", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public abstract partial class BaseObject1 : BaseObject
    {
    }
    
    /// <summary>
    /// Applies to a signal whose direction is opposite to the normal direction of traffic, that is a signal applying to trains travelling on the opposite track.
    /// 
    /// Applies to double track lines only.
    /// Not to be confused with the topological direction of the linear element, which is not related to the direction of traffic.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("oppositeTrackSignal", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class OppositeTrackSignal : BaseObject1
    {
        #region Private fields
        private tElementWithIDref _appliesToSignal;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref appliesToSignal
        {
            get
            {
                if ((_appliesToSignal == null))
                {
                    _appliesToSignal = new tElementWithIDref();
                }
                return _appliesToSignal;
            }
            set
            {
                _appliesToSignal = value;
            }
        }
    }
    
    /// <summary>
    /// The configuration is associated with a date. The configuration, to which this date-stamp applies, is valid from the given date onwards.
    /// Note that no expiry date is given.
    /// (DE: Regelwerk)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("baselineOfRuleSet", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class BaselineOfRuleSet : BaseObject1
    {
        #region Private fields
        private System.DateTime _dateOfRuleSet;
        #endregion
        
        /// <summary>
        /// Datestamp of the set of rules and regulations according to which the object was planned. This identifies a documentation baseline.
        /// </summary>
        [XmlAttribute(DataType="date")]
        public System.DateTime dateOfRuleSet
        {
            get
            {
                return _dateOfRuleSet;
            }
            set
            {
                _dateOfRuleSet = value;
            }
        }
    }
    
    /// <summary>
    /// An overlap can cause a speed restriction in the approach route.
    /// This class lists the overlaps for which the speed isn't upgraded when the exit signal opens.
    /// For an overlap not in the list, the IL lifts the speed restriction when the exit signal opens.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("notUpgradeableSpeedRestriction", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class NotUpgradeableSpeedRestriction : BaseObject1
    {
        #region Private fields
        private tElementWithIDref _appliesToOverlap;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref appliesToOverlap
        {
            get
            {
                if ((_appliesToOverlap == null))
                {
                    _appliesToOverlap = new tElementWithIDref();
                }
                return _appliesToOverlap;
            }
            set
            {
                _appliesToOverlap = value;
            }
        }
    }
    
    /// <summary>
    /// Informs about the tooling used to modify the object.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("modificationInformation", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class ModificationInformation : BaseObject1
    {
        #region Private fields
        private string _toolName;
        private string _toolVersion;
        #endregion
        
        /// <summary>
        /// Name of the tooling or software package used to modify the object.
        /// </summary>
        [XmlAttribute]
        public string toolName
        {
            get
            {
                return _toolName;
            }
            set
            {
                _toolName = value;
            }
        }
        
        /// <summary>
        /// Version of the tool or software package used to modify the object.
        /// </summary>
        [XmlAttribute]
        public string toolVersion
        {
            get
            {
                return _toolVersion;
            }
            set
            {
                _toolVersion = value;
            }
        }
    }
    
    /// <summary>
    /// Indicates whether the signal allows manual release of the overlap.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("manualOverlapRelease", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class ManualOverlapRelease : BaseObject1
    {
        #region Private fields
        private tElementWithIDref _appliesToSignal;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref appliesToSignal
        {
            get
            {
                if ((_appliesToSignal == null))
                {
                    _appliesToSignal = new tElementWithIDref();
                }
                return _appliesToSignal;
            }
            set
            {
                _appliesToSignal = value;
            }
        }
    }
    
    /// <summary>
    /// Time frame during which the configured base object is in operation.
    /// If a date isn't given, it is open-ended.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("timeFrame", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class TimeFrame : BaseObject1
    {
        #region Private fields
        private System.DateTime _end;
        private System.DateTime _start;
        #endregion
        
        [XmlAttribute(DataType="date")]
        public System.DateTime end
        {
            get
            {
                return _end;
            }
            set
            {
                _end = value;
            }
        }
        
        [XmlAttribute(DataType="date")]
        public System.DateTime start
        {
            get
            {
                return _start;
            }
            set
            {
                _start = value;
            }
        }
    }
    
    /// <summary>
    /// ETCS packet as defined in subset-026.
    /// Used by either balise telegrams or RBC messages.
    /// The end-user can use an existing XSD such as <a href="$inet://https://github.com/openETCS/dataDictionary/blob/master/Artifacts/subset-026-7/Decoder/Delivery/SubsetFromWord/SubSet026_7.xml"><font color="#0000ff"><u>this</u></font></a> to instantiate XML of ETCS packets.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("etcsPacket", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public abstract partial class EtcsPacket : BaseObject1
    {
    }
    
    /// <summary>
    /// Store for properties and configuration items that were determined during design, engineering or production.
    /// </summary>
    [XmlIncludeAttribute(typeof(LxConfiguration))]
    [XmlIncludeAttribute(typeof(TdsSectionAsBuiltConfiguration))]
    [XmlIncludeAttribute(typeof(MovableElementConfiguration))]
    [XmlIncludeAttribute(typeof(DerailerElementConfiguration))]
    [XmlIncludeAttribute(typeof(PointCrossingElementConfiguration))]
    [XmlIncludeAttribute(typeof(TdsComponentConfiguration))]
    [XmlIncludeAttribute(typeof(TurnoutComponentConfiguration))]
    [XmlIncludeAttribute(typeof(TdsSectionConfiguration))]
    [XmlIncludeAttribute(typeof(TvpSectionConfiguration))]
    [XmlIncludeAttribute(typeof(MovableElementAsBuiltConfiguration))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("trackAssetConfiguration", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class TrackAssetConfiguration : BaseObject1
    {
        #region Private fields
        private ProjectPhase[] _phaseOfDefinition;
        #endregion
        
        /// <summary>
        /// the phase in the project lifecycle when the parameter is defined.
        /// </summary>
        [XmlElement("phaseOfDefinition", Order=0)]
        public ProjectPhase[] phaseOfDefinition
        {
            get
            {
                return _phaseOfDefinition;
            }
            set
            {
                _phaseOfDefinition = value;
            }
        }
    }
    
    /// <summary>
    /// Indicates the project phase during which the configuration item is defined.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("projectPhase", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class ProjectPhase
    {
        #region Private fields
        private ProjectPhaseTypes _isOfProjectPhase;
        #endregion
        
        [XmlElement(Order=0)]
        public ProjectPhaseTypes isOfProjectPhase
        {
            get
            {
                return _isOfProjectPhase;
            }
            set
            {
                _isOfProjectPhase = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum ProjectPhaseTypes
    {
        toBuild,
        asBuilt,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("lxConfiguration", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class LxConfiguration : TrackAssetConfiguration
    {
        #region Private fields
        private tElementWithIDref _appliesToLxSystem;
        private LxStateTypes _hasPreferredPosition;
        private bool _allowsLocalControl;
        private bool _hasBarriers;
        private bool _hasWarningInstallation;
        #endregion
        
        /// <summary>
        /// The configuration applies to the given level crossing.
        /// </summary>
        [XmlElement(Order=0)]
        public tElementWithIDref appliesToLxSystem
        {
            get
            {
                if ((_appliesToLxSystem == null))
                {
                    _appliesToLxSystem = new tElementWithIDref();
                }
                return _appliesToLxSystem;
            }
            set
            {
                _appliesToLxSystem = value;
            }
        }
        
        [XmlElement(Order=1)]
        public LxStateTypes hasPreferredPosition
        {
            get
            {
                return _hasPreferredPosition;
            }
            set
            {
                _hasPreferredPosition = value;
            }
        }
        
        /// <summary>
        /// True if the level crossing can be controlled locally. National rules and regulations shall stipulate rules for signalling when the level crossing is under local control.
        /// </summary>
        [XmlAttribute]
        public bool allowsLocalControl
        {
            get
            {
                return _allowsLocalControl;
            }
            set
            {
                _allowsLocalControl = value;
            }
        }
        
        /// <summary>
        /// True when this level crossing has barriers stopping road-traffic. False otherwise.
        /// </summary>
        [XmlAttribute]
        public bool hasBarriers
        {
            get
            {
                return _hasBarriers;
            }
            set
            {
                _hasBarriers = value;
            }
        }
        
        /// <summary>
        /// True if this level crossing has visible or audible warning for road-traffic. False otherwise
        /// </summary>
        [XmlAttribute]
        public bool hasWarningInstallation
        {
            get
            {
                return _hasWarningInstallation;
            }
            set
            {
                _hasWarningInstallation = value;
            }
        }
    }
    
    /// <summary>
    /// List of states that a level crossing can adopt.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum LxStateTypes
    {
        /// <summary>
        /// Barrier position is unknown.
        /// </summary>
        unknown,
        /// <summary>
        /// Barriers are confirmed open to road traffic.
        /// </summary>
        open,
        /// <summary>
        /// Barriers are confirmed closed to road traffic.
        /// </summary>
        closed,
        /// <summary>
        /// Barriers have been ordered to open but haven't reported open yet.
        /// </summary>
        opening,
        /// <summary>
        /// Barriers have been ordered to close but haven't been confirmed closed yet.
        /// </summary>
        closing,
        /// <summary>
        /// The level crossing activation process has been triggered.
        /// </summary>
        activated,
        /// <summary>
        /// The level crossing deactivation process has been triggered.
        /// </summary>
        deactivated,
        other,
    }
    
    /// <summary>
    /// A set of as built properties that applies to a TDS section.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("tdsSectionAsBuiltConfiguration", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class TdsSectionAsBuiltConfiguration : TrackAssetConfiguration
    {
        #region Private fields
        private tElementWithIDref _appliesToTdsSection;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref appliesToTdsSection
        {
            get
            {
                if ((_appliesToTdsSection == null))
                {
                    _appliesToTdsSection = new tElementWithIDref();
                }
                return _appliesToTdsSection;
            }
            set
            {
                _appliesToTdsSection = value;
            }
        }
    }
    
    /// <summary>
    /// A set of properties that applies to a movable element.
    /// </summary>
    [XmlIncludeAttribute(typeof(DerailerElementConfiguration))]
    [XmlIncludeAttribute(typeof(PointCrossingElementConfiguration))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("movableElementConfiguration", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public abstract partial class MovableElementConfiguration : TrackAssetConfiguration
    {
        #region Private fields
        private tElementWithIDref _appliesToMovableElement;
        private Duration _hasMaxOperationDuration;
        private ControlModes _isInControlMode;
        private MovableElementOperatingModes _isInOperatingMode;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref appliesToMovableElement
        {
            get
            {
                if ((_appliesToMovableElement == null))
                {
                    _appliesToMovableElement = new tElementWithIDref();
                }
                return _appliesToMovableElement;
            }
            set
            {
                _appliesToMovableElement = value;
            }
        }
        
        /// <summary>
        /// the maximum time during which the object controller shall try to drive the movable element.
        /// This parameter is mostly given by generic rules but may become configurable.
        /// </summary>
        [XmlElement(Order=1)]
        public Duration hasMaxOperationDuration
        {
            get
            {
                if ((_hasMaxOperationDuration == null))
                {
                    _hasMaxOperationDuration = new Duration();
                }
                return _hasMaxOperationDuration;
            }
            set
            {
                _hasMaxOperationDuration = value;
            }
        }
        
        [XmlElement(Order=2)]
        public ControlModes isInControlMode
        {
            get
            {
                return _isInControlMode;
            }
            set
            {
                _isInControlMode = value;
            }
        }
        
        [XmlElement(Order=3)]
        public MovableElementOperatingModes isInOperatingMode
        {
            get
            {
                return _isInOperatingMode;
            }
            set
            {
                _isInOperatingMode = value;
            }
        }
    }
    
    /// <summary>
    /// The mode in which the movable element shall be controlled.
    /// Choose
    /// <ul>
    /// <li><b>locally </b>controlled by trackside manually operated levers or ground frame in the vicinity.</li>
    /// </ul>
    /// <ul>
    /// <li><b>remote </b>controlled when an interlocking normally controls the element, even when the element can be taken over for local working e.g. shunting.</li>
    /// </ul>
    /// <ul>
    /// <li><b>not movable</b> for crossings without movable diamond.</li>
    /// <li><b>decommissioned </b>when (partly) removed.</li>
    /// <li><b>other </b>mode.</li>
    /// <li><b>undetermined</b>, when the mode is unknown.</li>
    /// </ul>
    /// Most remote controlled points can be cranked locally.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum ControlModes
    {
        /// <summary>
        /// The element is locally controlled by hand.
        /// When there is a ground frame, the <i>components </i>are normally mechanically controlled (<a href="$element://{81F76E0C-713C-4d1a-9BDE-3F549BA808D6}"><font color="#0000ff"><u>see this class</u></font></a>)
        /// </summary>
        local,
        /// <summary>
        /// an interlocking normally controls the element, even when the element can be taken over for local working e.g. shunting.
        /// </summary>
        remote,
        /// <summary>
        /// Used for a crossing without switchable diamond.
        /// </summary>
        notMovable,
        /// <summary>
        /// No longer in service, partly removed (e.g. in France, the drive is removed), yet some iron is left.
        /// </summary>
        decommissioned,
        /// <summary>
        /// some other control mode.
        /// </summary>
        other,
        /// <summary>
        /// The control mode is unknown.
        /// </summary>
        undetermined,
    }
    
    /// <summary>
    /// Indicates whether the element can move (not fixed, default) or has been immobilised in a given position.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum MovableElementOperatingModes
    {
        /// <summary>
        /// This is the default, i.e. not fixed in a given position.
        /// </summary>
        notFixed,
        /// <summary>
        /// Actuation is prevented by
        /// <ul>
        /// <li>a plug that prevents the interlocking from moving the element (de-DE: Betriebsartenstecker)</li>
        /// <li>unplugging power</li>
        /// <li>removing the drive.</li>
        /// </ul>
        /// </summary>
        fixedElectrically,
        /// <summary>
        /// The element is kept in place mechanically. The fixation is described by the clampType attribute.
        /// </summary>
        fixedMechanically,
        /// <summary>
        /// The point is fixed, both electrically and mechanically.
        /// The mechanical fixation is described by the clampType attribute.
        /// </summary>
        fixedMechanicallyAndElectrically,
    }
    
    /// <summary>
    /// Properties that apply to a derailer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("derailerElementConfiguration", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class DerailerElementConfiguration : MovableElementConfiguration
    {
        #region Private fields
        private DerailingPositionTypes _derailerIsFixedInPosition;
        #endregion
        
        /// <summary>
        /// The derailer is mechanically fixed and locked in this position.
        /// </summary>
        [XmlElement(Order=0)]
        public DerailingPositionTypes derailerIsFixedInPosition
        {
            get
            {
                return _derailerIsFixedInPosition;
            }
            set
            {
                _derailerIsFixedInPosition = value;
            }
        }
    }
    
    /// <summary>
    /// Set of positions that a derailer can adopt.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum DerailingPositionTypes
    {
        /// <summary>
        /// The derailer is engaged and will derail a passing train.
        /// </summary>
        derailing,
        /// <summary>
        /// The derailer is not engaged and will not derail a passing train.
        /// </summary>
        notDerailing,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("pointCrossingElementConfiguration", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class PointCrossingElementConfiguration : MovableElementConfiguration
    {
        #region Private fields
        private LeftRight _pointIsFixedInPosition;
        private string _clampType;
        private bool _hasTrailingDetection;
        private bool _isTrailable;
        #endregion
        
        [XmlElement(Order=0)]
        public LeftRight pointIsFixedInPosition
        {
            get
            {
                return _pointIsFixedInPosition;
            }
            set
            {
                _pointIsFixedInPosition = value;
            }
        }
        
        /// <summary>
        /// The type of clamping that can be applied to this movable element.
        /// Use these strings:
        /// <ul>
        /// <li>clampandScotch for articolo 8 in Italy, or</li>
        /// <li>VCC in France</li>
        /// <li>EmergencyLock for HV_73 in Germany</li>
        /// <li>clamp for Weichenschloss in Germany</li>
        /// <li>Zungensperre in Germany.</li>
        /// <li>detectorBarLock for Riegelhandschloss in Germany.</li>
        /// </ul>
        /// <i>Scotch </i>is a block that separates the blade from the stock rail.
        /// </summary>
        [XmlAttribute]
        public string clampType
        {
            get
            {
                return _clampType;
            }
            set
            {
                _clampType = value;
            }
        }
        
        /// <summary>
        /// True if the movable element is equipped to detect trailing. This is a sensor that detects train passage that would trail the point.
        /// <ul>
        /// <li>de-DE: Auffahrortung</li>
        /// </ul>
        /// <ul>
        /// <li>nl-NL: openrijdetectie</li>
        /// </ul>
        /// <ul>
        /// <li>fr-FR: d&#233;tection de passage en talon</li>
        /// </ul>
        /// </summary>
        [XmlAttribute]
        public bool hasTrailingDetection
        {
            get
            {
                return _hasTrailingDetection;
            }
            set
            {
                _hasTrailingDetection = value;
            }
        }
        
        /// <summary>
        /// True if the movable element can be trailed without damage.
        /// <ul>
        /// <li>de-DE: auffahrbar</li>
        /// <li>fr-FR: talonnable </li>
        /// <li>nl-NL: openrijbaar</li>
        /// </ul>
        /// </summary>
        [XmlAttribute]
        public bool isTrailable
        {
            get
            {
                return _isTrailable;
            }
            set
            {
                _isTrailable = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum LeftRight
    {
        left,
        right,
    }
    
    /// <summary>
    /// A set of properties that applies to a TDS component.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("tdsComponentConfiguration", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class TdsComponentConfiguration : TrackAssetConfiguration
    {
        #region Private fields
        private tElementWithIDref _appliesToTdsComponent;
        private bool _canBeActivated;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref appliesToTdsComponent
        {
            get
            {
                if ((_appliesToTdsComponent == null))
                {
                    _appliesToTdsComponent = new tElementWithIDref();
                }
                return _appliesToTdsComponent;
            }
            set
            {
                _appliesToTdsComponent = value;
            }
        }
        
        /// <summary>
        /// Indicates the ability to command the activation of a TDS component.
        /// false: always active
        /// true: can be de-/activated
        /// </summary>
        [XmlAttribute]
        public bool canBeActivated
        {
            get
            {
                return _canBeActivated;
            }
            set
            {
                _canBeActivated = value;
            }
        }
    }
    
    /// <summary>
    /// A set of properties that applies to a movable component.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("turnoutComponentConfiguration", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class TurnoutComponentConfiguration : TrackAssetConfiguration
    {
        #region Private fields
        private tElementWithIDref _appliesToTurnoutComponent;
        private MechanismTypes _isDrivenByMechanismType;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref appliesToTurnoutComponent
        {
            get
            {
                if ((_appliesToTurnoutComponent == null))
                {
                    _appliesToTurnoutComponent = new tElementWithIDref();
                }
                return _appliesToTurnoutComponent;
            }
            set
            {
                _appliesToTurnoutComponent = value;
            }
        }
        
        /// <summary>
        /// Only useful when the turnout mechanism is not broken down further.
        /// </summary>
        [XmlElement(Order=1)]
        public MechanismTypes isDrivenByMechanismType
        {
            get
            {
                return _isDrivenByMechanismType;
            }
            set
            {
                _isDrivenByMechanismType = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum MechanismTypes
    {
        /// <summary>
        /// Actuated electrically
        /// </summary>
        electric,
        /// <summary>
        /// Power transmitted via wires or bars.
        /// </summary>
        mechanical,
        /// <summary>
        /// Power provided by hydraulics.
        /// </summary>
        hydraulic,
        /// <summary>
        /// Power provided by pneumatics.
        /// </summary>
        pneumatic,
        /// <summary>
        /// Locally operated by hand-pulled levers. Forces can be transmitted by rods but over a short distance. When forces are transmitted over longer wires and rods, powering is considered mechanical.
        /// </summary>
        handOperated,
        other,
    }
    
    /// <summary>
    /// A set of properties that applies to a TDS section.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("tdsSectionConfiguration", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class TdsSectionConfiguration : TrackAssetConfiguration
    {
        #region Private fields
        private tElementWithIDref _appliesToTdsSection;
        private Duration _hasAntiToggleTime;
        private Duration _hasDelayOfNotificationOfAvailability;
        private Duration _hasMaxResponseTimeFCP;
        private Duration _hasMaxResponseTimeFCPA;
        private Duration _hasMaxResponseTimeFCPAForAcknowledgment;
        private ResetStrategy _hasResetStrategy;
        private Duration _hasTdpDelay;
        private bool _isOverridable;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref appliesToTdsSection
        {
            get
            {
                if ((_appliesToTdsSection == null))
                {
                    _appliesToTdsSection = new tElementWithIDref();
                }
                return _appliesToTdsSection;
            }
            set
            {
                _appliesToTdsSection = value;
            }
        }
        
        /// <summary>
        /// EULYNX parameter Anti-toggle time, Con_t_Anti_Toggle_Time, is a configurable delay, defining the duration of a TVPS in state “TVPS occupied and unable to be forced to clear” or “TVPS disturbed and unable to be forced to clear” between an outgoing wheel and the reporting of the new status “TVPS occupied and able to be forced to clear" or “TVPS disturbed and able to be forced to clear".
        /// </summary>
        [XmlElement(Order=1)]
        public Duration hasAntiToggleTime
        {
            get
            {
                if ((_hasAntiToggleTime == null))
                {
                    _hasAntiToggleTime = new Duration();
                }
                return _hasAntiToggleTime;
            }
            set
            {
                _hasAntiToggleTime = value;
            }
        }
        
        /// <summary>
        /// EULYNX parameter Delay of notification of availability, Con_t_Delay_Of_Notification_Of_Availability, is a configurable delay of reporting vacant from the Subsystem - Train Detection System to the Subsystem - Electronic Interlocking, following the state change of a TVPS from occupied to vacant. The delay of notification is only effective if the state change was triggered by a train not by a FC-command.
        /// </summary>
        [XmlElement(Order=2)]
        public Duration hasDelayOfNotificationOfAvailability
        {
            get
            {
                if ((_hasDelayOfNotificationOfAvailability == null))
                {
                    _hasDelayOfNotificationOfAvailability = new Duration();
                }
                return _hasDelayOfNotificationOfAvailability;
            }
            set
            {
                _hasDelayOfNotificationOfAvailability = value;
            }
        }
        
        /// <summary>
        /// EULYNX parameter Con_tmax_Response_Time_FC_P is a configurable timer, defining the maximum time between receiving a FC-P-command and a successful sweeping train (difference between the counted incoming and outgoing Wheels is "0").  This timer could be deactivated by configuration.
        /// </summary>
        [XmlElement(Order=3)]
        public Duration hasMaxResponseTimeFCP
        {
            get
            {
                if ((_hasMaxResponseTimeFCP == null))
                {
                    _hasMaxResponseTimeFCP = new Duration();
                }
                return _hasMaxResponseTimeFCP;
            }
            set
            {
                _hasMaxResponseTimeFCP = value;
            }
        }
        
        /// <summary>
        /// EYLYNX parameter Con_tmax_Response_Time_FC_P_A is a configurable timer, defining the maximum time between receiving a FC-P-A-command and a successful sweeping train (difference between the counted incoming and outgoing Wheels is "0").  This timer could be deactivated by configuration.
        /// </summary>
        [XmlElement(Order=4)]
        public Duration hasMaxResponseTimeFCPA
        {
            get
            {
                if ((_hasMaxResponseTimeFCPA == null))
                {
                    _hasMaxResponseTimeFCPA = new Duration();
                }
                return _hasMaxResponseTimeFCPA;
            }
            set
            {
                _hasMaxResponseTimeFCPA = value;
            }
        }
        
        /// <summary>
        /// EULYNX parameter Con_tmax_Response_Time_FC_P_A_For_Acknowledgment is a configurable timer, defining the maximum time between sending an acknowledgment request from Subsystem - Train Detection System to Subsystem - Electronic Interlocking and receiving the acknowledgement from the Subsystem - Electronic Interlocking while executing an FC-P-A-command.
        /// </summary>
        [XmlElement(Order=5)]
        public Duration hasMaxResponseTimeFCPAForAcknowledgment
        {
            get
            {
                if ((_hasMaxResponseTimeFCPAForAcknowledgment == null))
                {
                    _hasMaxResponseTimeFCPAForAcknowledgment = new Duration();
                }
                return _hasMaxResponseTimeFCPAForAcknowledgment;
            }
            set
            {
                _hasMaxResponseTimeFCPAForAcknowledgment = value;
            }
        }
        
        [XmlElement(Order=6)]
        public ResetStrategy hasResetStrategy
        {
            get
            {
                if ((_hasResetStrategy == null))
                {
                    _hasResetStrategy = new ResetStrategy();
                }
                return _hasResetStrategy;
            }
            set
            {
                _hasResetStrategy = value;
            }
        }
        
        /// <summary>
        /// EULYNX parameter Con_t_TDP_Delay is a configurable delay, defining the duration of a passed TDP and the message, that the TDP is in state "TDP not passed".
        /// </summary>
        [XmlElement(Order=7)]
        public Duration hasTdpDelay
        {
            get
            {
                if ((_hasTdpDelay == null))
                {
                    _hasTdpDelay = new Duration();
                }
                return _hasTdpDelay;
            }
            set
            {
                _hasTdpDelay = value;
            }
        }
        
        /// <summary>
        /// True when the associated section is configured to allow override.
        /// The override procedure allows the signaller to open a signal that is closed because the TDS section reports (presumably false) occupied.
        /// de-DE: Hilfsfreimeldung eingerichtet
        /// </summary>
        [XmlAttribute]
        public bool isOverridable
        {
            get
            {
                return _isOverridable;
            }
            set
            {
                _isOverridable = value;
            }
        }
    }
    
    /// <summary>
    /// Reset strategy of a TDS section.
    /// If strategy is not defined, reset is not possible.
    /// de-DE: Grundstellf&#228;higkeit
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("resetStrategy", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class ResetStrategy
    {
        #region Private fields
        private ResetStrategyTypes _isOfResetStrategyType;
        private bool _monitorRfcForFcaAndFcap;
        #endregion
        
        [XmlElement(Order=0)]
        public ResetStrategyTypes isOfResetStrategyType
        {
            get
            {
                return _isOfResetStrategyType;
            }
            set
            {
                _isOfResetStrategyType = value;
            }
        }
        
        /// <summary>
        /// Configures whether to monitor the RFC for FC-P and FC-P-A
        /// </summary>
        [XmlAttribute]
        public bool monitorRfcForFcaAndFcap
        {
            get
            {
                return _monitorRfcForFcaAndFcap;
            }
            set
            {
                _monitorRfcForFcaAndFcap = value;
            }
        }
    }
    
    /// <summary>
    /// The types of reset strategies.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum ResetStrategyTypes
    {
        /// <summary>
        /// FC-C, Force section status to clear, conditional
        /// </summary>
        fc_c,
        /// <summary>
        /// FC-P, Force section status to clear, preparatory
        /// </summary>
        fc_p,
        /// <summary>
        /// FC-P-A, Force section status to clear, preparatory, with acknowledgement
        /// </summary>
        fc_p_a,
        /// <summary>
        /// FC-U, Force section status to clear, unconditional
        /// </summary>
        fc_u,
    }
    
    /// <summary>
    /// A set of properties that applies to a TVP section.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("tvpSectionConfiguration", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class TvpSectionConfiguration : TrackAssetConfiguration
    {
        #region Private fields
        private tElementWithIDref _appliesToTvpSection;
        private bool _berthingTrack;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref appliesToTvpSection
        {
            get
            {
                if ((_appliesToTvpSection == null))
                {
                    _appliesToTvpSection = new tElementWithIDref();
                }
                return _appliesToTvpSection;
            }
            set
            {
                _appliesToTvpSection = value;
            }
        }
        
        /// <summary>
        /// True if this section is part of a berthing track, i.e. track where trains may halt and change direction.
        /// Typically, an Interlocking assures that trains progress from section to section in an ordered sequence (aka. two/three phase release). This check would fail when a train changes direction. If this attribute is true, the interlocking does not carry out this check for this section.
        /// </summary>
        [XmlAttribute]
        public bool berthingTrack
        {
            get
            {
                return _berthingTrack;
            }
            set
            {
                _berthingTrack = value;
            }
        }
    }
    
    /// <summary>
    /// A set of as built properties that applies to a movable element.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("movableElementAsBuiltConfiguration", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class MovableElementAsBuiltConfiguration : TrackAssetConfiguration
    {
        #region Private fields
        private tElementWithIDref _appliesToMovableElement;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref appliesToMovableElement
        {
            get
            {
                if ((_appliesToMovableElement == null))
                {
                    _appliesToMovableElement = new tElementWithIDref();
                }
                return _appliesToMovableElement;
            }
            set
            {
                _appliesToMovableElement = value;
            }
        }
    }
    
    /// <summary>
    /// For storing remarks in form of text or attached documents.
    /// For instance: <i>according to minutes of meeting 03.12.2019</i>.
    /// Not to be confused with description.
    /// 
    /// DE: Bearbeitungsvermerk
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("annotation", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class Annotation : BaseObject1
    {
        #region Private fields
        private string _comment;
        private tElementWithIDref[] _refersToAttachment;
        private string _createdByRole;
        private System.DateTime _dateTimeStamp;
        private string _shortComment;
        private string _validity;
        #endregion
        
        /// <summary>
        /// Describes the annotation in free text form not restricted in length.
        /// Non-text binary information such as images can be stored as attachment.
        /// </summary>
        [XmlElement(Order=0)]
        public string comment
        {
            get
            {
                return _comment;
            }
            set
            {
                _comment = value;
            }
        }
        
        /// <summary>
        /// Allows adding accompanying documents. This could for instance link to a exception procedure, french derogation.
        /// </summary>
        [XmlElement("refersToAttachment", Order=1)]
        public tElementWithIDref[] refersToAttachment
        {
            get
            {
                return _refersToAttachment;
            }
            set
            {
                _refersToAttachment = value;
            }
        }
        
        /// <summary>
        /// The role of the person who created the annotation.
        /// For instance: designer/engineer, checker or approver (NR).
        /// Other roles can be specified.
        /// </summary>
        [XmlAttribute]
        public string createdByRole
        {
            get
            {
                return _createdByRole;
            }
            set
            {
                _createdByRole = value;
            }
        }
        
        /// <summary>
        /// Date and time at which the annotation was created.
        /// </summary>
        [XmlAttribute]
        public System.DateTime dateTimeStamp
        {
            get
            {
                return _dateTimeStamp;
            }
            set
            {
                _dateTimeStamp = value;
            }
        }
        
        /// <summary>
        /// Short summary of the comment.
        /// </summary>
        [XmlAttribute]
        public string shortComment
        {
            get
            {
                return _shortComment;
            }
            set
            {
                _shortComment = value;
            }
        }
        
        /// <summary>
        /// Tag for the validity in terms of scope or time span.
        /// For instance: construction phase 2, resignalling project, entire lifecycle.
        /// </summary>
        [XmlAttribute]
        public string validity
        {
            get
            {
                return _validity;
            }
            set
            {
                _validity = value;
            }
        }
    }
    
    /// <summary>
    /// General class for describing the signal type. National types can be described in the national domains.
    /// For instance: signal head type as defined by NR.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("signalType", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class SignalType : BaseObject1
    {
        #region Private fields
        private tElementWithIDref _appliesToSignal;
        private string _value;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref appliesToSignal
        {
            get
            {
                if ((_appliesToSignal == null))
                {
                    _appliesToSignal = new tElementWithIDref();
                }
                return _appliesToSignal;
            }
            set
            {
                _appliesToSignal = value;
            }
        }
        
        /// <summary>
        /// Type of signal, defined at the national level. This classification supports algorithms and queries such as
        /// <ul>
        /// <li>a route entry and exit signal shall be main signals.</li>
        /// <li>how many shunting signals are needed by the project?</li>
        /// </ul>
        /// </summary>
        [XmlAttribute]
        public string value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
    }
    
    /// <summary>
    /// Yard, region or zone for administrative purposes, without further technical definitions.
    /// <ul>
    /// <li>DB: &#214;rtlichkeit, z.B. Hamburg Airport ("AAI"). Controller X operates Hamburg Airport and Hamburg Reeperbahn</li>
    /// <li>ProRail: emplacementen, gebieden, aansluitingen Dt, UT, Ams, Amf, Amfa...</li>
    /// <li>SBB: Betriebspunkt</li>
    /// <li>RFI: Area di giurisdizione</li>
    /// <li>SNCF: zone ou sous-zone d'action d'un poste</li>
    /// <li>NR: not used in SDEF; instead use signalbox which maps to a control area</li>
    /// </ul>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("operationalLocality", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class OperationalLocality : BaseObject1
    {
        #region Private fields
        private string _abbreviation;
        private tElementWithIDref _isPartOfOperationalLocalility;
        private string _longName;
        private string _shortName;
        private string _type;
        #endregion
        
        /// <summary>
        /// Abridged name of the locality according to national rules and code lists.
        /// </summary>
        [XmlElement(Order=0)]
        public string abbreviation
        {
            get
            {
                return _abbreviation;
            }
            set
            {
                _abbreviation = value;
            }
        }
        
        /// <summary>
        /// The locality can be part of a bigger one, e.g. parts of a station belong to a station.
        /// Station can be a part of an administrative area.
        /// </summary>
        [XmlElement(Order=1)]
        public tElementWithIDref isPartOfOperationalLocalility
        {
            get
            {
                if ((_isPartOfOperationalLocalility == null))
                {
                    _isPartOfOperationalLocalility = new tElementWithIDref();
                }
                return _isPartOfOperationalLocalility;
            }
            set
            {
                _isPartOfOperationalLocalility = value;
            }
        }
        
        /// <summary>
        /// Long name
        /// </summary>
        [XmlElement(Order=2)]
        public string longName
        {
            get
            {
                return _longName;
            }
            set
            {
                _longName = value;
            }
        }
        
        /// <summary>
        /// Short name, i.e. limited number of letters/digits.
        /// </summary>
        [XmlElement(Order=3)]
        public string shortName
        {
            get
            {
                return _shortName;
            }
            set
            {
                _shortName = value;
            }
        }
        
        /// <summary>
        /// The locality type according to national rules, e.g. station, stop, junction, cross-over.
        /// de-DE: Art der &#214;rtlichkeit.
        /// </summary>
        [XmlElement(Order=4)]
        public string type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }
    }
    
    /// <summary>
    /// Operational function of the signal, e.g. entry or exit signal, block signal, bridge warning signal. These functions are nationally defined and can be described in the national domains (outside the common EULYNX DP scope).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("signalFunction", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class SignalFunction : BaseObject1
    {
        #region Private fields
        private tElementWithIDref _appliesToSignal;
        private string _value;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref appliesToSignal
        {
            get
            {
                if ((_appliesToSignal == null))
                {
                    _appliesToSignal = new tElementWithIDref();
                }
                return _appliesToSignal;
            }
            set
            {
                _appliesToSignal = value;
            }
        }
        
        [XmlAttribute]
        public string value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
    }
    
    /// <summary>
    /// A set of actively controlled signal aspects.
    /// </summary>
    [XmlIncludeAttribute(typeof(AspectComposition))]
    [XmlIncludeAttribute(typeof(StopMessage))]
    [XmlIncludeAttribute(typeof(ProceedMessage))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("activeAspectSet", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class ActiveAspectSet : BaseObject1
    {
        #region Private fields
        private tElementWithIDref[] _emitsActiveAspect;
        private string _semantic;
        #endregion
        
        /// <summary>
        /// Commands emission of this aspect.
        /// </summary>
        [XmlElement("emitsActiveAspect", Order=0)]
        public tElementWithIDref[] emitsActiveAspect
        {
            get
            {
                return _emitsActiveAspect;
            }
            set
            {
                _emitsActiveAspect = value;
            }
        }
        
        /// <summary>
        /// Description of the meaning of the message as a string.
        /// </summary>
        [XmlAttribute]
        public string semantic
        {
            get
            {
                return _semantic;
            }
            set
            {
                _semantic = value;
            }
        }
    }
    
    /// <summary>
    /// A message sent by a signal.
    /// Typically, the meaning of the message is defined in a rule book and associated with a given light aspect, sign and/or shape of the signal.
    /// </summary>
    [XmlIncludeAttribute(typeof(StopMessage))]
    [XmlIncludeAttribute(typeof(ProceedMessage))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("aspectComposition", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class AspectComposition : ActiveAspectSet
    {
        #region Private fields
        private tElementWithIDref[] _composedOfAspect;
        private tElementWithIDref _requiresSynchedFlashing;
        #endregion
        
        /// <summary>
        /// The message signalled to the driver is composed of one or more aspects, typically a light aspect from a main signal frame and another aspect from an additional signal frame that modulates the message.
        /// Messages have a semantic organised in a taxonomy.
        /// </summary>
        [XmlElement("composedOfAspect", Order=0)]
        public tElementWithIDref[] composedOfAspect
        {
            get
            {
                return _composedOfAspect;
            }
            set
            {
                _composedOfAspect = value;
            }
        }
        
        /// <summary>
        /// Synchronised flashing is used to modify the message.
        /// For instance: RFI uses in-phase and alternate flashing.
        /// </summary>
        [XmlElement(Order=1)]
        public tElementWithIDref requiresSynchedFlashing
        {
            get
            {
                if ((_requiresSynchedFlashing == null))
                {
                    _requiresSynchedFlashing = new tElementWithIDref();
                }
                return _requiresSynchedFlashing;
            }
            set
            {
                _requiresSynchedFlashing = value;
            }
        }
    }
    
    /// <summary>
    /// Indicates that the train must stop.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("stopMessage", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class StopMessage : AspectComposition
    {
        #region Private fields
        private bool _imperative;
        #endregion
        
        /// <summary>
        /// This boolean modifies of the message.
        /// <ul>
        /// <li>True: the signalling system ascertains danger beyond the signal: the stop must be respected.</li>
        /// </ul>
        /// <ul>
        /// <li>False: a failure prevents the signalling system from asserting danger beyond the signal. Typically, the driver may then proceed with caution and permission given by the signalman.</li>
        /// </ul>
        /// </summary>
        [XmlAttribute]
        public bool imperative
        {
            get
            {
                return _imperative;
            }
            set
            {
                _imperative = value;
            }
        }
    }
    
    /// <summary>
    /// Indicates that the train may proceed.
    /// 
    /// Note: the end user can specialise this class to adapt it to national needs.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("proceedMessage", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class ProceedMessage : AspectComposition
    {
    }
    
    /// <summary>
    /// Parameters for activating the level crossing by detection of departure of an ETCS train.
    /// nl-NL: vertrekdetectiepunt
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("lxDepartureDetection", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class LxDepartureDetection : BaseObject1
    {
        #region Private fields
        private SpotLocation _hasDepartureDetectionPoint;
        private tElementWithIDref _hasOperationalDepartureArea;
        private Length _hasSpeedRestrictionLength;
        #endregion
        
        /// <summary>
        /// The spot up to where ETCS train departure detection can activate the level crossing.
        /// nl-NL: vertrekdetectiepunt
        /// </summary>
        [XmlElement(Order=0)]
        public SpotLocation hasDepartureDetectionPoint
        {
            get
            {
                return _hasDepartureDetectionPoint;
            }
            set
            {
                _hasDepartureDetectionPoint = value;
            }
        }
        
        /// <summary>
        /// The operational point from which the train leaves (platform track; used for calibrating train runs to the time table).
        /// nl-NL: verwijzing naar het dienstregelpunt (perronspoor) waar vanuit de trein vertrekt.
        /// </summary>
        [XmlElement(Order=1)]
        public tElementWithIDref hasOperationalDepartureArea
        {
            get
            {
                if ((_hasOperationalDepartureArea == null))
                {
                    _hasOperationalDepartureArea = new tElementWithIDref();
                }
                return _hasOperationalDepartureArea;
            }
            set
            {
                _hasOperationalDepartureArea = value;
            }
        }
        
        /// <summary>
        /// The distance over which the restricted speed applies. This allows the LX sufficient time to close.
        /// nl-NL: de lengte van de conditionele snelheidsbeperking naar de overweg van het vertrekdetectiepunt.
        /// </summary>
        [XmlElement(Order=2)]
        public Length hasSpeedRestrictionLength
        {
            get
            {
                if ((_hasSpeedRestrictionLength == null))
                {
                    _hasSpeedRestrictionLength = new Length();
                }
                return _hasSpeedRestrictionLength;
            }
            set
            {
                _hasSpeedRestrictionLength = value;
            }
        }
    }
    
    /// <summary>
    /// Indicates whether the train may proceed beyond the signal with or without stopping.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("nonStopMovement", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class NonStopMovement : BaseObject1
    {
        #region Private fields
        private tElementWithIDref _appliesToSignal;
        private NonStopMovementAllowedTypes _hasCondition;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref appliesToSignal
        {
            get
            {
                if ((_appliesToSignal == null))
                {
                    _appliesToSignal = new tElementWithIDref();
                }
                return _appliesToSignal;
            }
            set
            {
                _appliesToSignal = value;
            }
        }
        
        [XmlElement(Order=1)]
        public NonStopMovementAllowedTypes hasCondition
        {
            get
            {
                return _hasCondition;
            }
            set
            {
                _hasCondition = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum NonStopMovementAllowedTypes
    {
        /// <summary>
        /// The train is to stop, only after which the signal is opened for a follow-on route.
        /// </summary>
        disallowed,
        /// <summary>
        /// A route beyond the signal may be called together with the previous route so that the train can proceed without stopping.
        /// </summary>
        allowed,
        /// <summary>
        /// The train is allowed to proceed with a shunting route.
        /// 
        /// Ist betrieblich die Weiterfahrt einer Zugfahrt als Rangierfahrt zu gestatten
        /// </summary>
        nextIsShunting,
    }
    
    /// <summary>
    /// Maximum (signalled) line speed, i.e. the speed allowed when the signals show 'proceed without restrictions'.
    /// de-DE: Geschwindigkeit, die bei Zugstra&#223;en mit diesem befahrenen Teil ohne Einschr&#228;nkung durch Zs 3 gefahren w&#252;rde (Geschwindigkeit der Strecke).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("maxRouteBodySpeed", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class MaxRouteBodySpeed : BaseObject1
    {
        #region Private fields
        private tElementWithIDref _appliesToRouteBody;
        private Speed _hasMaxSpeed;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref appliesToRouteBody
        {
            get
            {
                if ((_appliesToRouteBody == null))
                {
                    _appliesToRouteBody = new tElementWithIDref();
                }
                return _appliesToRouteBody;
            }
            set
            {
                _appliesToRouteBody = value;
            }
        }
        
        [XmlElement(Order=1)]
        public Speed hasMaxSpeed
        {
            get
            {
                if ((_hasMaxSpeed == null))
                {
                    _hasMaxSpeed = new Speed();
                }
                return _hasMaxSpeed;
            }
            set
            {
                _hasMaxSpeed = value;
            }
        }
    }
    
    /// <summary>
    /// Base class for additional route properties.
    /// </summary>
    [XmlIncludeAttribute(typeof(AutoRoute))]
    [XmlIncludeAttribute(typeof(RouteTowardsTunnel))]
    [XmlIncludeAttribute(typeof(RouteSetupTime))]
    [XmlIncludeAttribute(typeof(IntermediatePointRelatedSpeedUpgrade))]
    [XmlIncludeAttribute(typeof(RoutePriority))]
    [XmlIncludeAttribute(typeof(RouteAvailableInARS))]
    [XmlIncludeAttribute(typeof(RouteWithReducedBrakingDistance))]
    [XmlIncludeAttribute(typeof(RouteSpeedRestriction))]
    [XmlIncludeAttribute(typeof(RouteTractionType))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("routeProperty", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public abstract partial class RouteProperty : BaseObject1
    {
        #region Private fields
        private tElementWithIDref _appliesToRoute;
        private tElementWithIDref[] _causesSpeedRestriction;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref appliesToRoute
        {
            get
            {
                if ((_appliesToRoute == null))
                {
                    _appliesToRoute = new tElementWithIDref();
                }
                return _appliesToRoute;
            }
            set
            {
                _appliesToRoute = value;
            }
        }
        
        /// <summary>
        /// A route with a given property can cause a speed restriction.
        /// </summary>
        [XmlElement("causesSpeedRestriction", Order=1)]
        public tElementWithIDref[] causesSpeedRestriction
        {
            get
            {
                return _causesSpeedRestriction;
            }
            set
            {
                _causesSpeedRestriction = value;
            }
        }
    }
    
    /// <summary>
    /// The interlocking calls this route automatically and again, immediately after the train has cleared the route. The operator has to intervene if he wishes to call another route.
    /// <ul>
    /// <li>German: Selbststellbetrieb</li>
    /// </ul>
    /// <ul>
    /// <li>French: trace permanent </li>
    /// </ul>
    /// <ul>
    /// <li>UK: autoworking </li>
    /// </ul>
    /// Note: When this functionality is part of the control system, use the class RouteAvailableInARS instead.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("autoRoute", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class AutoRoute : RouteProperty
    {
    }
    
    /// <summary>
    /// This route leads towards a tunnel.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("routeTowardsTunnel", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class RouteTowardsTunnel : RouteProperty
    {
    }
    
    /// <summary>
    /// The typical delay between the moment the operator calls this route and the moment the entry signal opens.
    /// This  parameter includes the response-time of many subsystems as well as point throwing time (the position of which is often unknown beforehand). This parameter is by nature stochastic.
    /// This parameter is useful for simulation purposes and system performance analysis.
    /// 
    /// de-DE: Fahrstra&#223;enbildezeit
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("routeSetupTime", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class RouteSetupTime : RouteProperty
    {
        #region Private fields
        private Duration _hasSetupTime;
        #endregion
        
        [XmlElement(Order=0)]
        public Duration hasSetupTime
        {
            get
            {
                if ((_hasSetupTime == null))
                {
                    _hasSetupTime = new Duration();
                }
                return _hasSetupTime;
            }
            set
            {
                _hasSetupTime = value;
            }
        }
    }
    
    /// <summary>
    /// This route has a point that imposes a speed reduction. Once the train has cleared the point, the speed reduction no longer applies.
    /// de-DE: Geschwindigkeitseinschraenkung aufgrund Mittelweiche.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("intermediatePointRelatedSpeedUpgrade", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class IntermediatePointRelatedSpeedUpgrade : RouteProperty
    {
    }
    
    /// <summary>
    /// Indicates the priority of the route
    /// <ul>
    /// <li>when there is only one route from entry to exit, priority=0</li>
    /// <li>when there are multiple routes from entry to exit, the lowest number has highest priority. Alternative routes are numbered 1..n</li>
    /// </ul>
    /// This allows a control system to attribute priorities to route setting. Whether or not the control system auto-selects lower priority routes when no higher priority route is available, depends on national rules and regulations.
    /// de-DE: Regelfahrstra&#223;e 0, Umfahrstra&#223;en 1...n
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("routePriority", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class RoutePriority : RouteProperty
    {
        #region Private fields
        private int _value;
        #endregion
        
        /// <summary>
        /// The value of the route priority
        /// </summary>
        [XmlAttribute]
        public int value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
    }
    
    /// <summary>
    /// This route is available in an Automatic Route Setting (ARS) system.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("routeAvailableInARS", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class RouteAvailableInARS : RouteProperty
    {
    }
    
    /// <summary>
    /// The distance to the closed signal of this route is lower than usual, resulting in a shorter braking distance. This in turn can be signalled to the driver with a specific sequence of aspects (UK, NL, FR solution, pre-annonce) or an extra light (DE solution, Zusatzlicht).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("routeWithReducedBrakingDistance", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class RouteWithReducedBrakingDistance : RouteProperty
    {
    }
    
    /// <summary>
    /// Speed restriction resulting from external constraints that cannot be deduced from the elements situated along or associated with this route. For instance noise reduction or simplification of speed profiles.
    /// Not to be used for speed restriction due to reduced braking distance. Use the class <a href="$element://{74A6B407-1140-41ae-B7DB-608B70FD2999}"><font color="#0000ff"><u>RouteWithReducedBrakingDistance</u></font></a> instead.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("routeSpeedRestriction", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class RouteSpeedRestriction : RouteProperty
    {
        #region Private fields
        private Speed _hasSpeedRestriction;
        #endregion
        
        /// <summary>
        /// Speed restriction applying to a route.
        /// de-DE: Fstr-v
        /// </summary>
        [XmlElement(Order=0)]
        public Speed hasSpeedRestriction
        {
            get
            {
                if ((_hasSpeedRestriction == null))
                {
                    _hasSpeedRestriction = new Speed();
                }
                return _hasSpeedRestriction;
            }
            set
            {
                _hasSpeedRestriction = value;
            }
        }
    }
    
    /// <summary>
    /// The route is suitable for the given type of traction.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("routeTractionType", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class RouteTractionType : RouteProperty
    {
        #region Private fields
        private RouteTractionTypes _isSuitableForTractionType;
        #endregion
        
        /// <summary>
        /// This route is suitable for the given type of traction.
        /// </summary>
        [XmlElement(Order=0)]
        public RouteTractionTypes isSuitableForTractionType
        {
            get
            {
                return _isSuitableForTractionType;
            }
            set
            {
                _isSuitableForTractionType = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum RouteTractionTypes
    {
        /// <summary>
        /// Suitable for electric traction.
        /// </summary>
        fullyElectrified,
        /// <summary>
        /// The route (or parts of it) is not electrified. This route is permissible for non-electric vehicles only.
        /// <ul>
        /// <li>Germany: F-Bedienung</li>
        /// </ul>
        /// <ul>
        /// <li>NL: Dieseltractie</li>
        /// </ul>
        /// <ul>
        /// <li>France: Thermique</li>
        /// </ul>
        /// Note: this is a static property and does not take into account whether traction power can be switched off.
        /// </summary>
        notFullyElectrified,
    }
    
    /// <summary>
    /// Some reference drawings contain parameterised sketches that need a specific value in a concrete engineering planning. This concrete value is stored as a key-value pair where the key is the name of the parameter in the drawing and the value is the applicable value.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("referenceDrawingParameter", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class ReferenceDrawingParameter : BaseObject1
    {
        #region Private fields
        private string _name;
        private float _value;
        #endregion
        
        /// <summary>
        /// Name of the parameter in the reference drawing.
        /// </summary>
        [XmlAttribute]
        public string name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
        
        /// <summary>
        /// Concrete value for the given parameter.
        /// </summary>
        [XmlAttribute]
        public float value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
    }
    
    /// <summary>
    /// ETCS dangerpoint marks the spot beyond the EoA up to where a train can advance without danger.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("etcsDangerpoint", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class EtcsDangerpoint : BaseObject1
    {
        #region Private fields
        private EtcsTrainCategorySpeed _hasAllowedTrainCategorySpeed;
        private tElementWithIDref _isLocatedAt;
        private tElementWithIDref _isLocatedAt1;
        private bool _automaticReleaseSpeedCalculation;
        #endregion
        
        /// <summary>
        /// The train in this category is allowed to approach the dangerpoint with this release speed.
        /// </summary>
        [XmlElement(Order=0)]
        public EtcsTrainCategorySpeed hasAllowedTrainCategorySpeed
        {
            get
            {
                if ((_hasAllowedTrainCategorySpeed == null))
                {
                    _hasAllowedTrainCategorySpeed = new EtcsTrainCategorySpeed();
                }
                return _hasAllowedTrainCategorySpeed;
            }
            set
            {
                _hasAllowedTrainCategorySpeed = value;
            }
        }
        
        /// <summary>
        /// A spot beyond the EoA. D_DP is the distance between EoA and dangerpoint
        /// </summary>
        [XmlElement(Order=1)]
        public tElementWithIDref isLocatedAt
        {
            get
            {
                if ((_isLocatedAt == null))
                {
                    _isLocatedAt = new tElementWithIDref();
                }
                return _isLocatedAt;
            }
            set
            {
                _isLocatedAt = value;
            }
        }
        
        [XmlElement("isLocatedAt", Order=2)]
        public tElementWithIDref isLocatedAt1
        {
            get
            {
                if ((_isLocatedAt1 == null))
                {
                    _isLocatedAt1 = new tElementWithIDref();
                }
                return _isLocatedAt1;
            }
            set
            {
                _isLocatedAt1 = value;
            }
        }
        
        /// <summary>
        /// true when the release speed is calculated automatically.
        /// When false, then the allowed train category speed provides the release speed.
        /// </summary>
        [XmlAttribute]
        public bool automaticReleaseSpeedCalculation
        {
            get
            {
                return _automaticReleaseSpeedCalculation;
            }
            set
            {
                _automaticReleaseSpeedCalculation = value;
            }
        }
    }
    
    /// <summary>
    /// Tuple of ETCS train category and speed.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("etcsTrainCategorySpeed", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class EtcsTrainCategorySpeed
    {
        #region Private fields
        private int _nc_diff;
        private int _v_diff;
        #endregion
        
        [XmlAttribute]
        public int nc_diff
        {
            get
            {
                return _nc_diff;
            }
            set
            {
                _nc_diff = value;
            }
        }
        
        [XmlAttribute]
        public int v_diff
        {
            get
            {
                return _v_diff;
            }
            set
            {
                _v_diff = value;
            }
        }
    }
    
    /// <summary>
    /// A boolean equation.
    /// </summary>
    [XmlIncludeAttribute(typeof(StdCondition))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("condition", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class Condition : BaseObject1
    {
        #region Private fields
        private tElementWithIDref[] _assetAndState;
        private tElementWithIDref _condition;
        private MathematicalOperators _operator;
        private string _description;
        #endregion
        
        [XmlElement("assetAndState", Order=0)]
        public tElementWithIDref[] assetAndState
        {
            get
            {
                return _assetAndState;
            }
            set
            {
                _assetAndState = value;
            }
        }
        
        /// <summary>
        /// For creating complex conditions.
        /// </summary>
        [XmlElement(Order=1)]
        public tElementWithIDref condition
        {
            get
            {
                if ((_condition == null))
                {
                    _condition = new tElementWithIDref();
                }
                return _condition;
            }
            set
            {
                _condition = value;
            }
        }
        
        [XmlElement(Order=2)]
        public MathematicalOperators @operator
        {
            get
            {
                return _operator;
            }
            set
            {
                _operator = value;
            }
        }
        
        /// <summary>
        /// Description of the boolean and temporal operators that make up the condition.
        /// </summary>
        [XmlAttribute]
        public string description
        {
            get
            {
                return _description;
            }
            set
            {
                _description = value;
            }
        }
    }
    
    /// <summary>
    /// Set of binary and unary operators.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum MathematicalOperators
    {
        and,
        or,
        /// <summary>
        /// E.g. NOT (W23A, left)
        /// </summary>
        not,
        before,
        after,
        /// <summary>
        /// logically identical to AND
        /// </summary>
        until,
    }
    
    /// <summary>
    /// A condition in a State Transition Diagram is a boolean condition that triggers a transition from start-state to target-state.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("stdCondition", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class StdCondition : Condition
    {
        #region Private fields
        private tElementWithIDref[] _gotoTargetState;
        private tElementWithIDref _hasStartState;
        #endregion
        
        [XmlElement("gotoTargetState", Order=0)]
        public tElementWithIDref[] gotoTargetState
        {
            get
            {
                return _gotoTargetState;
            }
            set
            {
                _gotoTargetState = value;
            }
        }
        
        [XmlElement(Order=1)]
        public tElementWithIDref hasStartState
        {
            get
            {
                if ((_hasStartState == null))
                {
                    _hasStartState = new tElementWithIDref();
                }
                return _hasStartState;
            }
            set
            {
                _hasStartState = value;
            }
        }
    }
    
    /// <summary>
    /// A diamond is the lozenge shape where the rails intersect in a crossing.
    /// </summary>
    [XmlIncludeAttribute(typeof(DiamondHalf))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("diamond", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class Diamond : BaseObject1
    {
        #region Private fields
        private tElementWithIDref[] _isLocatedAt;
        #endregion
        
        /// <summary>
        /// The diamond is spot located with respect to two different linear elements.
        /// </summary>
        [XmlElement("isLocatedAt", Order=0)]
        public tElementWithIDref[] isLocatedAt
        {
            get
            {
                return _isLocatedAt;
            }
            set
            {
                _isLocatedAt = value;
            }
        }
    }
    
    /// <summary>
    /// Crossing diamond component A or B.
    /// The diamond divides into a half A and half B.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("diamondHalf", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class DiamondHalf : Diamond
    {
        #region Private fields
        private DiamondComponentSide _atSide;
        private Speed _imposesSpeedRestrictionLeft;
        private Speed _imposesSpeedRestrictionRight;
        #endregion
        
        [XmlElement(Order=0)]
        public DiamondComponentSide atSide
        {
            get
            {
                return _atSide;
            }
            set
            {
                _atSide = value;
            }
        }
        
        [XmlElement(Order=1)]
        public Speed imposesSpeedRestrictionLeft
        {
            get
            {
                if ((_imposesSpeedRestrictionLeft == null))
                {
                    _imposesSpeedRestrictionLeft = new Speed();
                }
                return _imposesSpeedRestrictionLeft;
            }
            set
            {
                _imposesSpeedRestrictionLeft = value;
            }
        }
        
        [XmlElement(Order=2)]
        public Speed imposesSpeedRestrictionRight
        {
            get
            {
                if ((_imposesSpeedRestrictionRight == null))
                {
                    _imposesSpeedRestrictionRight = new Speed();
                }
                return _imposesSpeedRestrictionRight;
            }
            set
            {
                _imposesSpeedRestrictionRight = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum DiamondComponentSide
    {
        /// <summary>
        /// One half of the (movable) diamond in a crossing.
        /// </summary>
        componentA,
        /// <summary>
        /// One half of the (movable) diamond in a crossing.
        /// </summary>
        componentB,
    }
    
    /// <summary>
    /// To support track workers in locating the asset, the local datum combines a reference point easily identified in the field (for instance a milepost or overhead catenary mast), and a distance and direction to the asset.
    /// Not for computing the position of the asset.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("localDatum", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class LocalDatum : BaseObject1
    {
        #region Private fields
        private string _direction;
        private float _longitudinalMeasure;
        private string _referencePoint;
        #endregion
        
        /// <summary>
        /// Either &lt;plus&gt; or &lt;minus&gt;, incrementing or decrementing kilometrage.
        /// </summary>
        [XmlAttribute]
        public string direction
        {
            get
            {
                return _direction;
            }
            set
            {
                _direction = value;
            }
        }
        
        /// <summary>
        /// Distance from the datum (positive number).
        /// </summary>
        [XmlAttribute]
        public float longitudinalMeasure
        {
            get
            {
                return _longitudinalMeasure;
            }
            set
            {
                _longitudinalMeasure = value;
            }
        }
        
        /// <summary>
        /// Name of a well-identifiable object acting as a reference for locating an other track asset.
        /// For instance: Milepost 23 1/2
        /// </summary>
        [XmlAttribute]
        public string referencePoint
        {
            get
            {
                return _referencePoint;
            }
            set
            {
                _referencePoint = value;
            }
        }
    }
    
    [XmlIncludeAttribute(typeof(FtgsTrackCircuitProperties))]
    [XmlIncludeAttribute(typeof(LowFrequencyTrackCircuitProperties))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("trackCircuitProperties", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class TrackCircuitProperties : BaseObject1
    {
        #region Private fields
        private Length _hasElectricLength;
        private int _ballastResistance;
        #endregion
        
        /// <summary>
        /// Electric length of the section, computed according to the regulations and the local particularities.
        /// </summary>
        [XmlElement(Order=0)]
        public Length hasElectricLength
        {
            get
            {
                if ((_hasElectricLength == null))
                {
                    _hasElectricLength = new Length();
                }
                return _hasElectricLength;
            }
            set
            {
                _hasElectricLength = value;
            }
        }
        
        /// <summary>
        /// Resistance of the track bed of the section (Ohm per km). Given if the train detection technology is a track circuit.
        /// Can be used when calculating the maximum length of the track circuit.
        /// de-DE: Bettungswiderstand
        /// </summary>
        [XmlAttribute]
        public int ballastResistance
        {
            get
            {
                return _ballastResistance;
            }
            set
            {
                _ballastResistance = value;
            }
        }
    }
    
    /// <summary>
    /// Properties that apply to the FTG S track circuit.
    /// Cut section length E1, E2, E3 are given only if there are at least 2,3 or 4 cut sections.
    /// de-DE: Elektrische Laenge des Teilabschnitts E<i><sub>n</sub></i>.
    /// Ermittlung entsprechend Anwendungsrichtlinie. Angabe des Attributs erfolgt nur, wenn mindestens 2,3 oder 4 Teillaengen existieren, sonst ist die Angabe des Attributs FMA Laenge hinreichend).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("ftgsTrackCircuitProperties", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class FtgsTrackCircuitProperties : TrackCircuitProperties
    {
        #region Private fields
        private Length[] _hasLengthE;
        private Length _hasLengthS;
        #endregion
        
        /// <summary>
        /// Electric length of FTGS subsection E1, E2, E3 (See the FTG S documentation).
        /// </summary>
        [XmlElement("hasLengthE", Order=0)]
        public Length[] hasLengthE
        {
            get
            {
                return _hasLengthE;
            }
            set
            {
                _hasLengthE = value;
            }
        }
        
        /// <summary>
        /// Electric length of FTGS subsection S (See the FTG S documentation).
        /// </summary>
        [XmlElement(Order=1)]
        public Length hasLengthS
        {
            get
            {
                if ((_hasLengthS == null))
                {
                    _hasLengthS = new Length();
                }
                return _hasLengthS;
            }
            set
            {
                _hasLengthS = value;
            }
        }
    }
    
    /// <summary>
    /// Low frequency track circuit properties.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("lowFrequencyTrackCircuitProperties", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class LowFrequencyTrackCircuitProperties : TrackCircuitProperties
    {
        #region Private fields
        private Length _hasInfluencedLength;
        #endregion
        
        /// <summary>
        /// Influenced length for track circuit using the NF technology.
        /// DE: Beeinflusste Laenge des Freimeldeabschnitts.
        /// </summary>
        [XmlElement(Order=0)]
        public Length hasInfluencedLength
        {
            get
            {
                if ((_hasInfluencedLength == null))
                {
                    _hasInfluencedLength = new Length();
                }
                return _hasInfluencedLength;
            }
            set
            {
                _hasInfluencedLength = value;
            }
        }
    }
    
    /// <summary>
    /// Port between LEU and individually-controlled balise.
    /// The planned and as-built port may differ due to the planning process. Both numbers are stored.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("leuPort", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class LeuPort : BaseObject1
    {
        #region Private fields
        private int _asBuiltNumber;
        private int _plannedNumber;
        #endregion
        
        /// <summary>
        /// The as-built port.
        /// </summary>
        [XmlElement(Order=0)]
        public int asBuiltNumber
        {
            get
            {
                return _asBuiltNumber;
            }
            set
            {
                _asBuiltNumber = value;
            }
        }
        
        /// <summary>
        /// Port number as planned during initial engineering.
        /// </summary>
        [XmlElement(Order=1)]
        public int plannedNumber
        {
            get
            {
                return _plannedNumber;
            }
            set
            {
                _plannedNumber = value;
            }
        }
    }
    
    /// <summary>
    /// Additional source of information.
    /// For instance:  approval document, drawing, sketches, calculations, d&#233;rogation (Fr).
    /// This should be enriched at the national level with types according to document types such as as-built validation document, etc.
    /// 
    /// Do not use as a convenience class for storing information covered by existing attributes.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("attachment", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class Attachment : BaseObject1
    {
        #region Private fields
        private string _content;
        private string _contentType;
        private string _fileName;
        #endregion
        
        /// <summary>
        /// The document given as a blob of bytes or an Uniform Resource Indicator (uri), reference to a document in a data base.
        /// </summary>
        [XmlElement(Order=0)]
        public string content
        {
            get
            {
                return _content;
            }
            set
            {
                _content = value;
            }
        }
        
        /// <summary>
        /// The MIME type of the content.
        /// See: http://www.iana.org/assignments/media-types/media-types.xhtml
        /// </summary>
        [XmlAttribute]
        public string contentType
        {
            get
            {
                return _contentType;
            }
            set
            {
                _contentType = value;
            }
        }
        
        /// <summary>
        /// The name of the file.
        /// The filename may include the extension and relative path.
        /// </summary>
        [XmlAttribute]
        public string fileName
        {
            get
            {
                return _fileName;
            }
            set
            {
                _fileName = value;
            }
        }
    }
    
    /// <summary>
    /// The spot, projected on the platform edge, where passengers tend to cluster, typically near the stairs, escalator or elevator. This helps to determine where the train should stop.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("platformEdgeAccessPoint", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class PlatformEdgeAccessPoint : BaseObject1
    {
        #region Private fields
        private tElementWithIDref _isLocatedAt;
        private tElementWithIDref _isOnPlatformEdge;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref isLocatedAt
        {
            get
            {
                if ((_isLocatedAt == null))
                {
                    _isLocatedAt = new tElementWithIDref();
                }
                return _isLocatedAt;
            }
            set
            {
                _isLocatedAt = value;
            }
        }
        
        [XmlElement(Order=1)]
        public tElementWithIDref isOnPlatformEdge
        {
            get
            {
                if ((_isOnPlatformEdge == null))
                {
                    _isOnPlatformEdge = new tElementWithIDref();
                }
                return _isOnPlatformEdge;
            }
            set
            {
                _isOnPlatformEdge = value;
            }
        }
    }
    
    /// <summary>
    /// A configuration property that typically applies to an individual object.
    /// </summary>
    [XmlIncludeAttribute(typeof(SupplierInformation))]
    [XmlIncludeAttribute(typeof(ControlCode))]
    [XmlIncludeAttribute(typeof(ForeignKey))]
    [XmlIncludeAttribute(typeof(Description))]
    [XmlIncludeAttribute(typeof(Designation))]
    [XmlIncludeAttribute(typeof(SimpleDesignation))]
    [XmlIncludeAttribute(typeof(ObjectStatus))]
    [XmlIncludeAttribute(typeof(DummyMode))]
    [XmlIncludeAttribute(typeof(CoveredObject))]
    [XmlIncludeAttribute(typeof(OutOfService))]
    [XmlIncludeAttribute(typeof(OutOfServicePreparative))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("configurationProperty", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public abstract partial class ConfigurationProperty : BaseObject1
    {
    }
    
    /// <summary>
    /// Information about OEM and supplier. For instance:
    /// <ul>
    /// <li>Movares <i>supplies </i>an interlocking manufactured by <i>OEM </i>Hima.</li>
    /// </ul>
    /// <ul>
    /// <li>Siemens <i>supplies </i>axle counters from <i>OEM </i>Frauscher</li>
    /// </ul>
    /// Useful if a resignalling project needs the as-built information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("supplierInformation", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class SupplierInformation : ConfigurationProperty
    {
        #region Private fields
        private string _oemName;
        private string _oemProductName;
        private string _supplierName;
        #endregion
        
        /// <summary>
        /// Name of the Original Equipment Manufacturer, e.g. CAF, Thales, Alstom, Siemens.
        /// </summary>
        [XmlAttribute]
        public string oemName
        {
            get
            {
                return _oemName;
            }
            set
            {
                _oemName = value;
            }
        }
        
        /// <summary>
        /// Type description by the OEM
        /// e.g. Eurobalise <i>S21</i>
        /// or track circuit UM71
        /// </summary>
        [XmlAttribute]
        public string oemProductName
        {
            get
            {
                return _oemProductName;
            }
            set
            {
                _oemProductName = value;
            }
        }
        
        /// <summary>
        /// The company that supplied the equipment.
        /// </summary>
        [XmlAttribute]
        public string supplierName
        {
            get
            {
                return _supplierName;
            }
            set
            {
                _supplierName = value;
            }
        }
    }
    
    /// <summary>
    /// The string that is typed on the control console to call a route or more generally to control an track asset.
    /// This can be used if the string can't be generated from the designation of the asset, designation of the route or entry/exit signals
    /// de-De: Bedienstring
    /// en-GB: console code
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("controlCode", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class ControlCode : ConfigurationProperty
    {
        #region Private fields
        private string _name;
        #endregion
        
        /// <summary>
        /// The console code given as a string.
        /// </summary>
        [XmlElement(Order=0)]
        public string name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    }
    
    /// <summary>
    /// Key to an entry in a foreign database, e.g. SAP or GIS. Also known as secondary key or alias. Useful for creating links to asset management systems.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("foreignKey", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class ForeignKey : ConfigurationProperty
    {
        #region Private fields
        private string _key;
        private string _source;
        #endregion
        
        /// <summary>
        /// Key to the entry in the source database.
        /// </summary>
        [XmlAttribute]
        public string key
        {
            get
            {
                return _key;
            }
            set
            {
                _key = value;
            }
        }
        
        /// <summary>
        /// Source, where the foreign, also known as alias, alternative or secondary key is defined. E.g. in SAP, DB-GIS, InfraAtlas, Ariane.
        /// </summary>
        [XmlAttribute]
        public string source
        {
            get
            {
                return _source;
            }
            set
            {
                _source = value;
            }
        }
    }
    
    /// <summary>
    /// To give a detailed description of the object under configuration.
    /// Not to be confused with annotation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("description", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class Description : ConfigurationProperty
    {
        #region Private fields
        private string _text;
        #endregion
        
        [XmlElement(Order=0)]
        public string text
        {
            get
            {
                return _text;
            }
            set
            {
                _text = value;
            }
        }
    }
    
    /// <summary>
    /// Abstract class for defining labels or complex names to designate a track asset. Alternatively, use the SimpleDesignation class.
    /// 
    /// Note: Labels and national labelling rules should be defined in the national namespace.
    /// </summary>
    [XmlIncludeAttribute(typeof(SimpleDesignation))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("designation", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public abstract partial class Designation : ConfigurationProperty
    {
    }
    
    /// <summary>
    /// Useful for short names and abbreviations, like  "Derby" for  "Derby interlocking".
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("simpleDesignation", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class SimpleDesignation : Designation
    {
        #region Private fields
        private string _name;
        #endregion
        
        [XmlAttribute]
        public string name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    }
    
    /// <summary>
    /// An object-configuration can reflect a particular status, typically in construction phases.
    /// For instance, a signal can be disconnected so drivers disregard the signal. The signal would then own a configuration associated with an out-of-service status.
    /// This abstract class reflects an object status and the IM can specialise the object status that describes national needs.
    /// </summary>
    [XmlIncludeAttribute(typeof(DummyMode))]
    [XmlIncludeAttribute(typeof(CoveredObject))]
    [XmlIncludeAttribute(typeof(OutOfService))]
    [XmlIncludeAttribute(typeof(OutOfServicePreparative))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("objectStatus", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public abstract partial class ObjectStatus : ConfigurationProperty
    {
    }
    
    /// <summary>
    /// The asset that owns this configuration-status has been replaced by a dummy, i.e. a stubbed object that mimics the real object such that the signalling system can operate normally. The dummy has no role other than providing the I/O that the signalling system expects.
    /// Typically used for points or level crossings.
    /// (German  "Betriebsartenstecker")
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("dummyMode", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class DummyMode : ObjectStatus
    {
    }
    
    /// <summary>
    /// The asset that owns this configuration-status is made invisible to the driver or train. It typically applies to signals or balises. If the asset is a controlled asset, the signalling system still controls the asset.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("coveredObject", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class CoveredObject : ObjectStatus
    {
    }
    
    /// <summary>
    /// The asset that owns this configuration-status is decommissioned: the element is physically present but disconnected or no longer controlled from the signalling installation (logically disconnected through software).
    /// </summary>
    [XmlIncludeAttribute(typeof(OutOfServicePreparative))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("outOfService", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class OutOfService : ObjectStatus
    {
    }
    
    /// <summary>
    /// The asset that owns this configuration-status has been physically modified or built in preparation for a later phase of construction. The signalling system is unaware of this modification and does not control it. Typical example is the addition of a speed indicator that will be taken into service at a later date.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("outOfServicePreparative", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class OutOfServicePreparative : OutOfService
    {
    }
    
    /// <summary>
    /// Configuration information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("configuration", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class Configuration : BaseObject1
    {
        #region Private fields
        private tElementWithIDref _appliesToBaselineOfRuleSet;
        private ConfigurationProperty[] _hasConfigurationProperty;
        private tElementWithIDref _lastModifiedBy;
        private tElementWithIDref[] _refersToAnnotation;
        private tElementWithIDref _refersToBaselineDocument;
        private tElementWithIDref _refersToOperationalLocality;
        private tElementWithIDref _refersToTimeFrame;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref appliesToBaselineOfRuleSet
        {
            get
            {
                if ((_appliesToBaselineOfRuleSet == null))
                {
                    _appliesToBaselineOfRuleSet = new tElementWithIDref();
                }
                return _appliesToBaselineOfRuleSet;
            }
            set
            {
                _appliesToBaselineOfRuleSet = value;
            }
        }
        
        [XmlElement("hasConfigurationProperty", Order=1)]
        public ConfigurationProperty[] hasConfigurationProperty
        {
            get
            {
                return _hasConfigurationProperty;
            }
            set
            {
                _hasConfigurationProperty = value;
            }
        }
        
        [XmlElement(Order=2)]
        public tElementWithIDref lastModifiedBy
        {
            get
            {
                if ((_lastModifiedBy == null))
                {
                    _lastModifiedBy = new tElementWithIDref();
                }
                return _lastModifiedBy;
            }
            set
            {
                _lastModifiedBy = value;
            }
        }
        
        [XmlElement("refersToAnnotation", Order=3)]
        public tElementWithIDref[] refersToAnnotation
        {
            get
            {
                return _refersToAnnotation;
            }
            set
            {
                _refersToAnnotation = value;
            }
        }
        
        /// <summary>
        /// In case the time stamp does not uniquely define the applied set of rules and regulations, an attachment/document describing the applicable implementation can be referred to.
        /// </summary>
        [XmlElement(Order=4)]
        public tElementWithIDref refersToBaselineDocument
        {
            get
            {
                if ((_refersToBaselineDocument == null))
                {
                    _refersToBaselineDocument = new tElementWithIDref();
                }
                return _refersToBaselineDocument;
            }
            set
            {
                _refersToBaselineDocument = value;
            }
        }
        
        [XmlElement(Order=5)]
        public tElementWithIDref refersToOperationalLocality
        {
            get
            {
                if ((_refersToOperationalLocality == null))
                {
                    _refersToOperationalLocality = new tElementWithIDref();
                }
                return _refersToOperationalLocality;
            }
            set
            {
                _refersToOperationalLocality = value;
            }
        }
        
        /// <summary>
        /// Refers to time frame during which the asset is in operation.
        /// </summary>
        [XmlElement(Order=6)]
        public tElementWithIDref refersToTimeFrame
        {
            get
            {
                if ((_refersToTimeFrame == null))
                {
                    _refersToTimeFrame = new tElementWithIDref();
                }
                return _refersToTimeFrame;
            }
            set
            {
                _refersToTimeFrame = value;
            }
        }
    }
    
    /// <summary>
    /// Provides an identity plus a configuration.
    /// </summary>
    [XmlIncludeAttribute(typeof(TempShuntingArea))]
    [XmlIncludeAttribute(typeof(TpsDataTransmissionSystem))]
    [XmlIncludeAttribute(typeof(BaliseGroup))]
    [XmlIncludeAttribute(typeof(EtcsBaliseGroup))]
    [XmlIncludeAttribute(typeof(ViaLocation))]
    [XmlIncludeAttribute(typeof(TunnelSignal))]
    [XmlIncludeAttribute(typeof(TpsDataTransmissionSystemProperties))]
    [XmlIncludeAttribute(typeof(InfrastructureBorder))]
    [XmlIncludeAttribute(typeof(RouteApproachLocking))]
    [XmlIncludeAttribute(typeof(ReferenceDrawing))]
    [XmlIncludeAttribute(typeof(LevelCrossingTimerSet))]
    [XmlIncludeAttribute(typeof(EtcsSystemVersion))]
    [XmlIncludeAttribute(typeof(Normalisation))]
    [XmlIncludeAttribute(typeof(RouteCondition))]
    [XmlIncludeAttribute(typeof(ConditionAffectingRoute))]
    [XmlIncludeAttribute(typeof(ConditionAffectingKRI))]
    [XmlIncludeAttribute(typeof(ConditionAffectingSignal))]
    [XmlIncludeAttribute(typeof(ControlRelation))]
    [XmlIncludeAttribute(typeof(ControllerRelation))]
    [XmlIncludeAttribute(typeof(AssetControlRelation))]
    [XmlIncludeAttribute(typeof(EtcsPointCrossing))]
    [XmlIncludeAttribute(typeof(LocalOperatingZoneRelation))]
    [XmlIncludeAttribute(typeof(LockCombination))]
    [XmlIncludeAttribute(typeof(ExpansionJoint))]
    [XmlIncludeAttribute(typeof(DangerAreaTrack))]
    [XmlIncludeAttribute(typeof(LineSideSpotDevice))]
    [XmlIncludeAttribute(typeof(LineSideSpotDetector))]
    [XmlIncludeAttribute(typeof(LocalOperatingZone))]
    [XmlIncludeAttribute(typeof(Segment))]
    [XmlIncludeAttribute(typeof(SpeedSegment))]
    [XmlIncludeAttribute(typeof(TrainCategorySpeedRestriction))]
    [XmlIncludeAttribute(typeof(TemporarySpeedRestriction))]
    [XmlIncludeAttribute(typeof(AssetUser))]
    [XmlIncludeAttribute(typeof(LocalOperatingZoneLimit))]
    [XmlIncludeAttribute(typeof(EtcsNode))]
    [XmlIncludeAttribute(typeof(CssArea))]
    [XmlIncludeAttribute(typeof(SignalFrame))]
    [XmlIncludeAttribute(typeof(TrackConditionArea))]
    [XmlIncludeAttribute(typeof(NoEddyCurrentBrakeArea))]
    [XmlIncludeAttribute(typeof(LimitedCurrentArea))]
    [XmlIncludeAttribute(typeof(BigMetalMassArea))]
    [XmlIncludeAttribute(typeof(NoRegenerativeBrakeArea))]
    [XmlIncludeAttribute(typeof(NonStoppingArea))]
    [XmlIncludeAttribute(typeof(TrainCategory))]
    [XmlIncludeAttribute(typeof(PassengerTrain))]
    [XmlIncludeAttribute(typeof(KvbTrain))]
    [XmlIncludeAttribute(typeof(FreightTrain))]
    [XmlIncludeAttribute(typeof(TiltingTrain))]
    [XmlIncludeAttribute(typeof(TpwsTrain))]
    [XmlIncludeAttribute(typeof(SignalVector))]
    [XmlIncludeAttribute(typeof(Route))]
    [XmlIncludeAttribute(typeof(MainRoute))]
    [XmlIncludeAttribute(typeof(ShuntingRoute))]
    [XmlIncludeAttribute(typeof(OnSightRoute))]
    [XmlIncludeAttribute(typeof(EtcsRoute))]
    [XmlIncludeAttribute(typeof(PlatformEdge))]
    [XmlIncludeAttribute(typeof(UsablePlatformEdge))]
    [XmlIncludeAttribute(typeof(InfrastructuralPlatformEdge))]
    [XmlIncludeAttribute(typeof(OperationalPlatformEdge))]
    [XmlIncludeAttribute(typeof(SpeedProfile))]
    [XmlIncludeAttribute(typeof(TrainCategorySpeedProfile))]
    [XmlIncludeAttribute(typeof(CableRoute))]
    [XmlIncludeAttribute(typeof(CableTray))]
    [XmlIncludeAttribute(typeof(CableTrough))]
    [XmlIncludeAttribute(typeof(RaisedCableTrough))]
    [XmlIncludeAttribute(typeof(FreeCableRoute))]
    [XmlIncludeAttribute(typeof(FreeHangingCableRoute))]
    [XmlIncludeAttribute(typeof(CableBridge))]
    [XmlIncludeAttribute(typeof(CableTrench))]
    [XmlIncludeAttribute(typeof(TemporaryCableRoute))]
    [XmlIncludeAttribute(typeof(CablePipe))]
    [XmlIncludeAttribute(typeof(UnderTrackCrossing))]
    [XmlIncludeAttribute(typeof(AssetAndState))]
    [XmlIncludeAttribute(typeof(LXandState))]
    [XmlIncludeAttribute(typeof(SectionAndVacancy))]
    [XmlIncludeAttribute(typeof(CompoundLogicalObjectAndState))]
    [XmlIncludeAttribute(typeof(MovableElementAndPosition))]
    [XmlIncludeAttribute(typeof(CrossingElementAndPosition))]
    [XmlIncludeAttribute(typeof(DerailerElementAndPosition))]
    [XmlIncludeAttribute(typeof(PointElementAndPosition))]
    [XmlIncludeAttribute(typeof(SignalAndMessage))]
    [XmlIncludeAttribute(typeof(PowerSupplyModule))]
    [XmlIncludeAttribute(typeof(VirtualPowerSupplyModule))]
    [XmlIncludeAttribute(typeof(PhysicalPowerSupplyModule))]
    [XmlIncludeAttribute(typeof(RbcArea))]
    [XmlIncludeAttribute(typeof(CivilStructure))]
    [XmlIncludeAttribute(typeof(TdsOccupancyOverrideGroup))]
    [XmlIncludeAttribute(typeof(ConflictingRoute))]
    [XmlIncludeAttribute(typeof(RouteConvergencyConflict))]
    [XmlIncludeAttribute(typeof(RouteConflictOverlappingTvpSections))]
    [XmlIncludeAttribute(typeof(RouteConflictOverlap))]
    [XmlIncludeAttribute(typeof(ControlArea))]
    [XmlIncludeAttribute(typeof(SafetyDistance))]
    [XmlIncludeAttribute(typeof(DistanceToDangerpoint))]
    [XmlIncludeAttribute(typeof(Overlap))]
    [XmlIncludeAttribute(typeof(LevelCrossingRouteRelation))]
    [XmlIncludeAttribute(typeof(EtcsEdge))]
    [XmlIncludeAttribute(typeof(SwingingOverlap))]
    [XmlIncludeAttribute(typeof(EtcsSignal))]
    [XmlIncludeAttribute(typeof(Key))]
    [XmlIncludeAttribute(typeof(Illumination))]
    [XmlIncludeAttribute(typeof(LevelCrossingSignalRelation))]
    [XmlIncludeAttribute(typeof(ConductorRail))]
    [XmlIncludeAttribute(typeof(SectionsForFlankProtection))]
    [XmlIncludeAttribute(typeof(DiagnosticsOpcUaConfiguration))]
    [XmlIncludeAttribute(typeof(BlockSystem))]
    [XmlIncludeAttribute(typeof(BaliseGroupFunction))]
    [XmlIncludeAttribute(typeof(LocalOperatingArea))]
    [XmlIncludeAttribute(typeof(RouteBody))]
    [XmlIncludeAttribute(typeof(LevelCrossingLocalOperationUiElement))]
    [XmlIncludeAttribute(typeof(CompositeRoute))]
    [XmlIncludeAttribute(typeof(ConditionSectionsClear))]
    [XmlIncludeAttribute(typeof(NonReplacement))]
    [XmlIncludeAttribute(typeof(TpsProtectionDistance))]
    [XmlIncludeAttribute(typeof(TrackCrossing))]
    [XmlIncludeAttribute(typeof(FootpathCrossing))]
    [XmlIncludeAttribute(typeof(TriggerAssignment))]
    [XmlIncludeAttribute(typeof(RastaPropertySet))]
    [XmlIncludeAttribute(typeof(PlatformFacility))]
    [XmlIncludeAttribute(typeof(EtcsTelegram))]
    [XmlIncludeAttribute(typeof(ChangeMarker))]
    [XmlIncludeAttribute(typeof(SpeedChangeMarker))]
    [XmlIncludeAttribute(typeof(TpMarker))]
    [XmlIncludeAttribute(typeof(EtcsMarker))]
    [XmlIncludeAttribute(typeof(EtcsTransitionMarker))]
    [XmlIncludeAttribute(typeof(EtcsRbcTransitionMarker))]
    [XmlIncludeAttribute(typeof(EtcsTsiCcsTransitionMarker))]
    [XmlIncludeAttribute(typeof(EtcsLevelTransitionMarker))]
    [XmlIncludeAttribute(typeof(EtcsModeTransitionMarker))]
    [XmlIncludeAttribute(typeof(EtcsGeoPosMarker))]
    [XmlIncludeAttribute(typeof(EtcsNationalValueChangeMarker))]
    [XmlIncludeAttribute(typeof(EtcsConditionalEmergencyStopMarker))]
    [XmlIncludeAttribute(typeof(EtcsTrackConditionMarker))]
    [XmlIncludeAttribute(typeof(TC67_BigMetalMass))]
    [XmlIncludeAttribute(typeof(TC40_ChangeOfAllowedCurrentConsumption))]
    [XmlIncludeAttribute(typeof(TC69_StationPlatforms))]
    [XmlIncludeAttribute(typeof(TC68_TrackCondition))]
    [XmlIncludeAttribute(typeof(TC39_ChangeOfTractionSystem))]
    [XmlIncludeAttribute(typeof(EtcsTextMessageMarker))]
    [XmlIncludeAttribute(typeof(EtcsSpeedChangeMarker))]
    [XmlIncludeAttribute(typeof(EtcsGradientChangeMarker))]
    [XmlIncludeAttribute(typeof(TpTransitionMarker))]
    [XmlIncludeAttribute(typeof(LozAssetRelation))]
    [XmlIncludeAttribute(typeof(LozTdsSection))]
    [XmlIncludeAttribute(typeof(LozDerailerRelation))]
    [XmlIncludeAttribute(typeof(LozPointRelation))]
    [XmlIncludeAttribute(typeof(LozKeyReleaseInstrumentRelation))]
    [XmlIncludeAttribute(typeof(LozSignalRelation))]
    [XmlIncludeAttribute(typeof(WorkZone))]
    [XmlIncludeAttribute(typeof(EtcsNationalValueSet))]
    [XmlIncludeAttribute(typeof(ShuntingRouteSectionProving))]
    [XmlIncludeAttribute(typeof(SpecialPositionArrangement))]
    [XmlIncludeAttribute(typeof(TrackAsset))]
    [XmlIncludeAttribute(typeof(TpsDevice))]
    [XmlIncludeAttribute(typeof(TpsLinearDevice))]
    [XmlIncludeAttribute(typeof(TpsSpotDevice))]
    [XmlIncludeAttribute(typeof(Detonator))]
    [XmlIncludeAttribute(typeof(Balise))]
    [XmlIncludeAttribute(typeof(EtcsBalise))]
    [XmlIncludeAttribute(typeof(VehicleStop))]
    [XmlIncludeAttribute(typeof(BufferStop))]
    [XmlIncludeAttribute(typeof(SandHump))]
    [XmlIncludeAttribute(typeof(LevelCrossingSystem))]
    [XmlIncludeAttribute(typeof(InterlockingIntegratedLevelCrossing))]
    [XmlIncludeAttribute(typeof(MainSignalProtectedLevelCrossing))]
    [XmlIncludeAttribute(typeof(SelfSupervisedLevelCrossing))]
    [XmlIncludeAttribute(typeof(LocallyMonitoredLevelCrossing))]
    [XmlIncludeAttribute(typeof(EtcsLevelCrossingSystem))]
    [XmlIncludeAttribute(typeof(VehiclePassageDetector))]
    [XmlIncludeAttribute(typeof(TdsComponent))]
    [XmlIncludeAttribute(typeof(AxleCountingHead))]
    [XmlIncludeAttribute(typeof(InsulatedRailJoint))]
    [XmlIncludeAttribute(typeof(ElectricJoint))]
    [XmlIncludeAttribute(typeof(VehicleSensor))]
    [XmlIncludeAttribute(typeof(TcSensor))]
    [XmlIncludeAttribute(typeof(TcSensorCombined))]
    [XmlIncludeAttribute(typeof(Loop))]
    [XmlIncludeAttribute(typeof(Treadle))]
    [XmlIncludeAttribute(typeof(EMSensor))]
    [XmlIncludeAttribute(typeof(BufferSensor))]
    [XmlIncludeAttribute(typeof(DepressionBar))]
    [XmlIncludeAttribute(typeof(MovableElement))]
    [XmlIncludeAttribute(typeof(MovableSystem))]
    [XmlIncludeAttribute(typeof(RailwayBarrier))]
    [XmlIncludeAttribute(typeof(MovableCatenary))]
    [XmlIncludeAttribute(typeof(Turnout))]
    [XmlIncludeAttribute(typeof(Derailer))]
    [XmlIncludeAttribute(typeof(PointCrossing))]
    [XmlIncludeAttribute(typeof(Point))]
    [XmlIncludeAttribute(typeof(Crossing))]
    [XmlIncludeAttribute(typeof(MovableBridge))]
    [XmlIncludeAttribute(typeof(MovableComponent))]
    [XmlIncludeAttribute(typeof(Mechanism))]
    [XmlIncludeAttribute(typeof(PoweredMechanism))]
    [XmlIncludeAttribute(typeof(ElectricDrive))]
    [XmlIncludeAttribute(typeof(HydraulicDrive))]
    [XmlIncludeAttribute(typeof(PneumaticDrive))]
    [XmlIncludeAttribute(typeof(HandOperatedMechanism))]
    [XmlIncludeAttribute(typeof(MechanicalMechanism))]
    [XmlIncludeAttribute(typeof(TurnoutComponent))]
    [XmlIncludeAttribute(typeof(PointBlades))]
    [XmlIncludeAttribute(typeof(PointBlade))]
    [XmlIncludeAttribute(typeof(DerailerComponent))]
    [XmlIncludeAttribute(typeof(Frog))]
    [XmlIncludeAttribute(typeof(FacingPointLock))]
    [XmlIncludeAttribute(typeof(TvpSection))]
    [XmlIncludeAttribute(typeof(Signal))]
    [XmlIncludeAttribute(typeof(VirtualSignal))]
    [XmlIncludeAttribute(typeof(NonPhysicalSignal))]
    [XmlIncludeAttribute(typeof(PhysicalSignal))]
    [XmlIncludeAttribute(typeof(Sign))]
    [XmlIncludeAttribute(typeof(Milepost))]
    [XmlIncludeAttribute(typeof(ActiveSignal))]
    [XmlIncludeAttribute(typeof(MechanicalSignal))]
    [XmlIncludeAttribute(typeof(LightSignal))]
    [XmlIncludeAttribute(typeof(CompoundLogicalObject))]
    [XmlIncludeAttribute(typeof(TcFeederReceiverElement))]
    [XmlIncludeAttribute(typeof(TdsSection))]
    [XmlIncludeAttribute(typeof(AxleCountingSystem))]
    [XmlIncludeAttribute(typeof(TrackCircuit))]
    [XmlIncludeAttribute(typeof(LowFrequencyTrackCircuit))]
    [XmlIncludeAttribute(typeof(AudioFrequencyTrackCircuit))]
    [XmlIncludeAttribute(typeof(FtgsTrackCircuit))]
    [XmlIncludeAttribute(typeof(DcVoltageTrackCircuit))]
    [XmlIncludeAttribute(typeof(HviTrackCircuit))]
    [XmlIncludeAttribute(typeof(Controller))]
    [XmlIncludeAttribute(typeof(VirtualController))]
    [XmlIncludeAttribute(typeof(FieldObjectController))]
    [XmlIncludeAttribute(typeof(TdsEvaluator))]
    [XmlIncludeAttribute(typeof(SignalController))]
    [XmlIncludeAttribute(typeof(IoController))]
    [XmlIncludeAttribute(typeof(LeuSystem))]
    [XmlIncludeAttribute(typeof(RBC))]
    [XmlIncludeAttribute(typeof(Interlocking))]
    [XmlIncludeAttribute(typeof(DecentralInterlocking))]
    [XmlIncludeAttribute(typeof(CentralInterlocking))]
    [XmlIncludeAttribute(typeof(TrafficControlSystem))]
    [XmlIncludeAttribute(typeof(ReleaseInstrument))]
    [XmlIncludeAttribute(typeof(KeyReleaseInstrument))]
    [XmlIncludeAttribute(typeof(ShutInSidingKeyReleaseInstrument))]
    [XmlIncludeAttribute(typeof(TcConnector))]
    [XmlIncludeAttribute(typeof(Bond))]
    [XmlIncludeAttribute(typeof(ImpedanceBond))]
    [XmlIncludeAttribute(typeof(TcFeedingReceivingCable))]
    [XmlIncludeAttribute(typeof(TrackProperty))]
    [XmlIncludeAttribute(typeof(TrackTypeSection))]
    [XmlIncludeAttribute(typeof(ShuntingSection))]
    [XmlIncludeAttribute(typeof(MainSection))]
    [XmlIncludeAttribute(typeof(OpenLineSection))]
    [XmlIncludeAttribute(typeof(SecondarySection))]
    [XmlIncludeAttribute(typeof(SidingSection))]
    [XmlIncludeAttribute(typeof(TrackDesignation))]
    [XmlIncludeAttribute(typeof(Trackway))]
    [XmlIncludeAttribute(typeof(SleeperTrack))]
    [XmlIncludeAttribute(typeof(SlabTrack))]
    [XmlIncludeAttribute(typeof(RestrictedArea))]
    [XmlIncludeAttribute(typeof(RemovedTrack))]
    [XmlIncludeAttribute(typeof(BlockedTrack))]
    [XmlIncludeAttribute(typeof(ConstructionArea))]
    [XmlIncludeAttribute(typeof(SpecialGauge))]
    [XmlIncludeAttribute(typeof(SpecialStructureGauge))]
    [XmlIncludeAttribute(typeof(SpecialTrackGauge))]
    [XmlIncludeAttribute(typeof(ElectrificationSegment))]
    [XmlIncludeAttribute(typeof(ElectrificationSection))]
    [XmlIncludeAttribute(typeof(OverheadLineSection))]
    [XmlIncludeAttribute(typeof(ConductorRailSection))]
    [XmlIncludeAttribute(typeof(ElectrificationGap))]
    [XmlIncludeAttribute(typeof(OverheadLineGap))]
    [XmlIncludeAttribute(typeof(ConductorRailGap))]
    [XmlIncludeAttribute(typeof(ElectrificationOverlap))]
    [XmlIncludeAttribute(typeof(Lock))]
    [XmlIncludeAttribute(typeof(PointLock))]
    [XmlIncludeAttribute(typeof(SignalSightingDistance))]
    [XmlIncludeAttribute(typeof(RbcWatchdog))]
    [XmlIncludeAttribute(typeof(TpArea))]
    [XmlIncludeAttribute(typeof(AreaWithoutTps))]
    [XmlIncludeAttribute(typeof(EtcsArea))]
    [XmlIncludeAttribute(typeof(TiltingArea))]
    [XmlIncludeAttribute(typeof(LevelCrossingActivation))]
    [XmlIncludeAttribute(typeof(LocalOperationDevice))]
    [XmlIncludeAttribute(typeof(ControlFrame))]
    [XmlIncludeAttribute(typeof(GroundFrame))]
    [XmlIncludeAttribute(typeof(Cable))]
    [XmlIncludeAttribute(typeof(LocationProxy))]
    [XmlIncludeAttribute(typeof(LocationOfInterest))]
    [XmlIncludeAttribute(typeof(LocationReference))]
    [XmlIncludeAttribute(typeof(SignalPostTelephone))]
    [XmlIncludeAttribute(typeof(LocalOperationUiElement))]
    [XmlIncludeAttribute(typeof(LocalOperationUiSwitch))]
    [XmlIncludeAttribute(typeof(LocalOperationUiButton))]
    [XmlIncludeAttribute(typeof(LocalOperationUiLever))]
    [XmlIncludeAttribute(typeof(LocalOperationUiIndicator))]
    [XmlIncludeAttribute(typeof(TrainRearConfirmation))]
    [XmlIncludeAttribute(typeof(BlockElement))]
    [XmlIncludeAttribute(typeof(LevelCrossingDeactivation))]
    [XmlIncludeAttribute(typeof(TpsRelation))]
    [XmlIncludeAttribute(typeof(Aspect))]
    [XmlIncludeAttribute(typeof(ActiveAspect))]
    [XmlIncludeAttribute(typeof(StartUpProcedureConfiguration))]
    [XmlIncludeAttribute(typeof(MaintenanceDataManagement))]
    [XmlIncludeAttribute(typeof(VirtualisedMDM))]
    [XmlIncludeAttribute(typeof(PhysicalMDM))]
    [XmlIncludeAttribute(typeof(EtcsMaSection))]
    [XmlIncludeAttribute(typeof(DispatchAnnouncerAssignment))]
    [XmlIncludeAttribute(typeof(PlatformAccess))]
    [XmlIncludeAttribute(typeof(AssetGroup))]
    [XmlIncludeAttribute(typeof(FlankProtection))]
    [XmlIncludeAttribute(typeof(StandOutControl))]
    [XmlIncludeAttribute(typeof(TpsDeviceProperties))]
    [XmlIncludeAttribute(typeof(LineBlockInformation))]
    [XmlIncludeAttribute(typeof(DirectionAuthorityDependentOverlap))]
    [XmlIncludeAttribute(typeof(LeuModule))]
    [XmlIncludeAttribute(typeof(EtcsTelegramConditionRelation))]
    [XmlIncludeAttribute(typeof(LocalOperatingAreaUiElement))]
    [XmlIncludeAttribute(typeof(SignalLocation))]
    [XmlIncludeAttribute(typeof(CableJointInstallation))]
    [XmlIncludeAttribute(typeof(CableDistributorDisconnector))]
    [XmlIncludeAttribute(typeof(CableTerminationRack))]
    [XmlIncludeAttribute(typeof(CableJointRack))]
    [XmlIncludeAttribute(typeof(SignalFrameComponent))]
    [XmlIncludeAttribute(typeof(SignalAspectDegradation))]
    [XmlIncludeAttribute(typeof(DispatchPosition))]
    [XmlIncludeAttribute(typeof(SignalMessageRelation))]
    [XmlIncludeAttribute(typeof(EquipmentSupport))]
    [XmlIncludeAttribute(typeof(Housing))]
    [XmlIncludeAttribute(typeof(Panel))]
    [XmlIncludeAttribute(typeof(Cabinet))]
    [XmlIncludeAttribute(typeof(LeuCabinet))]
    [XmlIncludeAttribute(typeof(CabinetGroup))]
    [XmlIncludeAttribute(typeof(EquipmentRoom))]
    [XmlIncludeAttribute(typeof(ControlRoom))]
    [XmlIncludeAttribute(typeof(Container))]
    [XmlIncludeAttribute(typeof(Building))]
    [XmlIncludeAttribute(typeof(EquipmentHouse))]
    [XmlIncludeAttribute(typeof(Fixing))]
    [XmlIncludeAttribute(typeof(SectionList))]
    [XmlIncludeAttribute(typeof(ControlledTrackAsset))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("configuredBaseObject", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public abstract partial class ConfiguredBaseObject : BaseObject1
    {
        #region Private fields
        private Configuration _hasConfiguration;
        #endregion
        
        [XmlElement(Order=0)]
        public Configuration hasConfiguration
        {
            get
            {
                if ((_hasConfiguration == null))
                {
                    _hasConfiguration = new Configuration();
                }
                return _hasConfiguration;
            }
            set
            {
                _hasConfiguration = value;
            }
        }
    }
    
    /// <summary>
    /// Temporary shunting area.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("tempShuntingArea", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class TempShuntingArea : ConfiguredBaseObject
    {
    }
    
    /// <summary>
    /// System for transmitting train protection data. Also known as <i>Information Point.</i>
    /// </summary>
    [XmlIncludeAttribute(typeof(BaliseGroup))]
    [XmlIncludeAttribute(typeof(EtcsBaliseGroup))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("tpsDataTransmissionSystem", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class TpsDataTransmissionSystem : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref _hasControllerHousedIn;
        private tElementWithIDref _isLocatedAt;
        #endregion
        
        /// <summary>
        /// A speed checking system controller can have a line side housing. Not suited for LEU housing.
        /// </summary>
        [XmlElement(Order=0)]
        public tElementWithIDref hasControllerHousedIn
        {
            get
            {
                if ((_hasControllerHousedIn == null))
                {
                    _hasControllerHousedIn = new tElementWithIDref();
                }
                return _hasControllerHousedIn;
            }
            set
            {
                _hasControllerHousedIn = value;
            }
        }
        
        /// <summary>
        /// The location of the system.
        /// </summary>
        [XmlElement(Order=1)]
        public tElementWithIDref isLocatedAt
        {
            get
            {
                if ((_isLocatedAt == null))
                {
                    _isLocatedAt = new tElementWithIDref();
                }
                return _isLocatedAt;
            }
            set
            {
                _isLocatedAt = value;
            }
        }
    }
    
    /// <summary>
    /// A group of train protection balises.
    /// </summary>
    [XmlIncludeAttribute(typeof(EtcsBaliseGroup))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("baliseGroup", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class BaliseGroup : TpsDataTransmissionSystem
    {
        #region Private fields
        private BaliseGroupPurpose _hasPurpose;
        #endregion
        
        /// <summary>
        /// The track asset that needs the balise group.
        /// </summary>
        [XmlElement(Order=0)]
        public BaliseGroupPurpose hasPurpose
        {
            get
            {
                if ((_hasPurpose == null))
                {
                    _hasPurpose = new BaliseGroupPurpose();
                }
                return _hasPurpose;
            }
            set
            {
                _hasPurpose = value;
            }
        }
    }
    
    /// <summary>
    /// Describes why the balise is there.
    /// The balise group protects or announces the level crossing, big metal mass or signal that the train approaches.
    /// de-DE: Bezugspunkt
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("baliseGroupPurpose", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class BaliseGroupPurpose
    {
        #region Private fields
        private Length _hasDistance;
        private tElementWithIDref _refersToBigMetalMassArea;
        private tElementWithIDref _refersToLx;
        private tElementWithIDref _refersToSignal;
        private bool _direct;
        #endregion
        
        /// <summary>
        /// The distance to the track asset that needs the balise group.
        /// </summary>
        [XmlElement(Order=0)]
        public Length hasDistance
        {
            get
            {
                if ((_hasDistance == null))
                {
                    _hasDistance = new Length();
                }
                return _hasDistance;
            }
            set
            {
                _hasDistance = value;
            }
        }
        
        /// <summary>
        /// reference to Big Metal Mass
        /// </summary>
        [XmlElement(Order=1)]
        public tElementWithIDref refersToBigMetalMassArea
        {
            get
            {
                if ((_refersToBigMetalMassArea == null))
                {
                    _refersToBigMetalMassArea = new tElementWithIDref();
                }
                return _refersToBigMetalMassArea;
            }
            set
            {
                _refersToBigMetalMassArea = value;
            }
        }
        
        [XmlElement(Order=2)]
        public tElementWithIDref refersToLx
        {
            get
            {
                if ((_refersToLx == null))
                {
                    _refersToLx = new tElementWithIDref();
                }
                return _refersToLx;
            }
            set
            {
                _refersToLx = value;
            }
        }
        
        [XmlElement(Order=3)]
        public tElementWithIDref refersToSignal
        {
            get
            {
                if ((_refersToSignal == null))
                {
                    _refersToSignal = new tElementWithIDref();
                }
                return _refersToSignal;
            }
            set
            {
                _refersToSignal = value;
            }
        }
        
        /// <summary>
        /// true: balise is placed directly at the signal/LX.
        /// 
        /// false: the balise informs about the signal/LX at some distance, typically infill.
        /// </summary>
        [XmlAttribute]
        public bool direct
        {
            get
            {
                return _direct;
            }
            set
            {
                _direct = value;
            }
        }
    }
    
    /// <summary>
    /// Group of one or more ETCS balises that share a balise group identifier.
    /// nl-NL: ProRail slaat de waarde van M_VERSION op in de balisegroep.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("etcsBaliseGroup", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class EtcsBaliseGroup : BaliseGroup
    {
        #region Private fields
        private tElementWithIDref[] _isControlledBy;
        private tElementWithIDref[] _isKnownByRbc;
        private int _m_version;
        private int _nid_bg;
        private int _nid_c;
        private int _q_link;
        private int _q_media;
        private int _q_updown;
        #endregion
        
        /// <summary>
        /// If the balise group contains one or more controlled balises, it has a relation with a controller. The controller can be an LEU, Interlocking or even RBC.
        /// </summary>
        [XmlElement("isControlledBy", Order=0)]
        public tElementWithIDref[] isControlledBy
        {
            get
            {
                return _isControlledBy;
            }
            set
            {
                _isControlledBy = value;
            }
        }
        
        /// <summary>
        /// Balises in transition zones may be known to two RBCs (DB approach).
        /// Alternatively, balises can link to individual routes (ProRail approach).
        /// The RBC needs to know the balises that can be used as LRBG.
        /// This information could be filled in by the IM or the supplier.
        /// </summary>
        [XmlElement("isKnownByRbc", Order=1)]
        public tElementWithIDref[] isKnownByRbc
        {
            get
            {
                return _isKnownByRbc;
            }
            set
            {
                _isKnownByRbc = value;
            }
        }
        
        [XmlAttribute]
        public int m_version
        {
            get
            {
                return _m_version;
            }
            set
            {
                _m_version = value;
            }
        }
        
        [XmlAttribute]
        public int nid_bg
        {
            get
            {
                return _nid_bg;
            }
            set
            {
                _nid_bg = value;
            }
        }
        
        [XmlAttribute]
        public int nid_c
        {
            get
            {
                return _nid_c;
            }
            set
            {
                _nid_c = value;
            }
        }
        
        [XmlAttribute]
        public int q_link
        {
            get
            {
                return _q_link;
            }
            set
            {
                _q_link = value;
            }
        }
        
        /// <summary>
        /// Defines the type of media: Balise (0)
        /// </summary>
        [XmlAttribute]
        public int q_media
        {
            get
            {
                return _q_media;
            }
            set
            {
                _q_media = value;
            }
        }
        
        /// <summary>
        /// Balise telegram transmission direction is always 1 (up: track to train).
        /// </summary>
        [XmlAttribute]
        public int q_updown
        {
            get
            {
                return _q_updown;
            }
            set
            {
                _q_updown = value;
            }
        }
    }
    
    /// <summary>
    /// Hint to the signalman showing <i>via </i>which location (track, section or signal) the train will travel.
    /// The location proxy is placed on the topology on the track, section or signal of the route body.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("viaLocation", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class ViaLocation : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref _appliesToRouteBody;
        private tElementWithIDref _leadsViaLocation;
        #endregion
        
        /// <summary>
        /// this helps the signalman to visualise via which point or track the train will travel.
        /// </summary>
        [XmlElement(Order=0)]
        public tElementWithIDref appliesToRouteBody
        {
            get
            {
                if ((_appliesToRouteBody == null))
                {
                    _appliesToRouteBody = new tElementWithIDref();
                }
                return _appliesToRouteBody;
            }
            set
            {
                _appliesToRouteBody = value;
            }
        }
        
        /// <summary>
        /// Refers to the Location the RouteBody leads over.
        /// </summary>
        [XmlElement(Order=1)]
        public tElementWithIDref leadsViaLocation
        {
            get
            {
                if ((_leadsViaLocation == null))
                {
                    _leadsViaLocation = new tElementWithIDref();
                }
                return _leadsViaLocation;
            }
            set
            {
                _leadsViaLocation = value;
            }
        }
    }
    
    /// <summary>
    /// Signal placed in tunnels, typically used to indicate special fixing requirements and/or light intensity.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("tunnelSignal", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class TunnelSignal : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref _appliesToLightSignal;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref appliesToLightSignal
        {
            get
            {
                if ((_appliesToLightSignal == null))
                {
                    _appliesToLightSignal = new tElementWithIDref();
                }
                return _appliesToLightSignal;
            }
            set
            {
                _appliesToLightSignal = value;
            }
        }
    }
    
    /// <summary>
    /// Property set that applies to the TPS data transmission system.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("tpsDataTransmissionSystemProperties", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class TpsDataTransmissionSystemProperties : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref _appliesToTpsDataTxSystem;
        private ExtensionDirectionTypes _hasExtensionDirection;
        private Length _hasExtensionLength;
        private TpsPowerSupplyTypes _hasPowerSupplyType;
        private SpeedCheckingSystemProperties _hasSpeedCheckingProperties;
        private SuppressedDirectionTypes _hasSuppressionDirection;
        private tElementWithIDref[] _isSuppressedWhenPointElementInPosition;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref appliesToTpsDataTxSystem
        {
            get
            {
                if ((_appliesToTpsDataTxSystem == null))
                {
                    _appliesToTpsDataTxSystem = new tElementWithIDref();
                }
                return _appliesToTpsDataTxSystem;
            }
            set
            {
                _appliesToTpsDataTxSystem = value;
            }
        }
        
        /// <summary>
        /// The direction in which the system extends, i.e. nominal or opposite direction with respect to topology.
        /// If a length is given, it must be associated with a direction.
        /// de-DE: Ausdehnungsrichtung
        /// </summary>
        [XmlElement(Order=1)]
        public ExtensionDirectionTypes hasExtensionDirection
        {
            get
            {
                return _hasExtensionDirection;
            }
            set
            {
                _hasExtensionDirection = value;
            }
        }
        
        /// <summary>
        /// The (positive) length over which a TP System <i>extends</i>. For instance: length of a balise group from first to last in group.
        /// </summary>
        [XmlElement(Order=2)]
        public Length hasExtensionLength
        {
            get
            {
                if ((_hasExtensionLength == null))
                {
                    _hasExtensionLength = new Length();
                }
                return _hasExtensionLength;
            }
            set
            {
                _hasExtensionLength = value;
            }
        }
        
        [XmlElement(Order=3)]
        public TpsPowerSupplyTypes hasPowerSupplyType
        {
            get
            {
                return _hasPowerSupplyType;
            }
            set
            {
                _hasPowerSupplyType = value;
            }
        }
        
        [XmlElement(Order=4)]
        public SpeedCheckingSystemProperties hasSpeedCheckingProperties
        {
            get
            {
                if ((_hasSpeedCheckingProperties == null))
                {
                    _hasSpeedCheckingProperties = new SpeedCheckingSystemProperties();
                }
                return _hasSpeedCheckingProperties;
            }
            set
            {
                _hasSpeedCheckingProperties = value;
            }
        }
        
        /// <summary>
        /// Direction of suppression is only needed when the TPS applies in both directions.
        /// </summary>
        [XmlElement(Order=5)]
        public SuppressedDirectionTypes hasSuppressionDirection
        {
            get
            {
                return _hasSuppressionDirection;
            }
            set
            {
                _hasSuppressionDirection = value;
            }
        }
        
        /// <summary>
        /// An overspeed sensor can be suppressed when the point is in the given position.
        /// </summary>
        [XmlElement("isSuppressedWhenPointElementInPosition", Order=6)]
        public tElementWithIDref[] isSuppressedWhenPointElementInPosition
        {
            get
            {
                return _isSuppressedWhenPointElementInPosition;
            }
            set
            {
                _isSuppressedWhenPointElementInPosition = value;
            }
        }
    }
    
    /// <summary>
    /// The direction in which the system extends, given with respect to the linear element.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum ExtensionDirectionTypes
    {
        /// <summary>
        /// Same direction as linear element.
        /// </summary>
        nominal,
        /// <summary>
        /// Opposite direction to linear element.
        /// </summary>
        opposite,
        /// <summary>
        /// Spot without length (e.g. single balise).
        /// </summary>
        none,
        /// <summary>
        /// The extension direction is (yet) unknown.
        /// </summary>
        unknown,
    }
    
    /// <summary>
    /// Power supply types used for TPS devices.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum TpsPowerSupplyTypes
    {
        /// <summary>
        /// IL supplies power.
        /// </summary>
        interlocking,
        /// <summary>
        /// battery only.
        /// </summary>
        battery,
        /// <summary>
        /// solar (always have batteries included).
        /// </summary>
        solar,
        other,
    }
    
    /// <summary>
    /// For speed checking configurations with a speed checking section (also known as Overspeed sensor, OSS)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("speedCheckingSystemProperties", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class SpeedCheckingSystemProperties
    {
        #region Private fields
        private Length _hasSpeedCheckingSectionLength;
        private SpeedProperties[] _hasSpeedProperties;
        #endregion
        
        /// <summary>
        /// Distance between two speed checking devices, also known as trip distance.
        /// de-DE: Messstrecke
        /// en-UK: speed checking length maps to OSS spacing
        /// </summary>
        [XmlElement(Order=0)]
        public Length hasSpeedCheckingSectionLength
        {
            get
            {
                if ((_hasSpeedCheckingSectionLength == null))
                {
                    _hasSpeedCheckingSectionLength = new Length();
                }
                return _hasSpeedCheckingSectionLength;
            }
            set
            {
                _hasSpeedCheckingSectionLength = value;
            }
        }
        
        [XmlElement("hasSpeedProperties", Order=1)]
        public SpeedProperties[] hasSpeedProperties
        {
            get
            {
                return _hasSpeedProperties;
            }
            set
            {
                _hasSpeedProperties = value;
            }
        }
    }
    
    /// <summary>
    /// Properties of a speed checking system are design speed and, optionally, train category.
    /// The results from the design process are stored for validation purposes.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("speedProperties", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class SpeedProperties
    {
        #region Private fields
        private tElementWithIDref _appliesToTrainCategoryForAttainableSpeed;
        private tElementWithIDref _appliesToTrainCategoryForDesignSpeed;
        private Speed _hasAttainableSpeed;
        private Speed _hasDesignSpeed;
        #endregion
        
        /// <summary>
        /// Train category the attainable speed is applied to.
        /// en-GB: the category given here might be different from the category given for design speed.
        /// </summary>
        [XmlElement(Order=0)]
        public tElementWithIDref appliesToTrainCategoryForAttainableSpeed
        {
            get
            {
                if ((_appliesToTrainCategoryForAttainableSpeed == null))
                {
                    _appliesToTrainCategoryForAttainableSpeed = new tElementWithIDref();
                }
                return _appliesToTrainCategoryForAttainableSpeed;
            }
            set
            {
                _appliesToTrainCategoryForAttainableSpeed = value;
            }
        }
        
        /// <summary>
        /// Train category that the design speed is applied to.
        /// </summary>
        [XmlElement(Order=1)]
        public tElementWithIDref appliesToTrainCategoryForDesignSpeed
        {
            get
            {
                if ((_appliesToTrainCategoryForDesignSpeed == null))
                {
                    _appliesToTrainCategoryForDesignSpeed = new tElementWithIDref();
                }
                return _appliesToTrainCategoryForDesignSpeed;
            }
            set
            {
                _appliesToTrainCategoryForDesignSpeed = value;
            }
        }
        
        /// <summary>
        /// The assumed approach speed for a train approaching the TPS.
        /// </summary>
        [XmlElement(Order=2)]
        public Speed hasAttainableSpeed
        {
            get
            {
                if ((_hasAttainableSpeed == null))
                {
                    _hasAttainableSpeed = new Speed();
                }
                return _hasAttainableSpeed;
            }
            set
            {
                _hasAttainableSpeed = value;
            }
        }
        
        /// <summary>
        /// The speed that the TPS checks.
        /// </summary>
        [XmlElement(Order=3)]
        public Speed hasDesignSpeed
        {
            get
            {
                if ((_hasDesignSpeed == null))
                {
                    _hasDesignSpeed = new Speed();
                }
                return _hasDesignSpeed;
            }
            set
            {
                _hasDesignSpeed = value;
            }
        }
    }
    
    /// <summary>
    /// Direction in which a TPS device is suppressed.
    /// Given with respect to the topological application direction that is associated with the spot location of the system.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum SuppressedDirectionTypes
    {
        /// <summary>
        /// Suppression takes place in the same direction as the application direction of the device spot location.
        /// </summary>
        sameDirection,
        /// <summary>
        /// Suppression takes place in the opposite direction as the application direction of the device spot location.
        /// </summary>
        oppositeDirection,
        /// <summary>
        /// A special suppression is selected for normal direction (NR).
        /// </summary>
        special,
    }
    
    /// <summary>
    /// Spot where the infrastructure managers assets end. The working direction points towards the IM territory. Beyond is uncharted territories. Hic Leones Sunt.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("infrastructureBorder", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class InfrastructureBorder : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref[] _isLocatedAt;
        #endregion
        
        [XmlElement("isLocatedAt", Order=0)]
        public tElementWithIDref[] isLocatedAt
        {
            get
            {
                return _isLocatedAt;
            }
            set
            {
                _isLocatedAt = value;
            }
        }
    }
    
    /// <summary>
    /// The route is locked when the approach section(s) turns from vacant to occupied.
    /// If the DelayedLock timer is not given (or zero), the lock applies immediately.
    /// 
    /// The route approach lock can apply to:
    /// <ul>
    /// <li>an entry signal: the proceed aspect of the entry signal is locked.</li>
    /// <li>a (set of) route(s): in this case the triggering mechanism depends on the kind of route, e.g. entry speed.</li>
    /// <li>a route body, in case the aspect of the entry signal or the properties of the route are irrelevant.</li>
    /// </ul>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("routeApproachLocking", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class RouteApproachLocking : ConfiguredBaseObject
    {
        #region Private fields
        private Duration _hasDelayedLock;
        private Duration _hasTimedRelease;
        private tElementWithIDref _locksEntrySignal;
        private tElementWithIDref[] _locksRoute;
        private tElementWithIDref _locksRouteBody;
        private tElementWithIDref[] _usesTriggerAssignment;
        #endregion
        
        /// <summary>
        /// Delay between the moment the approach section turns from vacant to occupied and the moment the interlocking locks the route.
        /// </summary>
        [XmlElement(Order=0)]
        public Duration hasDelayedLock
        {
            get
            {
                if ((_hasDelayedLock == null))
                {
                    _hasDelayedLock = new Duration();
                }
                return _hasDelayedLock;
            }
            set
            {
                _hasDelayedLock = value;
            }
        }
        
        /// <summary>
        /// Delay between the route cancellation request and the release of the route.
        /// The delay ensures that the route remains locked until it is certain that the approaching train has stopped or can stop short of the entry signal.
        /// This class does not specify whether release is automatic or manual. This is derived amongst others from the type of signal to which the locking applies.
        /// </summary>
        [XmlElement(Order=1)]
        public Duration hasTimedRelease
        {
            get
            {
                if ((_hasTimedRelease == null))
                {
                    _hasTimedRelease = new Duration();
                }
                return _hasTimedRelease;
            }
            set
            {
                _hasTimedRelease = value;
            }
        }
        
        /// <summary>
        /// Locks the proceed aspect of an entry signal.
        /// </summary>
        [XmlElement(Order=2)]
        public tElementWithIDref locksEntrySignal
        {
            get
            {
                if ((_locksEntrySignal == null))
                {
                    _locksEntrySignal = new tElementWithIDref();
                }
                return _locksEntrySignal;
            }
            set
            {
                _locksEntrySignal = value;
            }
        }
        
        [XmlElement("locksRoute", Order=3)]
        public tElementWithIDref[] locksRoute
        {
            get
            {
                return _locksRoute;
            }
            set
            {
                _locksRoute = value;
            }
        }
        
        [XmlElement(Order=4)]
        public tElementWithIDref locksRouteBody
        {
            get
            {
                if ((_locksRouteBody == null))
                {
                    _locksRouteBody = new tElementWithIDref();
                }
                return _locksRouteBody;
            }
            set
            {
                _locksRouteBody = value;
            }
        }
        
        /// <summary>
        /// Link to a trigger assignment that informs about route locking.
        /// </summary>
        [XmlElement("usesTriggerAssignment", Order=5)]
        public tElementWithIDref[] usesTriggerAssignment
        {
            get
            {
                return _usesTriggerAssignment;
            }
            set
            {
                _usesTriggerAssignment = value;
            }
        }
    }
    
    /// <summary>
    /// Pointer to (a set of) reference drawings (aka control drawings) for civil and mechanical engineering purposes. May range from a reference to paper documents to 3D CAD-files.
    /// National end-users can tailor this class to their needs.
    /// Not to be used for drawings of <i>specific </i>objects: instantiate an Attachment class instead.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("referenceDrawing", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class ReferenceDrawing : ConfiguredBaseObject
    {
        #region Private fields
        private ReferenceDrawingParameter[] _parameterizedBy;
        private string _name;
        private string _subtitle;
        private string _title;
        private string _variant;
        #endregion
        
        [XmlElement("parameterizedBy", Order=0)]
        public ReferenceDrawingParameter[] parameterizedBy
        {
            get
            {
                return _parameterizedBy;
            }
            set
            {
                _parameterizedBy = value;
            }
        }
        
        /// <summary>
        /// Name of the reference drawing as mentioned on the drawing itself.
        /// (German: Regelzeichnungsnummer)
        /// </summary>
        [XmlAttribute]
        public string name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
        
        /// <summary>
        /// Subtitle of the reference drawing
        /// </summary>
        [XmlAttribute]
        public string subtitle
        {
            get
            {
                return _subtitle;
            }
            set
            {
                _subtitle = value;
            }
        }
        
        /// <summary>
        /// Title of the reference drawing
        /// </summary>
        [XmlAttribute]
        public string title
        {
            get
            {
                return _title;
            }
            set
            {
                _title = value;
            }
        }
        
        /// <summary>
        /// This allows to identify a specific variant out of different shapings within the reference drawing.
        /// </summary>
        [XmlAttribute]
        public string variant
        {
            get
            {
                return _variant;
            }
            set
            {
                _variant = value;
            }
        }
    }
    
    /// <summary>
    /// Placeholder for nationally specific timers.
    /// E.g. minimum road open time: time during which a level crossing is guaranteed to be available to road traffic.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("levelCrossingTimerSet", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public abstract partial class LevelCrossingTimerSet : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref _appliesToILintegratedLX;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref appliesToILintegratedLX
        {
            get
            {
                if ((_appliesToILintegratedLX == null))
                {
                    _appliesToILintegratedLX = new tElementWithIDref();
                }
                return _appliesToILintegratedLX;
            }
            set
            {
                _appliesToILintegratedLX = value;
            }
        }
    }
    
    /// <summary>
    /// The ETCS system version.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("etcsSystemVersion", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class EtcsSystemVersion : ConfiguredBaseObject
    {
        #region Private fields
        private EtcsBaselines _hasEtcsBaseline;
        private EtcsBaselineVersions _hasEtcsBaselineVersion;
        private EtcsSystemVersions _hasEtcsSystemVersion;
        #endregion
        
        [XmlElement(Order=0)]
        public EtcsBaselines hasEtcsBaseline
        {
            get
            {
                return _hasEtcsBaseline;
            }
            set
            {
                _hasEtcsBaseline = value;
            }
        }
        
        [XmlElement(Order=1)]
        public EtcsBaselineVersions hasEtcsBaselineVersion
        {
            get
            {
                return _hasEtcsBaselineVersion;
            }
            set
            {
                _hasEtcsBaselineVersion = value;
            }
        }
        
        [XmlElement(Order=2)]
        public EtcsSystemVersions hasEtcsSystemVersion
        {
            get
            {
                return _hasEtcsSystemVersion;
            }
            set
            {
                _hasEtcsSystemVersion = value;
            }
        }
    }
    
    /// <summary>
    /// The ETCS baselines
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum EtcsBaselines
    {
        /// <summary>
        /// Baseline 2, also known as SRS 2.3.0d
        /// </summary>
        B2,
        /// <summary>
        /// Baseline 3, which includes Limited Supervision
        /// </summary>
        B3,
        B4,
    }
    
    /// <summary>
    /// The ETCS baseline versions.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum EtcsBaselineVersions
    {
        MR1,
        MR2,
        MR3,
        R1,
        R2,
        R3,
    }
    
    /// <summary>
    /// The ETCS system version
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum EtcsSystemVersions
    {
        [XmlEnumAttribute("1.0")]
        [EnumMember(Value="1.0")]
        Item10,
        [XmlEnumAttribute("1.1")]
        [EnumMember(Value="1.1")]
        Item11,
        [XmlEnumAttribute("1.2")]
        [EnumMember(Value="1.2")]
        Item12,
        [XmlEnumAttribute("2.0")]
        [EnumMember(Value="2.0")]
        Item20,
        [XmlEnumAttribute("2.1")]
        [EnumMember(Value="2.1")]
        Item21,
    }
    
    /// <summary>
    /// The movable element returns to the preferred position when it is no longer claimed by a route, typically because the passing train has cleared the movable element.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("normalisation", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class Normalisation : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref _appliesToMovableElement;
        private NormalisationTypes _isOfNormalisationType;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref appliesToMovableElement
        {
            get
            {
                if ((_appliesToMovableElement == null))
                {
                    _appliesToMovableElement = new tElementWithIDref();
                }
                return _appliesToMovableElement;
            }
            set
            {
                _appliesToMovableElement = value;
            }
        }
        
        [XmlElement(Order=1)]
        public NormalisationTypes isOfNormalisationType
        {
            get
            {
                return _isOfNormalisationType;
            }
            set
            {
                _isOfNormalisationType = value;
            }
        }
    }
    
    /// <summary>
    /// Types of normalisation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum NormalisationTypes
    {
        /// <summary>
        /// The interlocking throws the point to the normal position automatically.
        /// </summary>
        automatic,
        /// <summary>
        /// The signalman receives a notification that the point has been cleared. After manual acknowledgment the interlocking throws the point to the normal position.
        /// </summary>
        manual,
        /// <summary>
        /// A spring or hydro-pneumatic mechanism restores the point to normal position after trailing.
        /// <ul>
        /// <li>en-GB: spring point</li>
        /// <li>de-DE: R&#252;ckfallweiche </li>
        /// </ul>
        /// </summary>
        spring,
    }
    
    /// <summary>
    /// A route condition states the conditions that must be fulfilled for a given signal <i>or </i>route to open.
    /// If the track asset or compound logical object<font color="#ff0000"> </font><i>is in the given state then </i>the signal in this route relation is set to proceed or to the given aspect. The routeRelation is the <i>observer </i>of the aspect and its state.
    /// </summary>
    [XmlIncludeAttribute(typeof(ConditionAffectingRoute))]
    [XmlIncludeAttribute(typeof(ConditionAffectingKRI))]
    [XmlIncludeAttribute(typeof(ConditionAffectingSignal))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("routeCondition", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public abstract partial class RouteCondition : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref[] _readsLogicalValueFromCompondLogicalObject;
        private tElementWithIDref[] _readsLogicalValueFromReleaseInstrument;
        private tElementWithIDref[] _readsLogicalValueFromUiElement;
        #endregion
        
        /// <summary>
        /// The logical input is read from an external sensor, e.g. bascule bridge, flooding, smoke or earthquake detector.
        /// </summary>
        [XmlElement("readsLogicalValueFromCompondLogicalObject", Order=0)]
        public tElementWithIDref[] readsLogicalValueFromCompondLogicalObject
        {
            get
            {
                return _readsLogicalValueFromCompondLogicalObject;
            }
            set
            {
                _readsLogicalValueFromCompondLogicalObject = value;
            }
        }
        
        /// <summary>
        /// Key release instrument associated with the route. Condition is that the key is in the instrument.
        /// de-DE: Schl&#252;sselsperre, die &#252;berwacht sein muss, damit die Fstr gesichert ist
        /// </summary>
        [XmlElement("readsLogicalValueFromReleaseInstrument", Order=1)]
        public tElementWithIDref[] readsLogicalValueFromReleaseInstrument
        {
            get
            {
                return _readsLogicalValueFromReleaseInstrument;
            }
            set
            {
                _readsLogicalValueFromReleaseInstrument = value;
            }
        }
        
        /// <summary>
        /// Button or switch that must be activated to set the route.
        /// de-DE: Bedien-Anzeige Element, das wirksam sein muss, damit die Fstr gesichert ist.
        /// </summary>
        [XmlElement("readsLogicalValueFromUiElement", Order=2)]
        public tElementWithIDref[] readsLogicalValueFromUiElement
        {
            get
            {
                return _readsLogicalValueFromUiElement;
            }
            set
            {
                _readsLogicalValueFromUiElement = value;
            }
        }
    }
    
    /// <summary>
    /// Condition required for the route to open, read from a compound logical object or a release instrument.
    /// </summary>
    [XmlIncludeAttribute(typeof(ConditionAffectingKRI))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("conditionAffectingRoute", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class ConditionAffectingRoute : RouteCondition
    {
        #region Private fields
        private tElementWithIDref _affectsRoute;
        #endregion
        
        /// <summary>
        /// Route that is allowed if the conditions in the route relation evaluate to true.
        /// </summary>
        [XmlElement(Order=0)]
        public tElementWithIDref affectsRoute
        {
            get
            {
                if ((_affectsRoute == null))
                {
                    _affectsRoute = new tElementWithIDref();
                }
                return _affectsRoute;
            }
            set
            {
                _affectsRoute = value;
            }
        }
    }
    
    /// <summary>
    /// The condition for releasing the key release instrument, pertaining to the occupancy of the target track of a shunting route.
    /// de-DE: Kriterium f&#252;r die Aufl&#246;sung von &#252;berwachten Schl&#252;sselsperren im Zielgleis von Rangierstra&#223;en.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("conditionAffectingKRI", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class ConditionAffectingKRI : ConditionAffectingRoute
    {
        #region Private fields
        private TargetTrackConditionTypes _needsTargetTrackVacancyState;
        #endregion
        
        /// <summary>
        /// The required occupancy status of the target track.
        /// de-DE: Kriterium f&#252;r die Aufl&#246;sung von &#252;berwachten Schl&#252;sselsperren im Zielgleis von Rangierstra&#223;en.
        /// </summary>
        [XmlElement(Order=0)]
        public TargetTrackConditionTypes needsTargetTrackVacancyState
        {
            get
            {
                return _needsTargetTrackVacancyState;
            }
            set
            {
                _needsTargetTrackVacancyState = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum TargetTrackConditionTypes
    {
        /// <summary>
        /// Target track of the shunting route must be vacant.
        /// de-DE: Zielgleis Rangierstrasse muss frei sein.
        /// </summary>
        targetTrackVacant,
        /// <summary>
        /// Target track of the shunting route must be occupied.
        /// de-DE: Zielgleis Rangierstrasse muss besetzt sein.
        /// </summary>
        targetTrackOccupied,
        other,
    }
    
    /// <summary>
    /// Condition required for the signal to show a given aspect, read from a compound logical object or a release instrument.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("conditionAffectingSignal", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class ConditionAffectingSignal : RouteCondition
    {
        #region Private fields
        private tElementWithIDref _affectsSignal;
        #endregion
        
        /// <summary>
        /// Signal that may open to the given aspect if the conditions in the route relation evaluate to true.
        /// </summary>
        [XmlElement(Order=0)]
        public tElementWithIDref affectsSignal
        {
            get
            {
                if ((_affectsSignal == null))
                {
                    _affectsSignal = new tElementWithIDref();
                }
                return _affectsSignal;
            }
            set
            {
                _affectsSignal = value;
            }
        }
    }
    
    /// <summary>
    /// Association class informing about the control relation between two controllers or between a controller and a controlled track asset.
    /// End point A and B in combination with the navigability inform about the direction of the flow.
    /// </summary>
    [XmlIncludeAttribute(typeof(ControllerRelation))]
    [XmlIncludeAttribute(typeof(AssetControlRelation))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("controlRelation", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class ControlRelation : ConfiguredBaseObject
    {
        #region Private fields
        private Navigability _backupPowerFlowsFromTo;
        private Navigability _controlFlowsFromTo;
        private Navigability _powerFlowsFromTo;
        private Navigability _secondaryControlFlowsFromTo;
        private tElementWithIDref[] _usesCable;
        private bool _exchangeInformation;
        #endregion
        
        [XmlElement(Order=0)]
        public Navigability backupPowerFlowsFromTo
        {
            get
            {
                return _backupPowerFlowsFromTo;
            }
            set
            {
                _backupPowerFlowsFromTo = value;
            }
        }
        
        [XmlElement(Order=1)]
        public Navigability controlFlowsFromTo
        {
            get
            {
                return _controlFlowsFromTo;
            }
            set
            {
                _controlFlowsFromTo = value;
            }
        }
        
        [XmlElement(Order=2)]
        public Navigability powerFlowsFromTo
        {
            get
            {
                return _powerFlowsFromTo;
            }
            set
            {
                _powerFlowsFromTo = value;
            }
        }
        
        /// <summary>
        /// Secondary information flow can be information that is relayed to a neighbouring interlocking. This allows cascading controllers.
        /// </summary>
        [XmlElement(Order=3)]
        public Navigability secondaryControlFlowsFromTo
        {
            get
            {
                return _secondaryControlFlowsFromTo;
            }
            set
            {
                _secondaryControlFlowsFromTo = value;
            }
        }
        
        /// <summary>
        /// The same control relation can be realised by multiple redundant cables.
        /// </summary>
        [XmlElement("usesCable", Order=4)]
        public tElementWithIDref[] usesCable
        {
            get
            {
                return _usesCable;
            }
            set
            {
                _usesCable = value;
            }
        }
        
        /// <summary>
        /// Endpoints A and B exchange information. I.e. status information and life signs.
        /// </summary>
        [XmlAttribute]
        public bool exchangeInformation
        {
            get
            {
                return _exchangeInformation;
            }
            set
            {
                _exchangeInformation = value;
            }
        }
    }
    
    /// <summary>
    /// Association class informing about the control relation between two controllers.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("controllerRelation", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class ControllerRelation : ControlRelation
    {
        #region Private fields
        private tElementWithIDref _endPointA;
        private tElementWithIDref _endPointB;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref endPointA
        {
            get
            {
                if ((_endPointA == null))
                {
                    _endPointA = new tElementWithIDref();
                }
                return _endPointA;
            }
            set
            {
                _endPointA = value;
            }
        }
        
        [XmlElement(Order=1)]
        public tElementWithIDref endPointB
        {
            get
            {
                if ((_endPointB == null))
                {
                    _endPointB = new tElementWithIDref();
                }
                return _endPointB;
            }
            set
            {
                _endPointB = value;
            }
        }
    }
    
    /// <summary>
    /// Association class informing about the control relation between a controller A and a controlled track asset B.
    /// The direction of flow A&lt;-&gt;B is inherited from the control relation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("assetControlRelation", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class AssetControlRelation : ControlRelation
    {
        #region Private fields
        private tElementWithIDref _endPointAController;
        private tElementWithIDref _endPointBTrackAsset;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref endPointAController
        {
            get
            {
                if ((_endPointAController == null))
                {
                    _endPointAController = new tElementWithIDref();
                }
                return _endPointAController;
            }
            set
            {
                _endPointAController = value;
            }
        }
        
        /// <summary>
        /// Active track assets is powered by and/or exchange information with a controller.
        /// </summary>
        [XmlElement(Order=1)]
        public tElementWithIDref endPointBTrackAsset
        {
            get
            {
                if ((_endPointBTrackAsset == null))
                {
                    _endPointBTrackAsset = new tElementWithIDref();
                }
                return _endPointBTrackAsset;
            }
            set
            {
                _endPointBTrackAsset = value;
            }
        }
    }
    
    /// <summary>
    /// The DB ETCS Point/Crossing
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("etcsPointCrossing", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class EtcsPointCrossing : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref _isRepresentedByEtcsNode;
        private tElementWithIDref _refersToPointCrossing;
        #endregion
        
        /// <summary>
        /// The crossing is represented in the DB ETCS graph model by an ETCS node.
        /// </summary>
        [XmlElement(Order=0)]
        public tElementWithIDref isRepresentedByEtcsNode
        {
            get
            {
                if ((_isRepresentedByEtcsNode == null))
                {
                    _isRepresentedByEtcsNode = new tElementWithIDref();
                }
                return _isRepresentedByEtcsNode;
            }
            set
            {
                _isRepresentedByEtcsNode = value;
            }
        }
        
        /// <summary>
        /// Refers to point/crossing
        /// </summary>
        [XmlElement(Order=1)]
        public tElementWithIDref refersToPointCrossing
        {
            get
            {
                if ((_refersToPointCrossing == null))
                {
                    _refersToPointCrossing = new tElementWithIDref();
                }
                return _refersToPointCrossing;
            }
            set
            {
                _refersToPointCrossing = value;
            }
        }
    }
    
    /// <summary>
    /// Informs about the relation between local operation zones A and B.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("localOperatingZoneRelation", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class LocalOperatingZoneRelation : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref _appliesToZoneA;
        private tElementWithIDref _appliesToZoneB;
        private LocalOperatingZoneRelationTypes _isOfLocalOperatingZoneRelationType;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref appliesToZoneA
        {
            get
            {
                if ((_appliesToZoneA == null))
                {
                    _appliesToZoneA = new tElementWithIDref();
                }
                return _appliesToZoneA;
            }
            set
            {
                _appliesToZoneA = value;
            }
        }
        
        [XmlElement(Order=1)]
        public tElementWithIDref appliesToZoneB
        {
            get
            {
                if ((_appliesToZoneB == null))
                {
                    _appliesToZoneB = new tElementWithIDref();
                }
                return _appliesToZoneB;
            }
            set
            {
                _appliesToZoneB = value;
            }
        }
        
        [XmlElement(Order=2)]
        public LocalOperatingZoneRelationTypes isOfLocalOperatingZoneRelationType
        {
            get
            {
                return _isOfLocalOperatingZoneRelationType;
            }
            set
            {
                _isOfLocalOperatingZoneRelationType = value;
            }
        }
    }
    
    /// <summary>
    /// Classifies the relations between adjacent zones.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum LocalOperatingZoneRelationTypes
    {
        /// <summary>
        /// Zone A is superordinate to B (which implies that B is subordinate to A).
        /// </summary>
        zoneAIsSuperordinateOfB,
        /// <summary>
        /// Zones A and B overlap.
        /// </summary>
        zonesOverlap,
        /// <summary>
        /// Zone A is subordinate to B (which implies that B is superordinate to A).
        /// </summary>
        zoneAIsSubordinateOfB,
        /// <summary>
        /// Zones A and B can merge.
        /// </summary>
        zonesMergeable,
        /// <summary>
        /// Other relation between zones A and B.
        /// de-DE: sonstige
        /// </summary>
        other,
    }
    
    /// <summary>
    /// A combination of one master lock and a set of dependent locks.
    /// Either the master lock or all dependent locks are unlocked.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("lockCombination", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class LockCombination : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref _isHousedIn;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref isHousedIn
        {
            get
            {
                if ((_isHousedIn == null))
                {
                    _isHousedIn = new tElementWithIDref();
                }
                return _isHousedIn;
            }
            set
            {
                _isHousedIn = value;
            }
        }
    }
    
    /// <summary>
    /// A rail component designed to absorb lengthening or shortening of rail, for instance thermal expansion.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("expansionJoint", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class ExpansionJoint : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref _isLocatedAt;
        private LeftRight[] _isLocatedOnRail;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref isLocatedAt
        {
            get
            {
                if ((_isLocatedAt == null))
                {
                    _isLocatedAt = new tElementWithIDref();
                }
                return _isLocatedAt;
            }
            set
            {
                _isLocatedAt = value;
            }
        }
        
        /// <summary>
        /// Left or right side with respect to topological linear element.
        /// 
        /// An expansion joint can be on a single rail. Joints located on both left and right rail can be considered as one joint.
        /// </summary>
        [XmlElement("isLocatedOnRail", Order=1)]
        public LeftRight[] isLocatedOnRail
        {
            get
            {
                return _isLocatedOnRail;
            }
            set
            {
                _isLocatedOnRail = value;
            }
        }
    }
    
    /// <summary>
    /// Stretch of track where rail and road conflict.
    /// The full level crossing protection zone is described by one or more danger area tracks.
    /// The track can be named in the inherited Designation class.
    /// de-DE: Gleisbezogener Gefahrraum
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("dangerAreaTrack", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class DangerAreaTrack : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref _appliesToTrackCrossing;
        private tElementWithIDref _hasDangerArea;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref appliesToTrackCrossing
        {
            get
            {
                if ((_appliesToTrackCrossing == null))
                {
                    _appliesToTrackCrossing = new tElementWithIDref();
                }
                return _appliesToTrackCrossing;
            }
            set
            {
                _appliesToTrackCrossing = value;
            }
        }
        
        /// <summary>
        /// The linear location on the track where a train would conflict with road users.
        /// </summary>
        [XmlElement(Order=1)]
        public tElementWithIDref hasDangerArea
        {
            get
            {
                if ((_hasDangerArea == null))
                {
                    _hasDangerArea = new tElementWithIDref();
                }
                return _hasDangerArea;
            }
            set
            {
                _hasDangerArea = value;
            }
        }
    }
    
    /// <summary>
    /// Technical line-side device relevant to but not planned by signalling.
    /// Facade for devices like
    /// <ul>
    /// <li>hot axle box detector</li>
    /// <li>Telecom antenna</li>
    /// <li>Catenary post</li>
    /// </ul>
    /// </summary>
    [XmlIncludeAttribute(typeof(LineSideSpotDetector))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("lineSideSpotDevice", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class LineSideSpotDevice : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref _isLocatedAt;
        private tElementWithIDref _refersToCivilStructure;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref isLocatedAt
        {
            get
            {
                if ((_isLocatedAt == null))
                {
                    _isLocatedAt = new tElementWithIDref();
                }
                return _isLocatedAt;
            }
            set
            {
                _isLocatedAt = value;
            }
        }
        
        /// <summary>
        /// The line-side device, e.g. a mast, may be registered as a civil structure.
        /// </summary>
        [XmlElement(Order=1)]
        public tElementWithIDref refersToCivilStructure
        {
            get
            {
                if ((_refersToCivilStructure == null))
                {
                    _refersToCivilStructure = new tElementWithIDref();
                }
                return _refersToCivilStructure;
            }
            set
            {
                _refersToCivilStructure = value;
            }
        }
    }
    
    /// <summary>
    /// Line-side detector, typically used to detect dangerous situations.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("lineSideSpotDetector", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class LineSideSpotDetector : LineSideSpotDevice
    {
        #region Private fields
        private LineSideDetectorTypes[] _isOfType;
        #endregion
        
        [XmlElement("isOfType", Order=0)]
        public LineSideDetectorTypes[] isOfType
        {
            get
            {
                return _isOfType;
            }
            set
            {
                _isOfType = value;
            }
        }
    }
    
    /// <summary>
    /// Types of line side detectors of events that can affect the safety of train traffic.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum LineSideDetectorTypes
    {
        /// <summary>
        /// Detects an overheating bearing in a passing axle box.
        /// </summary>
        hotAxleBox,
        /// <summary>
        /// Detects blocked brakes.
        /// </summary>
        fixedBrakes,
        /// <summary>
        /// Detects avalanches and/or rock-fall.
        /// </summary>
        avalanche,
        /// <summary>
        /// Detects flooded tracks.
        /// </summary>
        flooding,
        /// <summary>
        /// Seismometer detecting earthquakes
        /// </summary>
        earthQuake,
        /// <summary>
        /// Detects fire and/or smoke.
        /// </summary>
        fireAndSmoke,
        /// <summary>
        /// Detects high winds from the side.
        /// </summary>
        lateralWind,
        /// <summary>
        /// Warns about the presence of dangerous compounds near a chemical industry site.
        /// </summary>
        chemical,
        /// <summary>
        /// Detects vehicle fallen on the track from a bridge or embankment.
        /// </summary>
        fallenVehicle,
        /// <summary>
        /// Detects non-round wheels
        /// </summary>
        flatWheel,
        other,
    }
    
    /// <summary>
    /// A local operating area consists of at least one local operating zone. The zone groups elements that can be worked locally.
    /// Zones can be disjoint, touch or even overlap. Adjacent zones can be independent, or can merge into a bigger zone to allow seamless shunting movement between them. Local control over the zones is taken in a given order, given by rank, e.g. 1-2-3. Handing back control is the inverse- operation, e.g. 3-2-1.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("localOperatingZone", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class LocalOperatingZone : ConfiguredBaseObject
    {
        #region Private fields
        private int _rank;
        #endregion
        
        /// <summary>
        /// Represents the order in which the zones are given/taken.
        /// Only applies to zones that can be subordinated to another zone.
        /// </summary>
        [XmlElement(Order=0)]
        public int rank
        {
            get
            {
                return _rank;
            }
            set
            {
                _rank = value;
            }
        }
    }
    
    /// <summary>
    /// A stretch of track where a given property like speed or gradient applies. The property is constant in the segment.
    /// </summary>
    [XmlIncludeAttribute(typeof(SpeedSegment))]
    [XmlIncludeAttribute(typeof(TrainCategorySpeedRestriction))]
    [XmlIncludeAttribute(typeof(TemporarySpeedRestriction))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("segment", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public abstract partial class Segment : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref _hasTracksideSignal;
        private tElementWithIDref _isLocatedAt;
        #endregion
        
        /// <summary>
        /// A segment refers to a signal that indicates the new property like speed at or near the beginning of that segment. Note that the signal has its own spot location.
        /// fr-FR: permet d'associer un signal  limite de vitesse en aval. Ne serait pas utilis&#233; en France.
        /// </summary>
        [XmlElement(Order=0)]
        public tElementWithIDref hasTracksideSignal
        {
            get
            {
                if ((_hasTracksideSignal == null))
                {
                    _hasTracksideSignal = new tElementWithIDref();
                }
                return _hasTracksideSignal;
            }
            set
            {
                _hasTracksideSignal = value;
            }
        }
        
        /// <summary>
        /// <b>From-To</b> approach: DB and NR.
        /// </summary>
        [XmlElement(Order=1)]
        public tElementWithIDref isLocatedAt
        {
            get
            {
                if ((_isLocatedAt == null))
                {
                    _isLocatedAt = new tElementWithIDref();
                }
                return _isLocatedAt;
            }
            set
            {
                _isLocatedAt = value;
            }
        }
    }
    
    /// <summary>
    /// A segment of a speed profile for which a constant speed applies.
    /// </summary>
    [XmlIncludeAttribute(typeof(TrainCategorySpeedRestriction))]
    [XmlIncludeAttribute(typeof(TemporarySpeedRestriction))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("speedSegment", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class SpeedSegment : Segment
    {
        #region Private fields
        private Speed _hasMaximumSpeed;
        private string _reasonForSpeed;
        #endregion
        
        /// <summary>
        /// The maximum speed in km/h that applies to the speed section.
        /// </summary>
        [XmlElement(Order=0)]
        public Speed hasMaximumSpeed
        {
            get
            {
                if ((_hasMaximumSpeed == null))
                {
                    _hasMaximumSpeed = new Speed();
                }
                return _hasMaximumSpeed;
            }
            set
            {
                _hasMaximumSpeed = value;
            }
        }
        
        /// <summary>
        /// coded or textual reason for a given speed
        /// </summary>
        [XmlElement(Order=1)]
        public string reasonForSpeed
        {
            get
            {
                return _reasonForSpeed;
            }
            set
            {
                _reasonForSpeed = value;
            }
        }
    }
    
    /// <summary>
    /// A speed restriction that applies to a given train category.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("trainCategorySpeedRestriction", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class TrainCategorySpeedRestriction : SpeedSegment
    {
        #region Private fields
        private tElementWithIDref[] _appliesToTrainCategory;
        #endregion
        
        [XmlElement("appliesToTrainCategory", Order=0)]
        public tElementWithIDref[] appliesToTrainCategory
        {
            get
            {
                return _appliesToTrainCategory;
            }
            set
            {
                _appliesToTrainCategory = value;
            }
        }
    }
    
    /// <summary>
    /// A time-limited speed restriction.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("temporarySpeedRestriction", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class TemporarySpeedRestriction : SpeedSegment
    {
    }
    
    /// <summary>
    /// The party that uses the asset and may be affected if changes are made to the asset.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("assetUser", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class AssetUser : ConfiguredBaseObject
    {
        #region Private fields
        private string _name;
        #endregion
        
        /// <summary>
        /// The name of the party.
        /// </summary>
        [XmlAttribute]
        public string name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    }
    
    /// <summary>
    /// Outer limit of the local control area.
    /// This limit is flank protected.
    /// The limit is represented by a signal, point or derailer
    /// de-DE: Grenze der NB Zone gegen&#252;ber dem der Zone angrenzenden Bereich.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("localOperatingZoneLimit", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class LocalOperatingZoneLimit : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref _isDefinedByLocationProxy;
        private LocalOperatingZoneLimitTypes _isOfLocalOperatingZoneLimitType;
        private tElementWithIDref _limitsLocalOperatingZone;
        #endregion
        
        /// <summary>
        /// Defines a point of interest that is located at the boundary of the zone.
        /// </summary>
        [XmlElement(Order=0)]
        public tElementWithIDref isDefinedByLocationProxy
        {
            get
            {
                if ((_isDefinedByLocationProxy == null))
                {
                    _isDefinedByLocationProxy = new tElementWithIDref();
                }
                return _isDefinedByLocationProxy;
            }
            set
            {
                _isDefinedByLocationProxy = value;
            }
        }
        
        [XmlElement(Order=1)]
        public LocalOperatingZoneLimitTypes isOfLocalOperatingZoneLimitType
        {
            get
            {
                return _isOfLocalOperatingZoneLimitType;
            }
            set
            {
                _isOfLocalOperatingZoneLimitType = value;
            }
        }
        
        [XmlElement(Order=2)]
        public tElementWithIDref limitsLocalOperatingZone
        {
            get
            {
                if ((_limitsLocalOperatingZone == null))
                {
                    _limitsLocalOperatingZone = new tElementWithIDref();
                }
                return _limitsLocalOperatingZone;
            }
            set
            {
                _limitsLocalOperatingZone = value;
            }
        }
    }
    
    /// <summary>
    /// The type of zones on the other side of the limit (as seen from the local operating zone).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum LocalOperatingZoneLimitTypes
    {
        /// <summary>
        /// Interlocking area
        /// de-DE: STW-Bereich
        /// </summary>
        interlockingOperatedArea,
        /// <summary>
        /// Another local operating zone (that can be taken/given locally)
        /// de-DE: NB-Zone
        /// </summary>
        localOperatingZone,
        /// <summary>
        /// the adjacent area is permanently under local operation, i.e. it has no interlocking.
        /// de-DE: Ortsstellbereich
        /// </summary>
        permanentLocallyOperatedArea,
        other,
    }
    
    /// <summary>
    /// ETCS node in DB ETCS graph model.
    /// de-DE: ETCS Knoten im ETCS Knoten-Kanten Modell
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("etcsNode", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class EtcsNode : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref _isLocatedAt;
        private tElementWithIDref _mapsToDiamond;
        private tElementWithIDref _mapsToEtcsMarker;
        #endregion
        
        /// <summary>
        /// The ETCS node may need to map to the spot location where ETCS nodes map to  "Streckenende/wechsel"
        /// </summary>
        [XmlElement(Order=0)]
        public tElementWithIDref isLocatedAt
        {
            get
            {
                if ((_isLocatedAt == null))
                {
                    _isLocatedAt = new tElementWithIDref();
                }
                return _isLocatedAt;
            }
            set
            {
                _isLocatedAt = value;
            }
        }
        
        /// <summary>
        /// An ETCS node can map to a crossing diamond
        /// </summary>
        [XmlElement(Order=1)]
        public tElementWithIDref mapsToDiamond
        {
            get
            {
                if ((_mapsToDiamond == null))
                {
                    _mapsToDiamond = new tElementWithIDref();
                }
                return _mapsToDiamond;
            }
            set
            {
                _mapsToDiamond = value;
            }
        }
        
        /// <summary>
        /// The ETCS node maps to an ETCS marker
        /// <ul>
        /// <li>Gleisabschluss</li>
        /// <li>Grenze_Ausruestungsbereich</li>
        /// <li>KrW</li>
        /// <li>Streckenende</li>
        /// <li>Streckenwechsel</li>
        /// </ul>
        /// </summary>
        [XmlElement(Order=2)]
        public tElementWithIDref mapsToEtcsMarker
        {
            get
            {
                if ((_mapsToEtcsMarker == null))
                {
                    _mapsToEtcsMarker = new tElementWithIDref();
                }
                return _mapsToEtcsMarker;
            }
            set
            {
                _mapsToEtcsMarker = value;
            }
        }
    }
    
    /// <summary>
    /// An area controlled by a Central Safety System (CSS). CSS is a combination of interlocking plus RBC.
    /// Refer to 3.2.1. in ProRail document IIM-ERTMS.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("cssArea", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class CssArea : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref _isLocatedAt;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref isLocatedAt
        {
            get
            {
                if ((_isLocatedAt == null))
                {
                    _isLocatedAt = new tElementWithIDref();
                }
                return _isLocatedAt;
            }
            set
            {
                _isLocatedAt = value;
            }
        }
    }
    
    /// <summary>
    /// Generic term for the information-carriers: sign, board, nameplates, lamp-frames, notice boards.
    /// It is most often part of a signal.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("signalFrame", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class SignalFrame : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref[] _hasAspect;
        private OffsetOfReferencePoint[] _hasPosition;
        private SignalFrameTypes _isOfSignalFrameType;
        private tElementWithIDref[] _refersToCoActingSignalFrame;
        private tElementWithIDref[] _refersToSubordinatedSignalFrame;
        private bool _fixed;
        #endregion
        
        /// <summary>
        /// The signal frame can show this aspect.
        /// </summary>
        [XmlElement("hasAspect", Order=0)]
        public tElementWithIDref[] hasAspect
        {
            get
            {
                return _hasAspect;
            }
            set
            {
                _hasAspect = value;
            }
        }
        
        [XmlElement("hasPosition", Order=1)]
        public OffsetOfReferencePoint[] hasPosition
        {
            get
            {
                return _hasPosition;
            }
            set
            {
                _hasPosition = value;
            }
        }
        
        [XmlElement(Order=2)]
        public SignalFrameTypes isOfSignalFrameType
        {
            get
            {
                return _isOfSignalFrameType;
            }
            set
            {
                _isOfSignalFrameType = value;
            }
        }
        
        /// <summary>
        /// A co-acting signal <b>repeats the exact aspect</b> or indication of the main signal. Co-acting signals are always the same type (colour light or semaphore) as the main signal.
        /// The co-acting signal frame is mounted on the same fixing as the main signal.
        /// 
        /// de-DE: Vorsignal
        /// UK: banner repeating signal.
        /// </summary>
        [XmlElement("refersToCoActingSignalFrame", Order=3)]
        public tElementWithIDref[] refersToCoActingSignalFrame
        {
            get
            {
                return _refersToCoActingSignalFrame;
            }
            set
            {
                _refersToCoActingSignalFrame = value;
            }
        }
        
        /// <summary>
        /// A subordinated signal shows an aspect that <b>depends on</b> the aspect of the originating frame.
        /// The subordinated signal frame is mounted on a different fixing than the main signal, at a distance.
        /// </summary>
        [XmlElement("refersToSubordinatedSignalFrame", Order=4)]
        public tElementWithIDref[] refersToSubordinatedSignalFrame
        {
            get
            {
                return _refersToSubordinatedSignalFrame;
            }
            set
            {
                _refersToSubordinatedSignalFrame = value;
            }
        }
        
        /// <summary>
        /// True if the aspect is fixed so the trackside cannot modify the aspect. False if interlocking or other trackside system can modify the aspect. For instance, a lamp switches off after a given delay.
        /// </summary>
        [XmlAttribute]
        public bool @fixed
        {
            get
            {
                return _fixed;
            }
            set
            {
                _fixed = value;
            }
        }
    }
    
    /// <summary>
    /// A signal frame has a reference point that is nationally defined:
    /// <ul>
    /// <li>a lamp, typically the red lamp, or</li>
    /// <li>the centre of a set of lamps, or</li>
    /// <li>the edge of a frame nearest to train gauge.</li>
    /// </ul>
    /// This reference point has:
    /// <ul>
    /// <li>a spot location.</li>
    /// <li>an horizontal offset, e.g. 1,8 metres from the nearest rail.</li>
    /// <li>a vertical offset, e.g. 3,6 metres above the top of the highest rail.</li>
    /// </ul>
    /// </summary>
    [XmlIncludeAttribute(typeof(HorizontalOffsetOfReferencePoint))]
    [XmlIncludeAttribute(typeof(VerticalOffsetOfReferencePoint))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("offsetOfReferencePoint", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class OffsetOfReferencePoint
    {
        #region Private fields
        private tElementWithIDref _isLocatedAt;
        private Length _value;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref isLocatedAt
        {
            get
            {
                if ((_isLocatedAt == null))
                {
                    _isLocatedAt = new tElementWithIDref();
                }
                return _isLocatedAt;
            }
            set
            {
                _isLocatedAt = value;
            }
        }
        
        /// <summary>
        /// The offset of the reference point with respect to:
        /// <ul>
        /// <li>the nearest rail (SNCF, NR).</li>
        /// <li>the centre line of the track (DB).</li>
        /// </ul>
        /// </summary>
        [XmlElement(Order=1)]
        public Length value
        {
            get
            {
                if ((_value == null))
                {
                    _value = new Length();
                }
                return _value;
            }
            set
            {
                _value = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("horizontalOffsetOfReferencePoint", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class HorizontalOffsetOfReferencePoint : OffsetOfReferencePoint
    {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("verticalOffsetOfReferencePoint", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class VerticalOffsetOfReferencePoint : OffsetOfReferencePoint
    {
    }
    
    /// <summary>
    /// List of signal frame components that send a message to the driver.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum SignalFrameTypes
    {
        /// <summary>
        /// main frame of the signal; a signal can have several main frames
        /// SNCF: chassis-lampe, RFI: vela, DB: Schirm, PR: lamphuis, NR: signal housing.
        /// </summary>
        main,
        /// <summary>
        /// simple plate that displays the label of a signal. The text value can be taken from the associated designation.  Alternatively, the name can be given as text information that is part of the aspect.
        /// </summary>
        namePlate,
        /// <summary>
        /// a (passive, metal) plate showing a <i>fixed </i>aspect, For instance a painted or lit letter P, W or S, speed limit numeral or a written message like "call signalman" (refer to aspect for the meaning).
        /// An (ETCS) stop marker board is a sign.
        /// </summary>
        sign,
        /// <summary>
        /// a wooden or concrete structure for marking fouling or clearance points (FR: garage franc, NL: grensteken)
        /// </summary>
        slab,
        /// <summary>
        /// used e.g. by DB for marking fouling points (DB Grenzzeichen).
        /// </summary>
        ceramicBody,
        /// <summary>
        /// switchable frame designed to show supplementary aspect information, e.g. <i>speed</i>, <i>direction </i>information, tunnel approach, or the french oeuilleton (degraded situation).
        /// </summary>
        indicator,
        /// <summary>
        /// a frame showing shunting aspects only.
        /// </summary>
        shunting,
        /// <summary>
        /// pattern painted on the signal pole that sends a message to the driver (Zebra pattern in Italy).
        /// </summary>
        paintedPost,
        /// <summary>
        /// a repeater signal is usually smaller. Refer to the aspect for the meaning of a repeater signal. The repeater signal is not considered a subordinated signal.
        /// </summary>
        repeater,
        /// <summary>
        /// This frame is designed to display a restricted movement authority, e.g. in degraded situations when the normal aspect cannot be displayed.
        /// RFI: two white or blue flashing lights.
        /// SNCF: oeuilleton maps to indicator because it belongs to the main frame.
        /// </summary>
        auxiliary,
        /// <summary>
        /// This frame is designed to display a restricted movement authority that applies when the normal signal aspect cannot be displayed. RFI: two flashing white or blue lamps. See <i>Aspect </i>for the exact <i>meaning</i> of this aspect.
        /// </summary>
        other,
    }
    
    /// <summary>
    /// An area where a particular track condition applies.
    /// </summary>
    [XmlIncludeAttribute(typeof(NoEddyCurrentBrakeArea))]
    [XmlIncludeAttribute(typeof(LimitedCurrentArea))]
    [XmlIncludeAttribute(typeof(BigMetalMassArea))]
    [XmlIncludeAttribute(typeof(NoRegenerativeBrakeArea))]
    [XmlIncludeAttribute(typeof(NonStoppingArea))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("trackConditionArea", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public abstract partial class TrackConditionArea : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref _isLocatedAt;
        #endregion
        
        /// <summary>
        /// This track condition applies in the given area.
        /// </summary>
        [XmlElement(Order=0)]
        public tElementWithIDref isLocatedAt
        {
            get
            {
                if ((_isLocatedAt == null))
                {
                    _isLocatedAt = new tElementWithIDref();
                }
                return _isLocatedAt;
            }
            set
            {
                _isLocatedAt = value;
            }
        }
    }
    
    /// <summary>
    /// Area where eddy current braking is prohibited.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("noEddyCurrentBrakeArea", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class NoEddyCurrentBrakeArea : TrackConditionArea
    {
        #region Private fields
        private EddyCurrentProhibitionTypes _isOfProhibitionType;
        #endregion
        
        /// <summary>
        /// Expresses the level of eddy current brake prohibition.
        /// </summary>
        [XmlElement(Order=0)]
        public EddyCurrentProhibitionTypes isOfProhibitionType
        {
            get
            {
                return _isOfProhibitionType;
            }
            set
            {
                _isOfProhibitionType = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum EddyCurrentProhibitionTypes
    {
        /// <summary>
        /// The brake may only be used for emergency braking.
        /// </summary>
        emergencyOnly,
        /// <summary>
        /// The brake may never be used.
        /// </summary>
        fullProhibition,
    }
    
    /// <summary>
    /// An area where traction current is limited.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("limitedCurrentArea", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class LimitedCurrentArea : TrackConditionArea
    {
        #region Private fields
        private tElementWithIDref[] _appliesToTrainCategory;
        private int _maxTractionCurrent;
        #endregion
        
        /// <summary>
        /// The current limit applies to this train category.
        /// </summary>
        [XmlElement("appliesToTrainCategory", Order=0)]
        public tElementWithIDref[] appliesToTrainCategory
        {
            get
            {
                return _appliesToTrainCategory;
            }
            set
            {
                _appliesToTrainCategory = value;
            }
        }
        
        /// <summary>
        /// The maximum traction current in Amperes that a train can draw.
        /// </summary>
        [XmlElement(Order=1)]
        public int maxTractionCurrent
        {
            get
            {
                return _maxTractionCurrent;
            }
            set
            {
                _maxTractionCurrent = value;
            }
        }
    }
    
    /// <summary>
    /// Area with massive metal structures that are liable to adversely influence the TP systems.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("bigMetalMassArea", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class BigMetalMassArea : TrackConditionArea
    {
    }
    
    /// <summary>
    /// Area where regenerative braking isn't allowed.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("noRegenerativeBrakeArea", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class NoRegenerativeBrakeArea : TrackConditionArea
    {
    }
    
    /// <summary>
    /// Area where stopping isn't allowed.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("nonStoppingArea", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class NonStoppingArea : TrackConditionArea
    {
        #region Private fields
        private string _description;
        #endregion
        
        /// <summary>
        /// Describes or names the area, e.g. tunnel or bridge, that is the reason for this prohibition.
        /// </summary>
        [XmlElement(Order=0)]
        public string description
        {
            get
            {
                return _description;
            }
            set
            {
                _description = value;
            }
        }
    }
    
    /// <summary>
    /// Train category, such as freight, tilting, passenger, high speed. Can be expanded in national domains because ETCS category may not suffice.
    /// </summary>
    [XmlIncludeAttribute(typeof(PassengerTrain))]
    [XmlIncludeAttribute(typeof(KvbTrain))]
    [XmlIncludeAttribute(typeof(FreightTrain))]
    [XmlIncludeAttribute(typeof(TiltingTrain))]
    [XmlIncludeAttribute(typeof(TpwsTrain))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("trainCategory", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public abstract partial class TrainCategory : ConfiguredBaseObject
    {
    }
    
    /// <summary>
    /// Category for trains carrying passengers.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("passengerTrain", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class PassengerTrain : TrainCategory
    {
    }
    
    /// <summary>
    /// Category for KVB speed-controlled trains.
    /// This allows imposing speed limits per category.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("kvbTrain", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class KvbTrain : TrainCategory
    {
        #region Private fields
        private int _c;
        #endregion
        
        /// <summary>
        /// Train category in the range C0 ... C7.
        /// </summary>
        [XmlAttribute]
        public int C
        {
            get
            {
                return _c;
            }
            set
            {
                _c = value;
            }
        }
    }
    
    /// <summary>
    /// Category for trains carrying freight or goods.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("freightTrain", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class FreightTrain : TrainCategory
    {
    }
    
    /// <summary>
    /// Category for trains equipped with a tilting mechanism.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("tiltingTrain", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class TiltingTrain : TrainCategory
    {
    }
    
    /// <summary>
    /// Category for trains equipped with Train Protection and Warning System.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("tpwsTrain", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class TpwsTrain : TrainCategory
    {
        #region Private fields
        private string _type;
        #endregion
        
        /// <summary>
        /// Field for the user-defined train category.
        /// </summary>
        [XmlAttribute]
        public string type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }
    }
    
    /// <summary>
    /// The signal vector consists of 6 bytes of information (Eu.DK.254) mapped to integers.
    /// The EULYNX signal vector is defined by the SCI-LS cluster and conveys active aspect controls from the interlocking to the signal controller
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("signalVector", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class SignalVector : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref _commandsActiveAspectSet;
        private int _basicAspectType;
        private int _directionIndicator;
        private int _directionIndicatorAnnouncements;
        private int _extensionBasicAspectType;
        private int _speedIndicator;
        private int _speedIndicatorAnnouncement;
        #endregion
        
        /// <summary>
        /// The signal vector commands a set of active aspects.
        /// </summary>
        [XmlElement(Order=0)]
        public tElementWithIDref commandsActiveAspectSet
        {
            get
            {
                if ((_commandsActiveAspectSet == null))
                {
                    _commandsActiveAspectSet = new tElementWithIDref();
                }
                return _commandsActiveAspectSet;
            }
            set
            {
                _commandsActiveAspectSet = value;
            }
        }
        
        /// <summary>
        /// Code for basic aspect types.
        /// </summary>
        [XmlAttribute]
        public int basicAspectType
        {
            get
            {
                return _basicAspectType;
            }
            set
            {
                _basicAspectType = value;
            }
        }
        
        /// <summary>
        /// Direction indicators.
        /// </summary>
        [XmlAttribute]
        public int directionIndicator
        {
            get
            {
                return _directionIndicator;
            }
            set
            {
                _directionIndicator = value;
            }
        }
        
        /// <summary>
        /// Direction indicator announcements.
        /// </summary>
        [XmlAttribute]
        public int directionIndicatorAnnouncements
        {
            get
            {
                return _directionIndicatorAnnouncements;
            }
            set
            {
                _directionIndicatorAnnouncements = value;
            }
        }
        
        /// <summary>
        /// Code for extension of basic aspect types.
        /// </summary>
        [XmlAttribute]
        public int extensionBasicAspectType
        {
            get
            {
                return _extensionBasicAspectType;
            }
            set
            {
                _extensionBasicAspectType = value;
            }
        }
        
        [XmlAttribute]
        public int speedIndicator
        {
            get
            {
                return _speedIndicator;
            }
            set
            {
                _speedIndicator = value;
            }
        }
        
        /// <summary>
        /// Speed indicators announcements.
        /// </summary>
        [XmlAttribute]
        public int speedIndicatorAnnouncement
        {
            get
            {
                return _speedIndicatorAnnouncement;
            }
            set
            {
                _speedIndicatorAnnouncement = value;
            }
        }
    }
    
    /// <summary>
    /// A route is a predetermined path for a traffic movement. A route has a route body plus a set of properties. It is associated with flank protection and overlap.
    /// A route is abstract and must be specialised, e.g. into main route, shunting route or on sight route.
    /// </summary>
    [XmlIncludeAttribute(typeof(MainRoute))]
    [XmlIncludeAttribute(typeof(ShuntingRoute))]
    [XmlIncludeAttribute(typeof(OnSightRoute))]
    [XmlIncludeAttribute(typeof(EtcsRoute))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("route", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public abstract partial class Route : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref _appliesToRouteBody;
        private tElementWithIDref[] _hasPrecededRoute;
        private tElementWithIDref[] _needsLXclosed;
        private tElementWithIDref[] _requiresDerailerInPositionForFlankProtection;
        private tElementWithIDref[] _requiresFlankProtection;
        private tElementWithIDref[] _requiresPointElementInPositionForFlankProtection;
        private tElementWithIDref[] _usesOverlap;
        private tElementWithIDref _usesPreferredOverlap;
        #endregion
        
        /// <summary>
        /// A route is mapped to a route body path.
        /// </summary>
        [XmlElement(Order=0)]
        public tElementWithIDref appliesToRouteBody
        {
            get
            {
                if ((_appliesToRouteBody == null))
                {
                    _appliesToRouteBody = new tElementWithIDref();
                }
                return _appliesToRouteBody;
            }
            set
            {
                _appliesToRouteBody = value;
            }
        }
        
        /// <summary>
        /// For this route to be set, the preceding route must be set.
        /// 
        /// This allows a train to cross a tunnel or other zone whilst being sure that it does not stop. Also used when trains cross from one IL to another.
        /// 
        /// German: Folgeabh&#228;ngigkeit
        /// Dutch: X/G routes
        /// </summary>
        [XmlElement("hasPrecededRoute", Order=1)]
        public tElementWithIDref[] hasPrecededRoute
        {
            get
            {
                return _hasPrecededRoute;
            }
            set
            {
                _hasPrecededRoute = value;
            }
        }
        
        /// <summary>
        /// LX that needs to be closed because it's situated in the safety zone of the overlap or on the open line.
        /// de-DE: B&#220; im Durchrutschweg, der im Sicherheitsabstand liegt und daher f&#252;r die Fahrstra&#223;e zu sichern ist oder B&#220; auf der freien Strecke, dessen Sicherung durch die Ausfahrzugstra&#223;e angesto&#223;en werden muss.
        /// </summary>
        [XmlElement("needsLXclosed", Order=2)]
        public tElementWithIDref[] needsLXclosed
        {
            get
            {
                return _needsLXclosed;
            }
            set
            {
                _needsLXclosed = value;
            }
        }
        
        /// <summary>
        /// The derailer that provides flank protection must of course be in derailing position to be effective.
        /// </summary>
        [XmlElement("requiresDerailerInPositionForFlankProtection", Order=3)]
        public tElementWithIDref[] requiresDerailerInPositionForFlankProtection
        {
            get
            {
                return _requiresDerailerInPositionForFlankProtection;
            }
            set
            {
                _requiresDerailerInPositionForFlankProtection = value;
            }
        }
        
        /// <summary>
        /// This route explicitly requires flank protection<i>.</i>
        /// de-DE: Flankenschutzsuche
        /// DB defines the required flank protection <i>per point</i>, thus implicitly acquiring flank protection.
        /// </summary>
        [XmlElement("requiresFlankProtection", Order=4)]
        public tElementWithIDref[] requiresFlankProtection
        {
            get
            {
                return _requiresFlankProtection;
            }
            set
            {
                _requiresFlankProtection = value;
            }
        }
        
        /// <summary>
        /// A route can require any number of point elements to adopt a given position in order to provide flank protection.
        /// </summary>
        [XmlElement("requiresPointElementInPositionForFlankProtection", Order=5)]
        public tElementWithIDref[] requiresPointElementInPositionForFlankProtection
        {
            get
            {
                return _requiresPointElementInPositionForFlankProtection;
            }
            set
            {
                _requiresPointElementInPositionForFlankProtection = value;
            }
        }
        
        /// <summary>
        /// References to all overlaps for this route.
        /// Can be left out when all overlaps at the route's exit are available througy other means, e.g. attached to exit signal or by inspection of signalling plans.
        /// </summary>
        [XmlElement("usesOverlap", Order=6)]
        public tElementWithIDref[] usesOverlap
        {
            get
            {
                return _usesOverlap;
            }
            set
            {
                _usesOverlap = value;
            }
        }
        
        /// <summary>
        /// Reference to the preferred overlap of this route.
        /// </summary>
        [XmlElement(Order=7)]
        public tElementWithIDref usesPreferredOverlap
        {
            get
            {
                if ((_usesPreferredOverlap == null))
                {
                    _usesPreferredOverlap = new tElementWithIDref();
                }
                return _usesPreferredOverlap;
            }
            set
            {
                _usesPreferredOverlap = value;
            }
        }
    }
    
    /// <summary>
    /// A main route for typical train operations.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("mainRoute", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public abstract partial class MainRoute : Route
    {
    }
    
    /// <summary>
    /// A route for maneuvering on occupied track. TVP sections are not checked for vacancy before calling this type of route.
    /// If section proving is required, use the extension of this class defined in the related section proving diagram.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("shuntingRoute", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public abstract partial class ShuntingRoute : Route
    {
    }
    
    /// <summary>
    /// An on sight route is called when track vacancy cannot be ascertained.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("onSightRoute", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public abstract partial class OnSightRoute : Route
    {
    }
    
    /// <summary>
    /// A route specialised for ETCS purposes.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("etcsRoute", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class EtcsRoute : Route
    {
        #region Private fields
        private tElementWithIDref[] _disallowsStopIfInSrBaliseGroup;
        private tElementWithIDref[] _excludesBaliseGroup;
        private tElementWithIDref[] _hasMaSection;
        private tElementWithIDref[] _hasSrBalise;
        private StandstillDetectionForShunting _hasTempShuntingArea;
        private bool _shuntingModeRoute;
        #endregion
        
        /// <summary>
        /// Refers to a balise group in the route where a stop-if-in-SR is not allowed.
        /// See SRS-026-7 packet 137, Stop if in Staff Responsible.
        /// </summary>
        [XmlElement("disallowsStopIfInSrBaliseGroup", Order=0)]
        public tElementWithIDref[] disallowsStopIfInSrBaliseGroup
        {
            get
            {
                return _disallowsStopIfInSrBaliseGroup;
            }
            set
            {
                _disallowsStopIfInSrBaliseGroup = value;
            }
        }
        
        /// <summary>
        /// List of balises that are excluded from the link list of a MA.
        /// </summary>
        [XmlElement("excludesBaliseGroup", Order=1)]
        public tElementWithIDref[] excludesBaliseGroup
        {
            get
            {
                return _excludesBaliseGroup;
            }
            set
            {
                _excludesBaliseGroup = value;
            }
        }
        
        /// <summary>
        /// The route has a number of MA sections used for triggering the section timer.
        /// </summary>
        [XmlElement("hasMaSection", Order=2)]
        public tElementWithIDref[] hasMaSection
        {
            get
            {
                return _hasMaSection;
            }
            set
            {
                _hasMaSection = value;
            }
        }
        
        /// <summary>
        /// List of balise groups that can accompany a SR-MA.
        /// </summary>
        [XmlElement("hasSrBalise", Order=3)]
        public tElementWithIDref[] hasSrBalise
        {
            get
            {
                return _hasSrBalise;
            }
            set
            {
                _hasSrBalise = value;
            }
        }
        
        /// <summary>
        /// A timer per temporary shunting area.
        /// </summary>
        [XmlElement(Order=4)]
        public StandstillDetectionForShunting hasTempShuntingArea
        {
            get
            {
                if ((_hasTempShuntingArea == null))
                {
                    _hasTempShuntingArea = new StandstillDetectionForShunting();
                }
                return _hasTempShuntingArea;
            }
            set
            {
                _hasTempShuntingArea = value;
            }
        }
        
        /// <summary>
        /// indicates that at the end of the route, the train receives a shunting mode profile.
        /// </summary>
        [XmlAttribute]
        public bool shuntingModeRoute
        {
            get
            {
                return _shuntingModeRoute;
            }
            set
            {
                _shuntingModeRoute = value;
            }
        }
    }
    
    /// <summary>
    /// A timer for measuring the time a train has been stationary before entering the temporary shunting area.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("standstillDetectionForShunting", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class StandstillDetectionForShunting
    {
        #region Private fields
        private tElementWithIDref _appliestoTempShuntingArea;
        private Duration _hasStandstillTimer;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref appliestoTempShuntingArea
        {
            get
            {
                if ((_appliestoTempShuntingArea == null))
                {
                    _appliestoTempShuntingArea = new tElementWithIDref();
                }
                return _appliestoTempShuntingArea;
            }
            set
            {
                _appliestoTempShuntingArea = value;
            }
        }
        
        [XmlElement(Order=1)]
        public Duration hasStandstillTimer
        {
            get
            {
                if ((_hasStandstillTimer == null))
                {
                    _hasStandstillTimer = new Duration();
                }
                return _hasStandstillTimer;
            }
            set
            {
                _hasStandstillTimer = value;
            }
        }
    }
    
    /// <summary>
    /// Part of the platform facility adjacent to a track.
    /// The designation of the platform edge is for passenger information systems, typically a number plus a letter e.g. <i>platform 6</i> or <i>platform 10a/b</i>.
    /// </summary>
    [XmlIncludeAttribute(typeof(UsablePlatformEdge))]
    [XmlIncludeAttribute(typeof(InfrastructuralPlatformEdge))]
    [XmlIncludeAttribute(typeof(OperationalPlatformEdge))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("platformEdge", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public abstract partial class PlatformEdge : ConfiguredBaseObject
    {
        #region Private fields
        private DispatchPosition[] _hasDispatchPosition;
        private Length _hasHeight;
        private LinearLocation _isLocatedAt;
        private tElementWithIDref[] _isPartOfPlatformEdge;
        private LateralSide _isSituatedToSide;
        #endregion
        
        [XmlElement("hasDispatchPosition", Order=0)]
        public DispatchPosition[] hasDispatchPosition
        {
            get
            {
                return _hasDispatchPosition;
            }
            set
            {
                _hasDispatchPosition = value;
            }
        }
        
        /// <summary>
        /// Height over nearest rail.
        /// Can be specialised in national domain if a national list of allowed heights applies.
        /// </summary>
        [XmlElement(Order=1)]
        public Length hasHeight
        {
            get
            {
                if ((_hasHeight == null))
                {
                    _hasHeight = new Length();
                }
                return _hasHeight;
            }
            set
            {
                _hasHeight = value;
            }
        }
        
        [XmlElement(Order=2)]
        public LinearLocation isLocatedAt
        {
            get
            {
                if ((_isLocatedAt == null))
                {
                    _isLocatedAt = new LinearLocation();
                }
                return _isLocatedAt;
            }
            set
            {
                _isLocatedAt = value;
            }
        }
        
        /// <summary>
        /// Recursive relation between platform edges. For instance:
        /// <ul>
        /// <li>An operational edge can be part of a usable edge.</li>
        /// <li>An usable edge can be part of a Infrastructural edge.</li>
        /// <li>A usable edge can contain several operational edges.</li>
        /// </ul>
        /// </summary>
        [XmlElement("isPartOfPlatformEdge", Order=3)]
        public tElementWithIDref[] isPartOfPlatformEdge
        {
            get
            {
                return _isPartOfPlatformEdge;
            }
            set
            {
                _isPartOfPlatformEdge = value;
            }
        }
        
        /// <summary>
        /// The platform edge is situated to the left or right of its linear location, i.e. with respect to the orientation of the linear location, not<i> </i>with respect to the operational direction of the track.
        /// </summary>
        [XmlElement(Order=4)]
        public LateralSide isSituatedToSide
        {
            get
            {
                return _isSituatedToSide;
            }
            set
            {
                _isSituatedToSide = value;
            }
        }
    }
    
    /// <summary>
    /// The spot from where trains can be dispatched, i.e. the spot where the dispatcher can sight train(s) and signals. Extra equipment like plungers can be installed here.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("dispatchPosition", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class DispatchPosition : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref _isLocatedAt;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref isLocatedAt
        {
            get
            {
                if ((_isLocatedAt == null))
                {
                    _isLocatedAt = new tElementWithIDref();
                }
                return _isLocatedAt;
            }
            set
            {
                _isLocatedAt = value;
            }
        }
    }
    
    /// <summary>
    /// Where trains are allowed to stand.
    /// Notes:
    /// <ul>
    /// <li>NR and SNCF: ends at signal minus sighting distance.</li>
    /// </ul>
    /// <ul>
    /// <li>NR: platform standage.</li>
    /// </ul>
    /// <ul>
    /// <li>ProRail: bruikbare lengte.</li>
    /// <li>RFI only use operational platform edge.</li>
    /// <li>DB design rules consider the <i>usable </i>length only.</li>
    /// </ul>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("usablePlatformEdge", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class UsablePlatformEdge : PlatformEdge
    {
    }
    
    /// <summary>
    /// All of the platform edge adjacent to a track. Includes ramps, stairs, fenced off or restricted areas where trains don't normally stop.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("infrastructuralPlatformEdge", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class InfrastructuralPlatformEdge : PlatformEdge
    {
    }
    
    /// <summary>
    /// Where passenger can access trains.
    /// The definition is national. It depends on signal sighting, length of train, position of doors, height of steps, presence of barriers or signs.
    /// It is possible to define an edge <i>per direction</i>, which can be relevant to coupling, splitting or turn-operations (NR and ProRail).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("operationalPlatformEdge", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class OperationalPlatformEdge : PlatformEdge
    {
    }
    
    /// <summary>
    /// A speed profile represents the maximum speed along a defined and delimited path through the railway network.
    /// The origin of the profile is situated at the signal plus a positive or negative offset.
    /// The profile has one or more of sections, each of given length and with given maximum speed.
    /// 
    /// This approach is equivalent to the ETCS SSP.
    /// </summary>
    [XmlIncludeAttribute(typeof(TrainCategorySpeedProfile))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("speedProfile", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class SpeedProfile : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref[] _hasSpeedSegment;
        #endregion
        
        [XmlElement("hasSpeedSegment", Order=0)]
        public tElementWithIDref[] hasSpeedSegment
        {
            get
            {
                return _hasSpeedSegment;
            }
            set
            {
                _hasSpeedSegment = value;
            }
        }
    }
    
    /// <summary>
    /// Speed profile that applies to a given train category.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("trainCategorySpeedProfile", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class TrainCategorySpeedProfile : SpeedProfile
    {
        #region Private fields
        private tElementWithIDref[] _appliesToCategory;
        #endregion
        
        [XmlElement("appliesToCategory", Order=0)]
        public tElementWithIDref[] appliesToCategory
        {
            get
            {
                return _appliesToCategory;
            }
            set
            {
                _appliesToCategory = value;
            }
        }
    }
    
    /// <summary>
    /// Linear structure for guiding cables.
    /// </summary>
    [XmlIncludeAttribute(typeof(CableTray))]
    [XmlIncludeAttribute(typeof(CableTrough))]
    [XmlIncludeAttribute(typeof(RaisedCableTrough))]
    [XmlIncludeAttribute(typeof(FreeCableRoute))]
    [XmlIncludeAttribute(typeof(FreeHangingCableRoute))]
    [XmlIncludeAttribute(typeof(CableBridge))]
    [XmlIncludeAttribute(typeof(CableTrench))]
    [XmlIncludeAttribute(typeof(TemporaryCableRoute))]
    [XmlIncludeAttribute(typeof(CablePipe))]
    [XmlIncludeAttribute(typeof(UnderTrackCrossing))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("cableRoute", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class CableRoute : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref _isLocatedAt;
        private MaterialTypes[] _isMadeOfMaterial;
        private tElementWithIDref[] _isUsedByParty;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref isLocatedAt
        {
            get
            {
                if ((_isLocatedAt == null))
                {
                    _isLocatedAt = new tElementWithIDref();
                }
                return _isLocatedAt;
            }
            set
            {
                _isLocatedAt = value;
            }
        }
        
        [XmlElement("isMadeOfMaterial", Order=1)]
        public MaterialTypes[] isMadeOfMaterial
        {
            get
            {
                return _isMadeOfMaterial;
            }
            set
            {
                _isMadeOfMaterial = value;
            }
        }
        
        [XmlElement("isUsedByParty", Order=2)]
        public tElementWithIDref[] isUsedByParty
        {
            get
            {
                return _isUsedByParty;
            }
            set
            {
                _isUsedByParty = value;
            }
        }
    }
    
    /// <summary>
    /// A list of material types.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum MaterialTypes
    {
        /// <summary>
        /// wood
        /// </summary>
        timber,
        /// <summary>
        /// beton
        /// </summary>
        concrete,
        /// <summary>
        /// steel sleepers are incompatible with track circuits
        /// </summary>
        steel,
        /// <summary>
        /// plastic
        /// DE: Kunststoff
        /// NL: kunststof
        /// FR: mati&#232;re plastique
        /// </summary>
        synthetic,
        other,
    }
    
    /// <summary>
    /// A tray, attached to a wall or ceiling in buildings or tunnels, for guiding cables.
    /// <ul>
    /// <li>de-DE: Kabelrinne</li>
    /// <li>nl-NL: kabelgoot</li>
    /// <li>fr-FR: goulotte de cablage</li>
    /// </ul>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("cableTray", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class CableTray : CableRoute
    {
    }
    
    /// <summary>
    /// Rigid Structure with a rectangular cross section for guiding cables. Typical materials are concrete or synthetics.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("cableTrough", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class CableTrough : CableRoute
    {
    }
    
    /// <summary>
    /// Cable trough supported by pillars.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("raisedCableTrough", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class RaisedCableTrough : CableRoute
    {
    }
    
    /// <summary>
    /// The cable lies on top of the earth.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("freeCableRoute", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class FreeCableRoute : CableRoute
    {
    }
    
    /// <summary>
    /// A pseudo cable duct where the cable hangs freely.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("freeHangingCableRoute", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class FreeHangingCableRoute : CableRoute
    {
    }
    
    /// <summary>
    /// Structure for guiding cables over track or other obstacle. Can be integral part of an existing bridge or viaduct.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("cableBridge", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class CableBridge : CableRoute
    {
    }
    
    /// <summary>
    /// A trench in the earth where the cable is buried.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("cableTrench", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class CableTrench : CableRoute
    {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("temporaryCableRoute", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class TemporaryCableRoute : CableRoute
    {
    }
    
    /// <summary>
    /// A pipe conduct for a cable, not being an UTX.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("cablePipe", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class CablePipe : CableRoute
    {
    }
    
    /// <summary>
    /// A cable duct for guiding cables crossing underneath the track. Mostly a pipe.
    /// UTX joins two cable pits, as per the cable duct topology.
    /// <ul>
    /// <li>en-UK: UTX</li>
    /// </ul>
    /// <ul>
    /// <li>de-DE: Kabelrohr</li>
    /// </ul>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("underTrackCrossing", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class UnderTrackCrossing : CableRoute
    {
    }
    
    /// <summary>
    /// The interlocking puts and proves assets in a given state for securing routes.
    /// The AssetAndState class is a generic pair of (asset, state). It inherits an identifier from BaseObject that other classes can refer to.
    /// This base class is abstract and must be specialised. The specialisation contains a reference to a track asset (signal, section, point, etc.) plus the given status of that asset.
    /// </summary>
    [XmlIncludeAttribute(typeof(LXandState))]
    [XmlIncludeAttribute(typeof(SectionAndVacancy))]
    [XmlIncludeAttribute(typeof(CompoundLogicalObjectAndState))]
    [XmlIncludeAttribute(typeof(MovableElementAndPosition))]
    [XmlIncludeAttribute(typeof(CrossingElementAndPosition))]
    [XmlIncludeAttribute(typeof(DerailerElementAndPosition))]
    [XmlIncludeAttribute(typeof(PointElementAndPosition))]
    [XmlIncludeAttribute(typeof(SignalAndMessage))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("assetAndState", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public abstract partial class AssetAndState : ConfiguredBaseObject
    {
        #region Private fields
        private ProvingTypes _proving;
        #endregion
        
        [XmlElement(Order=0)]
        public ProvingTypes proving
        {
            get
            {
                return _proving;
            }
            set
            {
                _proving = value;
            }
        }
    }
    
    /// <summary>
    /// Expresses whether/when the interlocking proves the desired state.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum ProvingTypes
    {
        /// <summary>
        /// The proving is continuous (typical situation).
        /// For expressions like "the derailer is continously proven in position nonDerailing".
        /// </summary>
        continuously,
        /// <summary>
        /// The condition is proven only during the activation.
        /// For expressions like "the interlocking opens signal S when point X is proven in position left but doesn't close the signal when the point is no longer proven"
        /// en-UK: when cleared.
        /// </summary>
        oneOff,
        /// <summary>
        /// Personnel must observe and acknowledge the state of the asset (because the system cannot technically acquire information from the asset)
        /// E.g. the driver reports that a point is in a given position, upon which the system issues a movemement authority.
        /// May be used for Track Ahead Free (TAF) where the driver acknowledges that a section ahead is vacant.
        /// </summary>
        staffAcknowledged,
        /// <summary>
        /// The condition is never proven, there is no need to detect the state of the asset.
        /// This allows stating expressions like "point X <b><i>should </i></b>be in position right" (A route requests the point position but if the point cannot take the requested position, then the route can be locked anyway).
        /// nl-NL: verzoekwissel.
        /// </summary>
        none,
    }
    
    /// <summary>
    /// A pair (level crossing<i><sub>i</sub></i>, state<i><sub>j</sub></i>)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("lXandState", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class LXandState : AssetAndState
    {
        #region Private fields
        private LxStateTypes _inState;
        private tElementWithIDref _refersToLx;
        #endregion
        
        [XmlElement(Order=0)]
        public LxStateTypes inState
        {
            get
            {
                return _inState;
            }
            set
            {
                _inState = value;
            }
        }
        
        [XmlElement(Order=1)]
        public tElementWithIDref refersToLx
        {
            get
            {
                if ((_refersToLx == null))
                {
                    _refersToLx = new tElementWithIDref();
                }
                return _refersToLx;
            }
            set
            {
                _refersToLx = value;
            }
        }
    }
    
    /// <summary>
    /// A pair (section, vacancy).
    /// Expresses whether a train detection section is vacant or occupied.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("sectionAndVacancy", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class SectionAndVacancy : AssetAndState
    {
        #region Private fields
        private SectionVacancyTypes _inVacancyState;
        private tElementWithIDref _refersToTdsSection;
        #endregion
        
        [XmlElement(Order=0)]
        public SectionVacancyTypes inVacancyState
        {
            get
            {
                return _inVacancyState;
            }
            set
            {
                _inVacancyState = value;
            }
        }
        
        [XmlElement(Order=1)]
        public tElementWithIDref refersToTdsSection
        {
            get
            {
                if ((_refersToTdsSection == null))
                {
                    _refersToTdsSection = new tElementWithIDref();
                }
                return _refersToTdsSection;
            }
            set
            {
                _refersToTdsSection = value;
            }
        }
    }
    
    /// <summary>
    /// List of states that a section can adopt.
    /// This list may be extended, e.g. ETCS Hybrid Level 3 defines some extra states.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum SectionVacancyTypes
    {
        occupied,
        vacant,
    }
    
    /// <summary>
    /// A pair (Compound Logical Object, boolean).
    /// Refer to the class <a href="$diagram://{E24D37F4-ED9C-4bb4-B771-E61C9C3AA834}"><font color="#0000ff"><u>Compound Logical Object</u></font></a>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("compoundLogicalObjectAndState", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class CompoundLogicalObjectAndState : AssetAndState
    {
        #region Private fields
        private tElementWithIDref _refersToCompoundLogicalObject;
        private bool _highOrLow;
        #endregion
        
        /// <summary>
        /// refers to Compound Logical Object
        /// </summary>
        [XmlElement(Order=0)]
        public tElementWithIDref refersToCompoundLogicalObject
        {
            get
            {
                if ((_refersToCompoundLogicalObject == null))
                {
                    _refersToCompoundLogicalObject = new tElementWithIDref();
                }
                return _refersToCompoundLogicalObject;
            }
            set
            {
                _refersToCompoundLogicalObject = value;
            }
        }
        
        /// <summary>
        /// High equates to 1=true means safe for train passage.
        /// Low equates to 0=false means unsafe for train passage.
        /// </summary>
        [XmlAttribute]
        public bool HighOrLow
        {
            get
            {
                return _highOrLow;
            }
            set
            {
                _highOrLow = value;
            }
        }
    }
    
    /// <summary>
    /// A pair (movable element, position).
    /// </summary>
    [XmlIncludeAttribute(typeof(CrossingElementAndPosition))]
    [XmlIncludeAttribute(typeof(DerailerElementAndPosition))]
    [XmlIncludeAttribute(typeof(PointElementAndPosition))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("movableElementAndPosition", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class MovableElementAndPosition : AssetAndState
    {
        #region Private fields
        private tElementWithIDref _refersToMovableElement;
        private bool _normal;
        private bool _preferred;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref refersToMovableElement
        {
            get
            {
                if ((_refersToMovableElement == null))
                {
                    _refersToMovableElement = new tElementWithIDref();
                }
                return _refersToMovableElement;
            }
            set
            {
                _refersToMovableElement = value;
            }
        }
        
        /// <summary>
        /// If normal=true: the given position is the <b>normal </b>position (the other position is the <b>reverse </b>position).
        /// If this attribute isn't given, then neither normal nor reverse position is defined.
        /// </summary>
        [XmlAttribute]
        public bool normal
        {
            get
            {
                return _normal;
            }
            set
            {
                _normal = value;
            }
        }
        
        /// <summary>
        /// If preferred=true: the given position is the <b>preferred </b>position (the position to which the movable element returns when no longer claimed by a route).
        /// If this attribute isn't given, then there is no preferred position.
        /// </summary>
        [XmlAttribute]
        public bool preferred
        {
            get
            {
                return _preferred;
            }
            set
            {
                _preferred = value;
            }
        }
    }
    
    /// <summary>
    /// A pair (movable crossing, state).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("crossingElementAndPosition", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class CrossingElementAndPosition : MovableElementAndPosition
    {
        #region Private fields
        private LeftRight _inPosition;
        #endregion
        
        [XmlElement(Order=0)]
        public LeftRight inPosition
        {
            get
            {
                return _inPosition;
            }
            set
            {
                _inPosition = value;
            }
        }
    }
    
    /// <summary>
    /// A pair (derailer element, position).
    /// 
    /// The derailer element is the movable part of a derailer and no model class strictly speaking.
    /// 
    /// Used for expressing concepts like: the derailer has to be in the non-derailing position.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("derailerElementAndPosition", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class DerailerElementAndPosition : MovableElementAndPosition
    {
        #region Private fields
        private DerailingPositionTypes _inPosition;
        #endregion
        
        [XmlElement(Order=0)]
        public DerailingPositionTypes inPosition
        {
            get
            {
                return _inPosition;
            }
            set
            {
                _inPosition = value;
            }
        }
    }
    
    /// <summary>
    /// A pair (point element, position).
    /// 
    /// The point element is the movable part of a point and no model class strictly speaking.
    /// 
    /// The positions that a point can adopt are left or right. Three-way points are rare and modelled as two consecutive points.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("pointElementAndPosition", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class PointElementAndPosition : MovableElementAndPosition
    {
        #region Private fields
        private LeftRight _inPosition;
        #endregion
        
        [XmlElement(Order=0)]
        public LeftRight inPosition
        {
            get
            {
                return _inPosition;
            }
            set
            {
                _inPosition = value;
            }
        }
    }
    
    /// <summary>
    /// A pair (signal, message).
    /// When instantiated, this provides a list of all possible (signal, message) pairs needed for constructing <u>signal plans</u>. Pairs that are not in the list are disallowed.
    /// 
    /// An entry in the list would be for instance "signal 1105 shows yellow flashing".
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("signalAndMessage", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class SignalAndMessage : AssetAndState
    {
        #region Private fields
        private tElementWithIDref _appliesToSignal;
        private tElementWithIDref _showsMessage;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref appliesToSignal
        {
            get
            {
                if ((_appliesToSignal == null))
                {
                    _appliesToSignal = new tElementWithIDref();
                }
                return _appliesToSignal;
            }
            set
            {
                _appliesToSignal = value;
            }
        }
        
        /// <summary>
        /// A signal transmits a meaningful message to the train. The message can vary with the aspect of the signal.
        /// </summary>
        [XmlElement(Order=1)]
        public tElementWithIDref showsMessage
        {
            get
            {
                if ((_showsMessage == null))
                {
                    _showsMessage = new tElementWithIDref();
                }
                return _showsMessage;
            }
            set
            {
                _showsMessage = value;
            }
        }
    }
    
    /// <summary>
    /// Installation that supplies electric power to signalling subsystems and devices.
    /// </summary>
    [XmlIncludeAttribute(typeof(VirtualPowerSupplyModule))]
    [XmlIncludeAttribute(typeof(PhysicalPowerSupplyModule))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("powerSupplyModule", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public abstract partial class PowerSupplyModule : ConfiguredBaseObject
    {
    }
    
    /// <summary>
    /// Fa&#231;ade for a power supplied by an object such as controller or level crossing.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("virtualPowerSupplyModule", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class VirtualPowerSupplyModule : PowerSupplyModule
    {
    }
    
    /// <summary>
    /// A physical power supply field module.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("physicalPowerSupplyModule", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class PhysicalPowerSupplyModule : PowerSupplyModule
    {
        #region Private fields
        private tElementWithIDref _isHousedIn;
        private PowerSupplyModuleType _isPsModuleType;
        #endregion
        
        /// <summary>
        /// The housing of the power supply module
        /// </summary>
        [XmlElement(Order=0)]
        public tElementWithIDref isHousedIn
        {
            get
            {
                if ((_isHousedIn == null))
                {
                    _isHousedIn = new tElementWithIDref();
                }
                return _isHousedIn;
            }
            set
            {
                _isHousedIn = value;
            }
        }
        
        [XmlElement(Order=1)]
        public PowerSupplyModuleType isPsModuleType
        {
            get
            {
                return _isPsModuleType;
            }
            set
            {
                _isPsModuleType = value;
            }
        }
    }
    
    /// <summary>
    /// de-DE: EV Modulart
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum PowerSupplyModuleType
    {
        autonomous,
        autonomousSmall,
        gridConnected,
        /// <summary>
        /// de-DE: PoP-V
        /// </summary>
        pointOfPower,
        other,
    }
    
    /// <summary>
    /// Area where train movements are controlled by a given RBC.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("rbcArea", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class RbcArea : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref _isControlledByRBC;
        private tElementWithIDref _isLocatedAt;
        private tElementWithIDref _isPartOf;
        private int _nid_c;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref isControlledByRBC
        {
            get
            {
                if ((_isControlledByRBC == null))
                {
                    _isControlledByRBC = new tElementWithIDref();
                }
                return _isControlledByRBC;
            }
            set
            {
                _isControlledByRBC = value;
            }
        }
        
        /// <summary>
        /// As defined by the "chalk marks on the rails" that outline the RBC area during the design.
        /// </summary>
        [XmlElement(Order=1)]
        public tElementWithIDref isLocatedAt
        {
            get
            {
                if ((_isLocatedAt == null))
                {
                    _isLocatedAt = new tElementWithIDref();
                }
                return _isLocatedAt;
            }
            set
            {
                _isLocatedAt = value;
            }
        }
        
        [XmlElement(Order=2)]
        public tElementWithIDref isPartOf
        {
            get
            {
                if ((_isPartOf == null))
                {
                    _isPartOf = new tElementWithIDref();
                }
                return _isPartOf;
            }
            set
            {
                _isPartOf = value;
            }
        }
        
        /// <summary>
        /// maps to NID_C <i>in the applicable ETCS baseline</i>.
        /// </summary>
        [XmlAttribute]
        public int nid_c
        {
            get
            {
                return _nid_c;
            }
            set
            {
                _nid_c = value;
            }
        }
    }
    
    /// <summary>
    /// Civil engineering object known in a (external) data base, e.g. an asset management system for bridges, tunnels and other rail infrastructure.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("civilStructure", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class CivilStructure : ConfiguredBaseObject
    {
    }
    
    /// <summary>
    /// A set of TDS sections for which the occupancy status can be overridden (a degraded mode operational procedure).
    /// The override procedure allows the signaller to open a signal that is closed because the TDS section reports (presumably false) occupied.
    /// fr-FR: autorisation d'annulation de transit.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("tdsOccupancyOverrideGroup", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class TdsOccupancyOverrideGroup : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref[] _appliesToTdsSectionOverridable;
        #endregion
        
        /// <summary>
        /// Allows grouping the TDS sections that can be overridden by one control button (SNCF approach).
        /// </summary>
        [XmlElement("appliesToTdsSectionOverridable", Order=0)]
        public tElementWithIDref[] appliesToTdsSectionOverridable
        {
            get
            {
                return _appliesToTdsSectionOverridable;
            }
            set
            {
                _appliesToTdsSectionOverridable = value;
            }
        }
    }
    
    /// <summary>
    /// A table of mutually conflicting routes, that is, routes that may never be simultaneously allocated, because they utilise common track elements (Iness definition).
    /// 
    /// Before setting the requested route, the interlocking will check whether any conflicting routes are allocated.
    /// 
    /// Specialised classes are available to store the reason of the conflict if needed.
    /// </summary>
    [XmlIncludeAttribute(typeof(RouteConvergencyConflict))]
    [XmlIncludeAttribute(typeof(RouteConflictOverlappingTvpSections))]
    [XmlIncludeAttribute(typeof(RouteConflictOverlap))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("conflictingRoute", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class ConflictingRoute : ConfiguredBaseObject
    {
        #region Private fields
        private RouteConflictTypes _hasConflictType;
        private tElementWithIDref[] _hasConflictsWithRoute;
        private tElementWithIDref _requestedRoute;
        #endregion
        
        /// <summary>
        /// Allows stating conditions under which shunting routes into a berthing track are conflicting.
        /// de-DE: Gegenfahrtausschluss von Rangierstra&#223;en in ein Inselgleis
        /// </summary>
        [XmlElement(Order=0)]
        public RouteConflictTypes hasConflictType
        {
            get
            {
                return _hasConflictType;
            }
            set
            {
                _hasConflictType = value;
            }
        }
        
        /// <summary>
        /// Use this relation to refer to routes that can't be called simultaneously with the requested route. Possibly, the list of conflicting routes isn't given explicitly and can be derived.
        /// </summary>
        [XmlElement("hasConflictsWithRoute", Order=1)]
        public tElementWithIDref[] hasConflictsWithRoute
        {
            get
            {
                return _hasConflictsWithRoute;
            }
            set
            {
                _hasConflictsWithRoute = value;
            }
        }
        
        /// <summary>
        /// This route has a conflict with other route(s).
        /// </summary>
        [XmlElement(Order=2)]
        public tElementWithIDref requestedRoute
        {
            get
            {
                if ((_requestedRoute == null))
                {
                    _requestedRoute = new tElementWithIDref();
                }
                return _requestedRoute;
            }
            set
            {
                _requestedRoute = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum RouteConflictTypes
    {
        /// <summary>
        /// The requested route always conflicts with the referred route(s).
        /// de-DE: Gegenfahrtausschluss besteht
        /// </summary>
        permanent,
        /// <summary>
        /// Conflict only exists when the berthing track is vacant, the shunting unit hasn't yet reached the berthing track.
        /// de-DE:  Inselgleis_frei: Gegenfahrtausschluss besteht, wenn die Gegenrangierfahrt das Inselgleis noch nicht belegt hat
        /// </summary>
        berthingTrackVacant,
        /// <summary>
        /// The routes never conflict.
        /// de-DE: Gegenfahrtausschluss besteht nicht.
        /// </summary>
        never,
    }
    
    /// <summary>
    /// Route B conflicts with route A because a train approaching on route A may violate the gauge.
    /// fr-FR: enclenchement de convergence.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("routeConvergencyConflict", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class RouteConvergencyConflict : ConflictingRoute
    {
        #region Private fields
        private tElementWithIDref _appliesToPointElementInPosition;
        private tElementWithIDref _appliesToSignal;
        private Duration _hasDurationForCheck;
        private tElementWithIDref _mustCheck;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref appliesToPointElementInPosition
        {
            get
            {
                if ((_appliesToPointElementInPosition == null))
                {
                    _appliesToPointElementInPosition = new tElementWithIDref();
                }
                return _appliesToPointElementInPosition;
            }
            set
            {
                _appliesToPointElementInPosition = value;
            }
        }
        
        [XmlElement(Order=1)]
        public tElementWithIDref appliesToSignal
        {
            get
            {
                if ((_appliesToSignal == null))
                {
                    _appliesToSignal = new tElementWithIDref();
                }
                return _appliesToSignal;
            }
            set
            {
                _appliesToSignal = value;
            }
        }
        
        /// <summary>
        /// The train is supposed to have stopped when the associated section is proven to have been occupied for at least this amount of time. Otherwise the train is supposed in approach and the conflicting route is kept closed.
        /// </summary>
        [XmlElement(Order=2)]
        public Duration hasDurationForCheck
        {
            get
            {
                if ((_hasDurationForCheck == null))
                {
                    _hasDurationForCheck = new Duration();
                }
                return _hasDurationForCheck;
            }
            set
            {
                _hasDurationForCheck = value;
            }
        }
        
        /// <summary>
        /// Conflicting only when the section has been occupied for a period of time shorter than a given duration.
        /// </summary>
        [XmlElement(Order=3)]
        public tElementWithIDref mustCheck
        {
            get
            {
                if ((_mustCheck == null))
                {
                    _mustCheck = new tElementWithIDref();
                }
                return _mustCheck;
            }
            set
            {
                _mustCheck = value;
            }
        }
    }
    
    /// <summary>
    /// The conflicting routes have TVP sections in common.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("routeConflictOverlappingTvpSections", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class RouteConflictOverlappingTvpSections : ConflictingRoute
    {
    }
    
    /// <summary>
    /// The route conflicts with overlap of the other route.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("routeConflictOverlap", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class RouteConflictOverlap : ConflictingRoute
    {
    }
    
    /// <summary>
    /// The list of field elements plus the interlocking in a control area.
    /// Also useful for defining areas under control of a substation or controller.
    /// <ul>
    /// <li>de-DE: Stellbereich</li>
    /// <li>NR: signal box </li>
    /// <li>ProRail: PPLG Primair Procesleidingsgebied</li>
    /// <li>SNCF: zone d'action d'un poste ou controleur d'objets</li>
    /// <li>RFI: zona, o limite, di batteria</li>
    /// </ul>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("controlArea", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class ControlArea : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref[] _containsTrackAsset;
        private tElementWithIDref _hasController;
        private tElementWithIDref _isLocatedAt;
        #endregion
        
        /// <summary>
        /// Track assets can be allocated to the control area.
        /// </summary>
        [XmlElement("containsTrackAsset", Order=0)]
        public tElementWithIDref[] containsTrackAsset
        {
            get
            {
                return _containsTrackAsset;
            }
            set
            {
                _containsTrackAsset = value;
            }
        }
        
        [XmlElement(Order=1)]
        public tElementWithIDref hasController
        {
            get
            {
                if ((_hasController == null))
                {
                    _hasController = new tElementWithIDref();
                }
                return _hasController;
            }
            set
            {
                _hasController = value;
            }
        }
        
        [XmlElement(Order=2)]
        public tElementWithIDref isLocatedAt
        {
            get
            {
                if ((_isLocatedAt == null))
                {
                    _isLocatedAt = new tElementWithIDref();
                }
                return _isLocatedAt;
            }
            set
            {
                _isLocatedAt = value;
            }
        }
    }
    
    /// <summary>
    /// The safety distance must be specialised into either an overlap or a dangerpoint. It carries common attributes and relations.
    /// </summary>
    [XmlIncludeAttribute(typeof(DistanceToDangerpoint))]
    [XmlIncludeAttribute(typeof(Overlap))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("safetyDistance", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public abstract partial class SafetyDistance : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref[] _endsAtLocation;
        private Gradient _hasDesignSlope;
        private Length _hasMinimalLength;
        private tElementWithIDref _hasTpDangerpoint;
        private tElementWithIDref _isLocatedAt;
        private tElementWithIDref[] _needsVacantSection;
        #endregion
        
        /// <summary>
        /// Reference to track asset(s) situated at the extremity of the overlap. The overlap is the track that is limited by the signal (at danger) and these track asset(s).
        /// </summary>
        [XmlElement("endsAtLocation", Order=0)]
        public tElementWithIDref[] endsAtLocation
        {
            get
            {
                return _endsAtLocation;
            }
            set
            {
                _endsAtLocation = value;
            }
        }
        
        /// <summary>
        /// Slope for which the safety distance has been designed.
        /// </summary>
        [XmlElement(Order=1)]
        public Gradient hasDesignSlope
        {
            get
            {
                if ((_hasDesignSlope == null))
                {
                    _hasDesignSlope = new Gradient();
                }
                return _hasDesignSlope;
            }
            set
            {
                _hasDesignSlope = value;
            }
        }
        
        /// <summary>
        /// Minimal length of the safety distance, measured from the route exit signal.
        /// </summary>
        [XmlElement(Order=2)]
        public Length hasMinimalLength
        {
            get
            {
                if ((_hasMinimalLength == null))
                {
                    _hasMinimalLength = new Length();
                }
                return _hasMinimalLength;
            }
            set
            {
                _hasMinimalLength = value;
            }
        }
        
        /// <summary>
        /// Reference to Train Protection dangerpoint
        /// </summary>
        [XmlElement(Order=3)]
        public tElementWithIDref hasTpDangerpoint
        {
            get
            {
                if ((_hasTpDangerpoint == null))
                {
                    _hasTpDangerpoint = new tElementWithIDref();
                }
                return _hasTpDangerpoint;
            }
            set
            {
                _hasTpDangerpoint = value;
            }
        }
        
        [XmlElement(Order=4)]
        public tElementWithIDref isLocatedAt
        {
            get
            {
                if ((_isLocatedAt == null))
                {
                    _isLocatedAt = new tElementWithIDref();
                }
                return _isLocatedAt;
            }
            set
            {
                _isLocatedAt = value;
            }
        }
        
        /// <summary>
        /// Section that must be proven vacant so that the safety distance is protected.
        /// </summary>
        [XmlElement("needsVacantSection", Order=5)]
        public tElementWithIDref[] needsVacantSection
        {
            get
            {
                return _needsVacantSection;
            }
            set
            {
                _needsVacantSection = value;
            }
        }
    }
    
    /// <summary>
    /// The dangerpoint defines the position beyond the exit signal up to where a train is likely to be safe.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("distanceToDangerpoint", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class DistanceToDangerpoint : SafetyDistance
    {
    }
    
    /// <summary>
    /// Overlap
    /// de-DE: Durchrutschweg (D-Weg)
    /// nl-NL: doorschietlengte
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("overlap", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class Overlap : SafetyDistance
    {
        #region Private fields
        private OverlapRelease[] _overlapRelease;
        private tElementWithIDref[] _requiresCrossingElementLockedInPosition;
        private tElementWithIDref[] _requiresDerailerLockedInPosition;
        private tElementWithIDref[] _requiresFlankProtection;
        private tElementWithIDref[] _requiresMovableElementLocked;
        private tElementWithIDref[] _requiresPointElementLockedInPosition;
        private Speed _speedRestrictionInApproach;
        private Speed _speedThroughOverlap;
        #endregion
        
        [XmlElement("overlapRelease", Order=0)]
        public OverlapRelease[] overlapRelease
        {
            get
            {
                return _overlapRelease;
            }
            set
            {
                _overlapRelease = value;
            }
        }
        
        [XmlElement("requiresCrossingElementLockedInPosition", Order=1)]
        public tElementWithIDref[] requiresCrossingElementLockedInPosition
        {
            get
            {
                return _requiresCrossingElementLockedInPosition;
            }
            set
            {
                _requiresCrossingElementLockedInPosition = value;
            }
        }
        
        [XmlElement("requiresDerailerLockedInPosition", Order=2)]
        public tElementWithIDref[] requiresDerailerLockedInPosition
        {
            get
            {
                return _requiresDerailerLockedInPosition;
            }
            set
            {
                _requiresDerailerLockedInPosition = value;
            }
        }
        
        /// <summary>
        /// Used in those cases that rules are insufficient to describe flank protection
        /// DB: not filled in because implemented by supplier by rules.
        /// NR: only special cases are described.
        /// </summary>
        [XmlElement("requiresFlankProtection", Order=3)]
        public tElementWithIDref[] requiresFlankProtection
        {
            get
            {
                return _requiresFlankProtection;
            }
            set
            {
                _requiresFlankProtection = value;
            }
        }
        
        /// <summary>
        /// Applies to points and crossings only, not to derailers.
        /// The position of the referenced point can be derived from the corresponding LinearLocation of the Overlap.
        /// </summary>
        [XmlElement("requiresMovableElementLocked", Order=4)]
        public tElementWithIDref[] requiresMovableElementLocked
        {
            get
            {
                return _requiresMovableElementLocked;
            }
            set
            {
                _requiresMovableElementLocked = value;
            }
        }
        
        /// <summary>
        /// Reference to a point element in a given position, proving types are available.
        /// </summary>
        [XmlElement("requiresPointElementLockedInPosition", Order=5)]
        public tElementWithIDref[] requiresPointElementLockedInPosition
        {
            get
            {
                return _requiresPointElementLockedInPosition;
            }
            set
            {
                _requiresPointElementLockedInPosition = value;
            }
        }
        
        /// <summary>
        /// Speed restriction in approach to the closed exit signal. Typically depends on the length of overlap and is calculated according to national rules and regulations.
        /// </summary>
        [XmlElement(Order=6)]
        public Speed speedRestrictionInApproach
        {
            get
            {
                if ((_speedRestrictionInApproach == null))
                {
                    _speedRestrictionInApproach = new Speed();
                }
                return _speedRestrictionInApproach;
            }
            set
            {
                _speedRestrictionInApproach = value;
            }
        }
        
        /// <summary>
        /// Permitted speed for trains travelling through the overlap.
        /// </summary>
        [XmlElement(Order=7)]
        public Speed speedThroughOverlap
        {
            get
            {
                if ((_speedThroughOverlap == null))
                {
                    _speedThroughOverlap = new Speed();
                }
                return _speedThroughOverlap;
            }
            set
            {
                _speedThroughOverlap = value;
            }
        }
    }
    
    /// <summary>
    /// Unlocks the elements in the overlap.
    /// The IL may release the overlap
    /// <ul>
    /// <li>When the approaching train <i>has plausibly stopped</i><u> </u>before the exit signal. In this case, the overlap release is delayed by a given duration: the timer is triggered when the train occupies or vacates a given section.</li>
    /// <li>When the approaching train <i>positively confirms to have stopped</i> (e.g. by means of an ETCS position report). In this case, the release is immediate or with a short delay.</li>
    /// </ul>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("overlapRelease", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class OverlapRelease
    {
        #region Private fields
        private Duration _hasOverlapReleaseDelay;
        private tElementWithIDref _isTriggeredBy;
        private OverlapReleaseConditionTypes _overlapReleaseCondition;
        #endregion
        
        /// <summary>
        /// Time that expires before the interlocking releases the overlap.
        /// DE: D-Weg-Aufl&#246;severz&#246;gerung
        /// </summary>
        [XmlElement(Order=0)]
        public Duration hasOverlapReleaseDelay
        {
            get
            {
                if ((_hasOverlapReleaseDelay == null))
                {
                    _hasOverlapReleaseDelay = new Duration();
                }
                return _hasOverlapReleaseDelay;
            }
            set
            {
                _hasOverlapReleaseDelay = value;
            }
        }
        
        /// <summary>
        /// The section that triggers the (delayed) release of the overlap. German Zielgleis, UK berthing track.
        /// Condition for release is found in overlap release condition.
        /// </summary>
        [XmlElement(Order=1)]
        public tElementWithIDref isTriggeredBy
        {
            get
            {
                if ((_isTriggeredBy == null))
                {
                    _isTriggeredBy = new tElementWithIDref();
                }
                return _isTriggeredBy;
            }
            set
            {
                _isTriggeredBy = value;
            }
        }
        
        [XmlElement(Order=2)]
        public OverlapReleaseConditionTypes overlapReleaseCondition
        {
            get
            {
                return _overlapReleaseCondition;
            }
            set
            {
                _overlapReleaseCondition = value;
            }
        }
    }
    
    /// <summary>
    /// Defines when the overlap release timer starts.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum OverlapReleaseConditionTypes
    {
        /// <summary>
        /// Overlap release timer starts when train occupies the TVP section, normally the berthing track.
        /// DE: Zielgleis
        /// </summary>
        startTimerUponOccupation,
        /// <summary>
        /// Overlap release timer starts when train clears the TVP section.
        /// Typically used in reversing scenarios.
        /// </summary>
        startTimerAfterVacating,
        /// <summary>
        /// Trackside releases the overlap only after train is proven in standstill by ETCS system or by a manual command.
        /// DE: Aufloesung nach Stillstand des Zuges, z.B. ETCS
        /// </summary>
        trainInitiatedTrigger,
    }
    
    /// <summary>
    /// The activation process can depend on the route. This allows delaying level crossing closure depending on the route, or preventing the level crossing from closing if the route leads the train away from it.
    /// 
    /// de-DE: Fahrstra&#223;enabh&#228;ngige Wirksamkeitsschaltung
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("levelCrossingRouteRelation", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class LevelCrossingRouteRelation : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref[] _appliesForRoute;
        private tElementWithIDref _appliesToLxActivation;
        private tElementWithIDref[] _getsInputsFromTriggerAssignments;
        #endregion
        
        [XmlElement("appliesForRoute", Order=0)]
        public tElementWithIDref[] appliesForRoute
        {
            get
            {
                return _appliesForRoute;
            }
            set
            {
                _appliesForRoute = value;
            }
        }
        
        [XmlElement(Order=1)]
        public tElementWithIDref appliesToLxActivation
        {
            get
            {
                if ((_appliesToLxActivation == null))
                {
                    _appliesToLxActivation = new tElementWithIDref();
                }
                return _appliesToLxActivation;
            }
            set
            {
                _appliesToLxActivation = value;
            }
        }
        
        /// <summary>
        /// The process of activating a LX can depend on a series of inputs from trigger assignments. These inputs enter into a state machine.
        /// The state machine entry point is the LevelCrossingActivation.
        /// </summary>
        [XmlElement("getsInputsFromTriggerAssignments", Order=2)]
        public tElementWithIDref[] getsInputsFromTriggerAssignments
        {
            get
            {
                return _getsInputsFromTriggerAssignments;
            }
            set
            {
                _getsInputsFromTriggerAssignments = value;
            }
        }
    }
    
    /// <summary>
    /// de-DE: Kante in DB ETCS Topologie
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("etcsEdge", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class EtcsEdge : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref _hasNodeA;
        private tElementWithIDref _hasNodeB;
        private tElementWithIDref[] _mapsToRtmEdge;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref hasNodeA
        {
            get
            {
                if ((_hasNodeA == null))
                {
                    _hasNodeA = new tElementWithIDref();
                }
                return _hasNodeA;
            }
            set
            {
                _hasNodeA = value;
            }
        }
        
        [XmlElement(Order=1)]
        public tElementWithIDref hasNodeB
        {
            get
            {
                if ((_hasNodeB == null))
                {
                    _hasNodeB = new tElementWithIDref();
                }
                return _hasNodeB;
            }
            set
            {
                _hasNodeB = value;
            }
        }
        
        /// <summary>
        /// An edge in DB topology maps to up to three edges in EULYNX' RTM linear elements.
        /// </summary>
        [XmlElement("mapsToRtmEdge", Order=2)]
        public tElementWithIDref[] mapsToRtmEdge
        {
            get
            {
                return _mapsToRtmEdge;
            }
            set
            {
                _mapsToRtmEdge = value;
            }
        }
    }
    
    /// <summary>
    /// Swinging overlap (see glossary entry).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("swingingOverlap", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class SwingingOverlap : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref _appliesToOverlap;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref appliesToOverlap
        {
            get
            {
                if ((_appliesToOverlap == null))
                {
                    _appliesToOverlap = new tElementWithIDref();
                }
                return _appliesToOverlap;
            }
            set
            {
                _appliesToOverlap = value;
            }
        }
    }
    
    /// <summary>
    /// ETCS marker board.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("etcsSignal", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class EtcsSignal : ConfiguredBaseObject
    {
        #region Private fields
        private EtcsEndOfAuthority _hasEoA;
        private tElementWithIDref _hasEtcsDangerpoint;
        private tElementWithIDref _refersToSignal;
        #endregion
        
        [XmlElement(Order=0)]
        public EtcsEndOfAuthority hasEoA
        {
            get
            {
                if ((_hasEoA == null))
                {
                    _hasEoA = new EtcsEndOfAuthority();
                }
                return _hasEoA;
            }
            set
            {
                _hasEoA = value;
            }
        }
        
        [XmlElement(Order=1)]
        public tElementWithIDref hasEtcsDangerpoint
        {
            get
            {
                if ((_hasEtcsDangerpoint == null))
                {
                    _hasEtcsDangerpoint = new tElementWithIDref();
                }
                return _hasEtcsDangerpoint;
            }
            set
            {
                _hasEtcsDangerpoint = value;
            }
        }
        
        /// <summary>
        /// Refers to signal
        /// </summary>
        [XmlElement(Order=2)]
        public tElementWithIDref refersToSignal
        {
            get
            {
                if ((_refersToSignal == null))
                {
                    _refersToSignal = new tElementWithIDref();
                }
                return _refersToSignal;
            }
            set
            {
                _refersToSignal = value;
            }
        }
    }
    
    /// <summary>
    /// ETCS End Of Authority (EoA) marks the end of an ETCS Movement Authority.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("etcsEndOfAuthority", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class EtcsEndOfAuthority
    {
        #region Private fields
        private Length _hasDistanceInRearOfSignal;
        private EtcsDangerpoint _hasEtcsDangerpoint;
        private EtcsOverlap _hasOverlap;
        private Speed _hasPermittedSpeed;
        #endregion
        
        /// <summary>
        /// The ETCS EoA is located at a given distance in rear of the signal.
        /// </summary>
        [XmlElement(Order=0)]
        public Length hasDistanceInRearOfSignal
        {
            get
            {
                if ((_hasDistanceInRearOfSignal == null))
                {
                    _hasDistanceInRearOfSignal = new Length();
                }
                return _hasDistanceInRearOfSignal;
            }
            set
            {
                _hasDistanceInRearOfSignal = value;
            }
        }
        
        /// <summary>
        /// Maps to D_DP.
        /// </summary>
        [XmlElement(Order=1)]
        public EtcsDangerpoint hasEtcsDangerpoint
        {
            get
            {
                if ((_hasEtcsDangerpoint == null))
                {
                    _hasEtcsDangerpoint = new EtcsDangerpoint();
                }
                return _hasEtcsDangerpoint;
            }
            set
            {
                _hasEtcsDangerpoint = value;
            }
        }
        
        [XmlElement(Order=2)]
        public EtcsOverlap hasOverlap
        {
            get
            {
                if ((_hasOverlap == null))
                {
                    _hasOverlap = new EtcsOverlap();
                }
                return _hasOverlap;
            }
            set
            {
                _hasOverlap = value;
            }
        }
        
        /// <summary>
        /// The speed limit at the EoA.
        /// If not given, the value is considered unknown.
        /// Known as V_EMA in ETCS 3.5.0; formerly known as V_LOA.
        /// </summary>
        [XmlElement(Order=3)]
        public Speed hasPermittedSpeed
        {
            get
            {
                if ((_hasPermittedSpeed == null))
                {
                    _hasPermittedSpeed = new Speed();
                }
                return _hasPermittedSpeed;
            }
            set
            {
                _hasPermittedSpeed = value;
            }
        }
    }
    
    /// <summary>
    /// A stretch of track beyond EoA.
    /// The RBC can release the ETCS overlap when it deems that the approaching train is slow enough such that overshoot is sufficiently unlikely.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("etcsOverlap", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class EtcsOverlap
    {
        #region Private fields
        private tElementWithIDref _endsAtLocation;
        private EtcsTrainCategorySpeed _hasAllowedTrainCategorySpeed;
        private Duration _hasOverlapTimer;
        private tElementWithIDref _hasTimerStartLocation;
        private bool _automaticReleaseSpeedCalculation;
        #endregion
        
        /// <summary>
        /// Maps to D_OL.
        /// </summary>
        [XmlElement(Order=0)]
        public tElementWithIDref endsAtLocation
        {
            get
            {
                if ((_endsAtLocation == null))
                {
                    _endsAtLocation = new tElementWithIDref();
                }
                return _endsAtLocation;
            }
            set
            {
                _endsAtLocation = value;
            }
        }
        
        /// <summary>
        /// The train in this category is allowed to approach the end of overlap with this release speed.
        /// </summary>
        [XmlElement(Order=1)]
        public EtcsTrainCategorySpeed hasAllowedTrainCategorySpeed
        {
            get
            {
                if ((_hasAllowedTrainCategorySpeed == null))
                {
                    _hasAllowedTrainCategorySpeed = new EtcsTrainCategorySpeed();
                }
                return _hasAllowedTrainCategorySpeed;
            }
            set
            {
                _hasAllowedTrainCategorySpeed = value;
            }
        }
        
        /// <summary>
        /// Maps to T_OL. If not given, overlap has infinite validity.
        /// </summary>
        [XmlElement(Order=2)]
        public Duration hasOverlapTimer
        {
            get
            {
                if ((_hasOverlapTimer == null))
                {
                    _hasOverlapTimer = new Duration();
                }
                return _hasOverlapTimer;
            }
            set
            {
                _hasOverlapTimer = value;
            }
        }
        
        /// <summary>
        /// Maps to D_STARTOL. The location of the timer start is in advance of the EoA.
        /// </summary>
        [XmlElement(Order=3)]
        public tElementWithIDref hasTimerStartLocation
        {
            get
            {
                if ((_hasTimerStartLocation == null))
                {
                    _hasTimerStartLocation = new tElementWithIDref();
                }
                return _hasTimerStartLocation;
            }
            set
            {
                _hasTimerStartLocation = value;
            }
        }
        
        /// <summary>
        /// True: the release speed is calculated automatically.
        /// False: the allowed train category speed provides the release speed.
        /// </summary>
        [XmlAttribute]
        public bool automaticReleaseSpeedCalculation
        {
            get
            {
                return _automaticReleaseSpeedCalculation;
            }
            set
            {
                _automaticReleaseSpeedCalculation = value;
            }
        }
    }
    
    /// <summary>
    /// A (physical) key to unlock a device.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("key", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class Key : ConfiguredBaseObject
    {
        #region Private fields
        private string _code;
        private string _group;
        #endregion
        
        /// <summary>
        /// DE: Schl&#252;sselbartform (one letter)
        /// FR: e.g. digit-letter-digit combination
        /// </summary>
        [XmlAttribute]
        public string code
        {
            get
            {
                return _code;
            }
            set
            {
                _code = value;
            }
        }
        
        /// <summary>
        /// Additional classification of the key type.
        /// DE: Schl&#252;sselgruppe
        /// </summary>
        [XmlAttribute]
        public string group
        {
            get
            {
                return _group;
            }
            set
            {
                _group = value;
            }
        }
    }
    
    /// <summary>
    /// <u>Illumination </u>refers to signals or individual signal frames that are lit by an external light source.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("illumination", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class Illumination : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref _appliesToSignal;
        private tElementWithIDref _appliesToSignalFrame;
        private IlluminationTypes _isOfIlluminationType;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref appliesToSignal
        {
            get
            {
                if ((_appliesToSignal == null))
                {
                    _appliesToSignal = new tElementWithIDref();
                }
                return _appliesToSignal;
            }
            set
            {
                _appliesToSignal = value;
            }
        }
        
        /// <summary>
        /// Lighting of individual signal frames.
        /// </summary>
        [XmlElement(Order=1)]
        public tElementWithIDref appliesToSignalFrame
        {
            get
            {
                if ((_appliesToSignalFrame == null))
                {
                    _appliesToSignalFrame = new tElementWithIDref();
                }
                return _appliesToSignalFrame;
            }
            set
            {
                _appliesToSignalFrame = value;
            }
        }
        
        /// <summary>
        /// The type of external lighting.
        /// </summary>
        [XmlElement(Order=2)]
        public IlluminationTypes isOfIlluminationType
        {
            get
            {
                return _isOfIlluminationType;
            }
            set
            {
                _isOfIlluminationType = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum IlluminationTypes
    {
        /// <summary>
        /// Aka flood lit.
        /// </summary>
        frontLit,
        /// <summary>
        /// Aka internally lit
        /// </summary>
        backLit,
        reflectorised,
    }
    
    /// <summary>
    /// Relation between the signal, e.g. protection signal, or sign, and the level crossing activation or track crossing.
    /// The signal/sign is specific to level crossing, e.g.
    /// <ul>
    /// <li>en-UK: whistle</li>
    /// <li>fr-FR: siffler</li>
    /// </ul>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("levelCrossingSignalRelation", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class LevelCrossingSignalRelation : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref _appliesToLxActivation;
        private tElementWithIDref _appliesToSignal;
        private tElementWithIDref _appliesToTrackCrossing;
        private Length _hasDistanceToCrossing;
        private Duration _hasTimeToTrackCrossing;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref appliesToLxActivation
        {
            get
            {
                if ((_appliesToLxActivation == null))
                {
                    _appliesToLxActivation = new tElementWithIDref();
                }
                return _appliesToLxActivation;
            }
            set
            {
                _appliesToLxActivation = value;
            }
        }
        
        /// <summary>
        /// refers to the signal or sign related to the track crossing
        /// </summary>
        [XmlElement(Order=1)]
        public tElementWithIDref appliesToSignal
        {
            get
            {
                if ((_appliesToSignal == null))
                {
                    _appliesToSignal = new tElementWithIDref();
                }
                return _appliesToSignal;
            }
            set
            {
                _appliesToSignal = value;
            }
        }
        
        /// <summary>
        /// The signal refers to a track crossing.
        /// </summary>
        [XmlElement(Order=2)]
        public tElementWithIDref appliesToTrackCrossing
        {
            get
            {
                if ((_appliesToTrackCrossing == null))
                {
                    _appliesToTrackCrossing = new tElementWithIDref();
                }
                return _appliesToTrackCrossing;
            }
            set
            {
                _appliesToTrackCrossing = value;
            }
        }
        
        /// <summary>
        /// To store the distance between signal/sign and track crossing.
        /// </summary>
        [XmlElement(Order=3)]
        public Length hasDistanceToCrossing
        {
            get
            {
                if ((_hasDistanceToCrossing == null))
                {
                    _hasDistanceToCrossing = new Length();
                }
                return _hasDistanceToCrossing;
            }
            set
            {
                _hasDistanceToCrossing = value;
            }
        }
        
        /// <summary>
        /// To store the driving time to the track crossing.
        /// </summary>
        [XmlElement(Order=4)]
        public Duration hasTimeToTrackCrossing
        {
            get
            {
                if ((_hasTimeToTrackCrossing == null))
                {
                    _hasTimeToTrackCrossing = new Duration();
                }
                return _hasTimeToTrackCrossing;
            }
            set
            {
                _hasTimeToTrackCrossing = value;
            }
        }
    }
    
    /// <summary>
    /// A physical section of conductor rail that is placed to the left, right or centre.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("conductorRail", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class ConductorRail : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref _isLocatedAt;
        private tElementWithIDref _isPartOf;
        private LeftRightCentreTypes[] _isPlacedAt;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref isLocatedAt
        {
            get
            {
                if ((_isLocatedAt == null))
                {
                    _isLocatedAt = new tElementWithIDref();
                }
                return _isLocatedAt;
            }
            set
            {
                _isLocatedAt = value;
            }
        }
        
        [XmlElement(Order=1)]
        public tElementWithIDref isPartOf
        {
            get
            {
                if ((_isPartOf == null))
                {
                    _isPartOf = new tElementWithIDref();
                }
                return _isPartOf;
            }
            set
            {
                _isPartOf = value;
            }
        }
        
        [XmlElement("isPlacedAt", Order=2)]
        public LeftRightCentreTypes[] isPlacedAt
        {
            get
            {
                return _isPlacedAt;
            }
            set
            {
                _isPlacedAt = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum LeftRightCentreTypes
    {
        left,
        right,
        /// <summary>
        /// position of the
        /// </summary>
        centre,
    }
    
    /// <summary>
    /// List of TVP sections required for flank protection of a given route.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("sectionsForFlankProtection", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class SectionsForFlankProtection : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref[] _appliesToRoute;
        private tElementWithIDref[] _requiresSectionVacant;
        #endregion
        
        [XmlElement("appliesToRoute", Order=0)]
        public tElementWithIDref[] appliesToRoute
        {
            get
            {
                return _appliesToRoute;
            }
            set
            {
                _appliesToRoute = value;
            }
        }
        
        [XmlElement("requiresSectionVacant", Order=1)]
        public tElementWithIDref[] requiresSectionVacant
        {
            get
            {
                return _requiresSectionVacant;
            }
            set
            {
                _requiresSectionVacant = value;
            }
        }
    }
    
    /// <summary>
    /// A diagnostic collector is configured to acquire data points.
    /// The device-specific diagnostic configuration typically is an XML representing the OPC-UA address space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("diagnosticsOpcUaConfiguration", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class DiagnosticsOpcUaConfiguration : ConfiguredBaseObject
    {
    }
    
    /// <summary>
    /// Installation for block working on open line, stretching from the last controlled signal to the next station.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("blockSystem", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class BlockSystem : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref _appliesToTrack;
        private BlockElement _hasBlockElementA;
        private BlockElement _hasBlockElementB;
        private LineBlockWorkingTypes _hasBlockWorkingType;
        private bool _needsGalvanicSeparation;
        private BlockCircuitryTypes _usesBlockCircuitry;
        #endregion
        
        /// <summary>
        /// Designation of the track where the block working system applies.
        /// </summary>
        [XmlElement(Order=0)]
        public tElementWithIDref appliesToTrack
        {
            get
            {
                if ((_appliesToTrack == null))
                {
                    _appliesToTrack = new tElementWithIDref();
                }
                return _appliesToTrack;
            }
            set
            {
                _appliesToTrack = value;
            }
        }
        
        /// <summary>
        /// The block system has an extremity A.
        /// </summary>
        [XmlElement(Order=1)]
        public BlockElement hasBlockElementA
        {
            get
            {
                if ((_hasBlockElementA == null))
                {
                    _hasBlockElementA = new BlockElement();
                }
                return _hasBlockElementA;
            }
            set
            {
                _hasBlockElementA = value;
            }
        }
        
        /// <summary>
        /// The line fitted for block working has a block element B in the neighbouring yard.
        /// No such block element B exists if the line is a dead end.
        /// </summary>
        [XmlElement(Order=2)]
        public BlockElement hasBlockElementB
        {
            get
            {
                if ((_hasBlockElementB == null))
                {
                    _hasBlockElementB = new BlockElement();
                }
                return _hasBlockElementB;
            }
            set
            {
                _hasBlockElementB = value;
            }
        }
        
        /// <summary>
        /// The types of block working
        /// </summary>
        [XmlElement(Order=3)]
        public LineBlockWorkingTypes hasBlockWorkingType
        {
            get
            {
                return _hasBlockWorkingType;
            }
            set
            {
                _hasBlockWorkingType = value;
            }
        }
        
        /// <summary>
        /// <ul>
        /// <li>True: EMC interference is likely such that additional protective galvanic separation is needed. </li>
        /// </ul>
        /// <ul>
        /// <li>False: no extra protective measures needed.</li>
        /// </ul>
        /// </summary>
        [XmlElement(Order=4)]
        public bool needsGalvanicSeparation
        {
            get
            {
                return _needsGalvanicSeparation;
            }
            set
            {
                _needsGalvanicSeparation = value;
            }
        }
        
        /// <summary>
        /// The type of wiring circuit that the block system uses.
        /// SNCF: not used because the type of block element provides equivalent information.
        /// </summary>
        [XmlElement(Order=5)]
        public BlockCircuitryTypes usesBlockCircuitry
        {
            get
            {
                return _usesBlockCircuitry;
            }
            set
            {
                _usesBlockCircuitry = value;
            }
        }
    }
    
    /// <summary>
    /// The extremity of the block system. A track that is equipped with a block system has two matching block elements.
    /// de-DE: Element am Ende einer Blockstrecke/Blockanlage.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("blockElement", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class BlockElement : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref _hasBlockClearanceTrigger;
        private tElementWithIDref _hasLineBlockParameters;
        private TrainRearConfirmation _hasTrainRearConfirmation;
        private tElementWithIDref _refersToBlockEntrySignal;
        private string _type;
        #endregion
        
        /// <summary>
        /// The equipment that reports passage of a train. This supports the clearance-proving of the block. Used for open lines without further technical equipment.
        /// de-DE: Schaltmittel zur R&#228;umungspr&#252;fung (E-Feld)
        /// </summary>
        [XmlElement(Order=0)]
        public tElementWithIDref hasBlockClearanceTrigger
        {
            get
            {
                if ((_hasBlockClearanceTrigger == null))
                {
                    _hasBlockClearanceTrigger = new tElementWithIDref();
                }
                return _hasBlockClearanceTrigger;
            }
            set
            {
                _hasBlockClearanceTrigger = value;
            }
        }
        
        /// <summary>
        /// The properties of the line, viewed from the block element.
        /// </summary>
        [XmlElement(Order=1)]
        public tElementWithIDref hasLineBlockParameters
        {
            get
            {
                if ((_hasLineBlockParameters == null))
                {
                    _hasLineBlockParameters = new tElementWithIDref();
                }
                return _hasLineBlockParameters;
            }
            set
            {
                _hasLineBlockParameters = value;
            }
        }
        
        /// <summary>
        /// A switch or button that is activated to confirm passage of the the rear of the train.
        /// </summary>
        [XmlElement(Order=2)]
        public TrainRearConfirmation hasTrainRearConfirmation
        {
            get
            {
                if ((_hasTrainRearConfirmation == null))
                {
                    _hasTrainRearConfirmation = new TrainRearConfirmation();
                }
                return _hasTrainRearConfirmation;
            }
            set
            {
                _hasTrainRearConfirmation = value;
            }
        }
        
        /// <summary>
        /// Reference to the fictitious signal where the train leaves the station and enters the block.
        /// de-DE: Ausfahrziel Strecke, A-Feld
        /// </summary>
        [XmlElement(Order=3)]
        public tElementWithIDref refersToBlockEntrySignal
        {
            get
            {
                if ((_refersToBlockEntrySignal == null))
                {
                    _refersToBlockEntrySignal = new tElementWithIDref();
                }
                return _refersToBlockEntrySignal;
            }
            set
            {
                _refersToBlockEntrySignal = value;
            }
        }
        
        /// <summary>
        /// The construction type of technology used for the block. Typically relays, auto-block, block instrument, key or token block.
        /// de-DE: Bauform
        /// </summary>
        [XmlElement(Order=4)]
        public string type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }
    }
    
    /// <summary>
    /// A switch or button allowing line-side staff to confirm that the rear of the train has cleared the block section.
    /// de-DE: Zugschlussmeldung
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("trainRearConfirmation", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class TrainRearConfirmation : LocalOperationUiElement
    {
    }
    
    /// <summary>
    /// A user interface component such as a button, knob, switch, lever, indicator, lamp, buzzer or pull cord that is mounted in a local operation device and that fulfills a given function.
    /// The UI element interacts with (the state of) a signal or movable element (to request a movement).
    /// </summary>
    [XmlIncludeAttribute(typeof(LocalOperationUiSwitch))]
    [XmlIncludeAttribute(typeof(LocalOperationUiButton))]
    [XmlIncludeAttribute(typeof(LocalOperationUiLever))]
    [XmlIncludeAttribute(typeof(LocalOperationUiIndicator))]
    [XmlIncludeAttribute(typeof(TrainRearConfirmation))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("localOperationUiElement", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class LocalOperationUiElement : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref _affectsMovableComponent;
        private tElementWithIDref _affectsMovableElement;
        private tElementWithIDref _affectsSignal;
        #endregion
        
        /// <summary>
        /// The UI element interacts with a movable component
        /// E.g. SNCF can in some cases operate individual blade and lock (verrou)
        /// </summary>
        [XmlElement(Order=0)]
        public tElementWithIDref affectsMovableComponent
        {
            get
            {
                if ((_affectsMovableComponent == null))
                {
                    _affectsMovableComponent = new tElementWithIDref();
                }
                return _affectsMovableComponent;
            }
            set
            {
                _affectsMovableComponent = value;
            }
        }
        
        [XmlElement(Order=1)]
        public tElementWithIDref affectsMovableElement
        {
            get
            {
                if ((_affectsMovableElement == null))
                {
                    _affectsMovableElement = new tElementWithIDref();
                }
                return _affectsMovableElement;
            }
            set
            {
                _affectsMovableElement = value;
            }
        }
        
        [XmlElement(Order=2)]
        public tElementWithIDref affectsSignal
        {
            get
            {
                if ((_affectsSignal == null))
                {
                    _affectsSignal = new tElementWithIDref();
                }
                return _affectsSignal;
            }
            set
            {
                _affectsSignal = value;
            }
        }
    }
    
    /// <summary>
    /// A user interface element of type switch.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("localOperationUiSwitch", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class LocalOperationUiSwitch : LocalOperationUiElement
    {
    }
    
    /// <summary>
    /// A user interface element of type button.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("localOperationUiButton", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class LocalOperationUiButton : LocalOperationUiElement
    {
    }
    
    /// <summary>
    /// The type of lever can be specialised.
    /// E.g. SNCF has levers that act differently depending on the phase of the movement of the lever.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("localOperationUiLever", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class LocalOperationUiLever : LocalOperationUiElement
    {
    }
    
    /// <summary>
    /// A user interface element; visual or audible indicator, i.e. lamp or buzzer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("localOperationUiIndicator", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class LocalOperationUiIndicator : LocalOperationUiElement
    {
    }
    
    /// <summary>
    /// The type of block working. Must concur with the type of block element.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum LineBlockWorkingTypes
    {
        /// <summary>
        /// Dual track, each track is equipped for bidirectional traffic.
        /// <ul>
        /// <li>de-DE: zweigleisig, Gleiswechselbetrieb (GWB)</li>
        /// <li>fr-FR: voie banalis&#233;e</li>
        /// <li>it-IT: linea banalizato</li>
        /// </ul>
        /// </summary>
        dualTrackBidirectional,
        /// <summary>
        /// Single-track operation equipped for bidirectional operation.
        /// </summary>
        singleTrackBidirectional,
        /// <summary>
        /// Simplified procedural movement authority without technical block protection.
        /// de-DE: Zugleitbetrieb
        /// </summary>
        proceduralWorking,
        /// <summary>
        /// Single-track operation equipped for one-directional operation.
        /// May be used in rare cases for describing a run-round loop at the end of a line.
        /// de-DE: eingleisig
        /// </summary>
        singleTrack,
        /// <summary>
        /// Dual-track operation.
        /// Each track is used in one direction only.
        /// de-DE: zweigleisig
        /// </summary>
        dualTrack,
        /// <summary>
        /// Dead-end track that is claimed by a single train and then remains claimed until it returns.
        /// de-DE: Stichstreckenblock
        /// </summary>
        deadEnd,
        other,
    }
    
    /// <summary>
    /// The number of wires that carry the block information. This characterises the block.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum BlockCircuitryTypes
    {
        _3wire,
        /// <summary>
        /// nl-NL: 4-draads APB
        /// </summary>
        _4wire,
        _6wire,
        _8wire,
        _9wire,
        other,
    }
    
    /// <summary>
    /// Allows refining the function of a balise group, e.g. "L2 balise group".
    /// Typically refined in the national domain.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("baliseGroupFunction", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class BaliseGroupFunction : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref _implementedByEtcsBaliseGroup;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref implementedByEtcsBaliseGroup
        {
            get
            {
                if ((_implementedByEtcsBaliseGroup == null))
                {
                    _implementedByEtcsBaliseGroup = new tElementWithIDref();
                }
                return _implementedByEtcsBaliseGroup;
            }
            set
            {
                _implementedByEtcsBaliseGroup = value;
            }
        }
    }
    
    /// <summary>
    /// Part of the interlocking area that staff can control locally, notably for directing shunting movements. The procedure of handing over control between signalman and local staff is supported by switches, keys and indicators on a local operating device.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("localOperatingArea", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class LocalOperatingArea : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref[] _containsLoz;
        #endregion
        
        /// <summary>
        /// The local operating area contains one or more zones.
        /// </summary>
        [XmlElement("containsLoz", Order=0)]
        public tElementWithIDref[] containsLoz
        {
            get
            {
                return _containsLoz;
            }
            set
            {
                _containsLoz = value;
            }
        }
    }
    
    /// <summary>
    /// A route <i>body </i>is a path with an entry- and exit. The path is a closed topological subset of the network, without any branches. It maps to a linear entity on the RTM topology.
    /// 
    /// The positions of points that the train encounters in the route body, either facing or trailing, <i>can</i> be given. Although they can be derived algorithmically, providing these positions is useful for validation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("routeBody", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class RouteBody : ConfiguredBaseObject
    {
        #region Private fields
        private RouteEntry _hasEntry;
        private RouteExit _hasExit;
        private tElementWithIDref _refersToRtmRouteBody;
        private tElementWithIDref[] _requiresMovableElementInPositionInDepartureTrack;
        private tElementWithIDref[] _requiresMovableElementInPositionInRouteBody;
        #endregion
        
        [XmlElement(Order=0)]
        public RouteEntry hasEntry
        {
            get
            {
                if ((_hasEntry == null))
                {
                    _hasEntry = new RouteEntry();
                }
                return _hasEntry;
            }
            set
            {
                _hasEntry = value;
            }
        }
        
        [XmlElement(Order=1)]
        public RouteExit hasExit
        {
            get
            {
                if ((_hasExit == null))
                {
                    _hasExit = new RouteExit();
                }
                return _hasExit;
            }
            set
            {
                _hasExit = value;
            }
        }
        
        /// <summary>
        /// A EULYNX route body maps 1:1 to a RTM route body.
        /// </summary>
        [XmlElement(Order=2)]
        public tElementWithIDref refersToRtmRouteBody
        {
            get
            {
                if ((_refersToRtmRouteBody == null))
                {
                    _refersToRtmRouteBody = new tElementWithIDref();
                }
                return _refersToRtmRouteBody;
            }
            set
            {
                _refersToRtmRouteBody = value;
            }
        }
        
        /// <summary>
        /// A movable element in the departure track may have to be locked in a given position.
        /// Position of a movable element in the departure track. Typically a point that acquires the given position as soon as the route is called.
        /// </summary>
        [XmlElement("requiresMovableElementInPositionInDepartureTrack", Order=3)]
        public tElementWithIDref[] requiresMovableElementInPositionInDepartureTrack
        {
            get
            {
                return _requiresMovableElementInPositionInDepartureTrack;
            }
            set
            {
                _requiresMovableElementInPositionInDepartureTrack = value;
            }
        }
        
        /// <summary>
        /// The sequence of <i>all </i>points and their positions [left,right] encountered when travelling the route from entry to exit signal. Points outside the route body (situated in the overlap or providing flank protection) are excluded.
        /// Note : slip points are considered as two back-to-back points thus removing ambiguity.
        /// </summary>
        [XmlElement("requiresMovableElementInPositionInRouteBody", Order=4)]
        public tElementWithIDref[] requiresMovableElementInPositionInRouteBody
        {
            get
            {
                return _requiresMovableElementInPositionInRouteBody;
            }
            set
            {
                _requiresMovableElementInPositionInRouteBody = value;
            }
        }
    }
    
    /// <summary>
    /// A (virtual) signal that protects the entry of the route.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("routeEntry", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class RouteEntry : RouteExtremity
    {
        #region Private fields
        private tElementWithIDref _hasGroupMainSignal;
        #endregion
        
        /// <summary>
        /// pointer to group signal.
        /// </summary>
        [XmlElement(Order=0)]
        public tElementWithIDref hasGroupMainSignal
        {
            get
            {
                if ((_hasGroupMainSignal == null))
                {
                    _hasGroupMainSignal = new tElementWithIDref();
                }
                return _hasGroupMainSignal;
            }
            set
            {
                _hasGroupMainSignal = value;
            }
        }
    }
    
    /// <summary>
    /// A route extremity is an abstraction of either a route entry or a route exit.
    /// </summary>
    [XmlIncludeAttribute(typeof(RouteEntry))]
    [XmlIncludeAttribute(typeof(RouteExit))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("routeExtremity", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public abstract partial class RouteExtremity : BaseObject1
    {
        #region Private fields
        private tElementWithIDref _isAssociatedWithSignal;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref isAssociatedWithSignal
        {
            get
            {
                if ((_isAssociatedWithSignal == null))
                {
                    _isAssociatedWithSignal = new tElementWithIDref();
                }
                return _isAssociatedWithSignal;
            }
            set
            {
                _isAssociatedWithSignal = value;
            }
        }
    }
    
    /// <summary>
    /// An exit signal that prevents a train from entering track beyond the route body.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("routeExit", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class RouteExit : RouteExtremity
    {
    }
    
    /// <summary>
    /// A component of the user interface for local operation of a level crossing.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("levelCrossingLocalOperationUiElement", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class LevelCrossingLocalOperationUiElement : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref _affectsLxActivation;
        private tElementWithIDref _affectsLxDeactivation;
        private tElementWithIDref _affectsLxSystem;
        private tElementWithIDref _appliesToLocalOperationUiElement;
        #endregion
        
        /// <summary>
        /// expresses e.g. that a button activates a level crossing
        /// </summary>
        [XmlElement(Order=0)]
        public tElementWithIDref affectsLxActivation
        {
            get
            {
                if ((_affectsLxActivation == null))
                {
                    _affectsLxActivation = new tElementWithIDref();
                }
                return _affectsLxActivation;
            }
            set
            {
                _affectsLxActivation = value;
            }
        }
        
        /// <summary>
        /// expresses e.g. that a button deactivates a level crossing
        /// </summary>
        [XmlElement(Order=1)]
        public tElementWithIDref affectsLxDeactivation
        {
            get
            {
                if ((_affectsLxDeactivation == null))
                {
                    _affectsLxDeactivation = new tElementWithIDref();
                }
                return _affectsLxDeactivation;
            }
            set
            {
                _affectsLxDeactivation = value;
            }
        }
        
        /// <summary>
        /// the LX system that the switch component works on
        /// </summary>
        [XmlElement(Order=2)]
        public tElementWithIDref affectsLxSystem
        {
            get
            {
                if ((_affectsLxSystem == null))
                {
                    _affectsLxSystem = new tElementWithIDref();
                }
                return _affectsLxSystem;
            }
            set
            {
                _affectsLxSystem = value;
            }
        }
        
        [XmlElement(Order=3)]
        public tElementWithIDref appliesToLocalOperationUiElement
        {
            get
            {
                if ((_appliesToLocalOperationUiElement == null))
                {
                    _appliesToLocalOperationUiElement = new tElementWithIDref();
                }
                return _appliesToLocalOperationUiElement;
            }
            set
            {
                _appliesToLocalOperationUiElement = value;
            }
        }
    }
    
    /// <summary>
    /// A route that is composed of two or more elementary routes. The elementary routes are commonly referred to as atomic routes or subroutes.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("compositeRoute", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class CompositeRoute : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref[] _hasSubroutes;
        #endregion
        
        /// <summary>
        /// It is the responsibility of the data designer to ensure subroutes have compatible types and properties.
        /// For instance, a composite call-on route mixing shunting and main routes would create a conflict.
        /// </summary>
        [XmlElement("hasSubroutes", Order=0)]
        public tElementWithIDref[] hasSubroutes
        {
            get
            {
                return _hasSubroutes;
            }
            set
            {
                _hasSubroutes = value;
            }
        }
    }
    
    /// <summary>
    /// TVP section(s) proven clear to open the route entry signal. This check allows to send a second train into one signalling section.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("conditionSectionsClear", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class ConditionSectionsClear : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref _affectsRoute;
        private tElementWithIDref[] _provesSection;
        private bool _overrideable;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref affectsRoute
        {
            get
            {
                if ((_affectsRoute == null))
                {
                    _affectsRoute = new tElementWithIDref();
                }
                return _affectsRoute;
            }
            set
            {
                _affectsRoute = value;
            }
        }
        
        [XmlElement("provesSection", Order=1)]
        public tElementWithIDref[] provesSection
        {
            get
            {
                return _provesSection;
            }
            set
            {
                _provesSection = value;
            }
        }
        
        /// <summary>
        /// If true, the signaller can override the proven clear condition. If false, the signaller cannot override the condition and the IL will refuse to open the signal.
        /// </summary>
        [XmlAttribute]
        public bool overrideable
        {
            get
            {
                return _overrideable;
            }
            set
            {
                _overrideable = value;
            }
        }
    }
    
    /// <summary>
    /// To prevent a signal from closing too early. The signal is replaced only after "<i>condition section occupied" </i>and "<i>last wheel" </i>apply.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("nonReplacement", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class NonReplacement : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref _appliesToRoute;
        private tElementWithIDref[] _appliesToSection;
        private bool _lastWheel;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref appliesToRoute
        {
            get
            {
                if ((_appliesToRoute == null))
                {
                    _appliesToRoute = new tElementWithIDref();
                }
                return _appliesToRoute;
            }
            set
            {
                _appliesToRoute = value;
            }
        }
        
        /// <summary>
        /// When this section is occupied, the entry signal is not replaced (=closed).
        /// </summary>
        [XmlElement("appliesToSection", Order=1)]
        public tElementWithIDref[] appliesToSection
        {
            get
            {
                return _appliesToSection;
            }
            set
            {
                _appliesToSection = value;
            }
        }
        
        /// <summary>
        /// False (default): the entry signal is replaced when the first wheel enters the next section.
        /// 
        /// True: the entry signal is replaced only when the last wheel of the train has cleared the non-replacement section.
        /// </summary>
        [XmlAttribute]
        public bool lastWheel
        {
            get
            {
                return _lastWheel;
            }
            set
            {
                _lastWheel = value;
            }
        }
    }
    
    /// <summary>
    /// The distance to a protected location that the TPS needs to halt a train.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("tpsProtectionDistance", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class TpsProtectionDistance : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref _appliesToSignal;
        private Length _value;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref appliesToSignal
        {
            get
            {
                if ((_appliesToSignal == null))
                {
                    _appliesToSignal = new tElementWithIDref();
                }
                return _appliesToSignal;
            }
            set
            {
                _appliesToSignal = value;
            }
        }
        
        /// <summary>
        /// The value of the TPS protection distance.
        /// </summary>
        [XmlElement(Order=1)]
        public Length value
        {
            get
            {
                if ((_value == null))
                {
                    _value = new Length();
                }
                return _value;
            }
            set
            {
                _value = value;
            }
        }
    }
    
    /// <summary>
    /// Where vehicles or pedestrians cross railway tracks <b><i>at the same level</i></b>.
    /// This class allows naming the street, road or path according to national rules.
    /// The track crossing can, <i>but need not</i>, be protected by a level crossing system.
    /// </summary>
    [XmlIncludeAttribute(typeof(FootpathCrossing))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("trackCrossing", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class TrackCrossing : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref[] _isLocatedAt;
        private string _streetName;
        private string _type;
        #endregion
        
        /// <summary>
        /// The spot location where the decking and the rail tracks cross.
        /// There can be multiple locations because more than one rail track can be crossed.
        /// </summary>
        [XmlElement("isLocatedAt", Order=0)]
        public tElementWithIDref[] isLocatedAt
        {
            get
            {
                return _isLocatedAt;
            }
            set
            {
                _isLocatedAt = value;
            }
        }
        
        /// <summary>
        /// Name of the street, road or path that the train tracks cross.
        /// </summary>
        [XmlAttribute]
        public string streetName
        {
            get
            {
                return _streetName;
            }
            set
            {
                _streetName = value;
            }
        }
        
        /// <summary>
        /// To be specialised in national domains or refined at a later stage.
        /// </summary>
        [XmlAttribute]
        public string type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }
    }
    
    /// <summary>
    /// A footpath crossing the railway.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("footpathCrossing", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class FootpathCrossing : TrackCrossing
    {
    }
    
    /// <summary>
    /// Assigns a trigger to vehicle detection.
    /// The trigger is typically a Vehicle Passage Detector. It can also be an approach zone, either all sections or only the extremity (fr-FR: zone d'approche).
    /// Even if no train detection is given, a condition can still apply.
    /// de-DE: Schaltmittelzuordnung
    /// en-UK: strike-in or strike-out; the trigger is closely associated with vehicle detection
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("triggerAssignment", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class TriggerAssignment : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref _clearsSignal;
        private tElementWithIDref[] _closesSignal;
        private Condition _hasCondition;
        private tElementWithIDref _isAssignedToTdsSection;
        private tElementWithIDref _isAssignedToVpDetector;
        private string _functionDescription;
        #endregion
        
        /// <summary>
        /// The detection of a vehicle passage can clear a signal.
        /// For instance: in shunting areas, a treadle can clear the shunting signal.
        /// </summary>
        [XmlElement(Order=0)]
        public tElementWithIDref clearsSignal
        {
            get
            {
                if ((_clearsSignal == null))
                {
                    _clearsSignal = new tElementWithIDref();
                }
                return _clearsSignal;
            }
            set
            {
                _clearsSignal = value;
            }
        }
        
        /// <summary>
        /// Condition that forces the signal to close.
        /// This extra condition typically complements another condition that may close the signal earlier.
        /// The extra condition can be signal passed at danger (SPAD). In this case, more than one signal in the vicinity can be closed as a protective measure.
        /// de-DE: zweites Haltfallkriterium
        /// fr-FR: AXF Auxiliaire de Fermeture
        /// </summary>
        [XmlElement("closesSignal", Order=1)]
        public tElementWithIDref[] closesSignal
        {
            get
            {
                return _closesSignal;
            }
            set
            {
                _closesSignal = value;
            }
        }
        
        [XmlElement(Order=2)]
        public Condition hasCondition
        {
            get
            {
                if ((_hasCondition == null))
                {
                    _hasCondition = new Condition();
                }
                return _hasCondition;
            }
            set
            {
                _hasCondition = value;
            }
        }
        
        /// <summary>
        /// The trigger is assigned to train detection: a TDS section.
        /// </summary>
        [XmlElement(Order=3)]
        public tElementWithIDref isAssignedToTdsSection
        {
            get
            {
                if ((_isAssignedToTdsSection == null))
                {
                    _isAssignedToTdsSection = new tElementWithIDref();
                }
                return _isAssignedToTdsSection;
            }
            set
            {
                _isAssignedToTdsSection = value;
            }
        }
        
        /// <summary>
        /// The trigger is assigned to vehicle detection: a VP detector.
        /// </summary>
        [XmlElement(Order=4)]
        public tElementWithIDref isAssignedToVpDetector
        {
            get
            {
                if ((_isAssignedToVpDetector == null))
                {
                    _isAssignedToVpDetector = new tElementWithIDref();
                }
                return _isAssignedToVpDetector;
            }
            set
            {
                _isAssignedToVpDetector = value;
            }
        }
        
        /// <summary>
        /// Describes the triggering action, e.g. <i> "Activate the level crossing at km x.y"</i>. The description is subject to national rules and regulations.
        /// </summary>
        [XmlAttribute]
        public string functionDescription
        {
            get
            {
                return _functionDescription;
            }
            set
            {
                _functionDescription = value;
            }
        }
    }
    
    /// <summary>
    /// Set of timers and counters that apply to the RaSTA upper communication layers.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("rastaPropertySet", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class RastaPropertySet : ConfiguredBaseObject
    {
        #region Private fields
        private EulynxSciTypes[] _appliesToSci;
        private RedundancyLayerConfiguration _hasRedundancyLayerConfiguration;
        private SafetyRetransmissionLayerConfiguration _hasSafetyRetransmissionLayerConfiguration;
        #endregion
        
        /// <summary>
        /// Applies to interface interlocking with this system.
        /// </summary>
        [XmlElement("appliesToSci", Order=0)]
        public EulynxSciTypes[] appliesToSci
        {
            get
            {
                return _appliesToSci;
            }
            set
            {
                _appliesToSci = value;
            }
        }
        
        [XmlElement(Order=1)]
        public RedundancyLayerConfiguration hasRedundancyLayerConfiguration
        {
            get
            {
                if ((_hasRedundancyLayerConfiguration == null))
                {
                    _hasRedundancyLayerConfiguration = new RedundancyLayerConfiguration();
                }
                return _hasRedundancyLayerConfiguration;
            }
            set
            {
                _hasRedundancyLayerConfiguration = value;
            }
        }
        
        [XmlElement(Order=2)]
        public SafetyRetransmissionLayerConfiguration hasSafetyRetransmissionLayerConfiguration
        {
            get
            {
                if ((_hasSafetyRetransmissionLayerConfiguration == null))
                {
                    _hasSafetyRetransmissionLayerConfiguration = new SafetyRetransmissionLayerConfiguration();
                }
                return _hasSafetyRetransmissionLayerConfiguration;
            }
            set
            {
                _hasSafetyRetransmissionLayerConfiguration = value;
            }
        }
    }
    
    /// <summary>
    /// List of standard communication interfaces for carrying process data.
    /// SCI: Standard Communication Interface
    /// DPI: Data Process Interface
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum EulynxSciTypes
    {
        /// <summary>
        /// Interface to light signal
        /// </summary>
        ls,
        /// <summary>
        /// Interface to external level crossing system
        /// </summary>
        lx,
        /// <summary>
        /// Interface to subsystem level crossing
        /// </summary>
        lc,
        /// <summary>
        /// Interface to point.
        /// </summary>
        p,
        /// <summary>
        /// Interface to train detection system.
        /// </summary>
        tds,
        /// <summary>
        /// Interface to (binary) input/output
        /// </summary>
        io,
        /// <summary>
        /// Interface to Radio Block Centre.
        /// </summary>
        rbc,
        /// <summary>
        /// Interface to adjacent interlocking system
        /// </summary>
        ils,
        /// <summary>
        /// Interface to Command &amp; Control system.
        /// </summary>
        cc,
        /// <summary>
        /// Interface to trackworker safety system
        /// </summary>
        tss,
    }
    
    /// <summary>
    /// Configuration parameters of the EULYNX RaSTA redundancy layer. Table 7.3
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("redundancyLayerConfiguration", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class RedundancyLayerConfiguration
    {
        #region Private fields
        private CheckCodeTypes _hasCheckCode;
        private RedundancyMessageCounters _hasMessagesCounters;
        private Duration _hasTseq;
        private int _nPhysicalChannels;
        #endregion
        
        [XmlElement(Order=0)]
        public CheckCodeTypes hasCheckCode
        {
            get
            {
                return _hasCheckCode;
            }
            set
            {
                _hasCheckCode = value;
            }
        }
        
        [XmlElement(Order=1)]
        public RedundancyMessageCounters hasMessagesCounters
        {
            get
            {
                if ((_hasMessagesCounters == null))
                {
                    _hasMessagesCounters = new RedundancyMessageCounters();
                }
                return _hasMessagesCounters;
            }
            set
            {
                _hasMessagesCounters = value;
            }
        }
        
        /// <summary>
        /// Time period indicating how long a message is buffered that was received outside the sequence (DeferTime, clause 6.6).
        /// </summary>
        [XmlElement(Order=2)]
        public Duration hasTseq
        {
            get
            {
                if ((_hasTseq == null))
                {
                    _hasTseq = new Duration();
                }
                return _hasTseq;
            }
            set
            {
                _hasTseq = value;
            }
        }
        
        /// <summary>
        /// Number of physical transport channels (clause 6.1). Default is 2.
        /// </summary>
        [XmlElement(Order=3)]
        public int nPhysicalChannels
        {
            get
            {
                return _nPhysicalChannels;
            }
            set
            {
                _nPhysicalChannels = value;
            }
        }
    }
    
    /// <summary>
    /// Check code configuration parameter of the redundancy layer (Clause 6.3.6).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum CheckCodeTypes
    {
        /// <summary>
        /// None
        /// </summary>
        optionA,
        /// <summary>
        /// CRC32 with polynomial 0x EE5B42FD
        /// </summary>
        optionB,
        /// <summary>
        /// CRC32 with polynomial 0x 1EDC6F41
        /// </summary>
        optionC,
        /// <summary>
        /// CRC16 with polynomial 0x 1021
        /// </summary>
        optionD,
        /// <summary>
        /// CRC16 with polynomial 0x 8005
        /// </summary>
        optionE,
    }
    
    /// <summary>
    /// Counters for controlling the flow of messages in the redundancy layer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("redundancyMessageCounters", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class RedundancyMessageCounters
    {
        #region Private fields
        private int _ndeferQueueSize;
        private int _ndiagnosis;
        #endregion
        
        /// <summary>
        /// Maximum number of entries in the waiting queue deferQueue. Clause 6.6.
        /// </summary>
        [XmlElement(Order=0)]
        public int ndeferQueueSize
        {
            get
            {
                return _ndeferQueueSize;
            }
            set
            {
                _ndeferQueueSize = value;
            }
        }
        
        /// <summary>
        /// Measurement window for diagnosis reports of the redundancy layer. Clause 6.6.3.2.
        /// </summary>
        [XmlElement(Order=1)]
        public int ndiagnosis
        {
            get
            {
                return _ndiagnosis;
            }
            set
            {
                _ndiagnosis = value;
            }
        }
    }
    
    /// <summary>
    /// Configuration parameters of the EULYNX RaSTA Safety/Retransmission layer, Table 23.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("safetyRetransmissionLayerConfiguration", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class SafetyRetransmissionLayerConfiguration
    {
        #region Private fields
        private SafetyMessageCounters _hasMessageCounters;
        private Duration _hasTh;
        private Duration _hasTmax;
        private RaStaSafetyCode _usesSafetyCode;
        #endregion
        
        [XmlElement(Order=0)]
        public SafetyMessageCounters hasMessageCounters
        {
            get
            {
                if ((_hasMessageCounters == null))
                {
                    _hasMessageCounters = new SafetyMessageCounters();
                }
                return _hasMessageCounters;
            }
            set
            {
                _hasMessageCounters = value;
            }
        }
        
        /// <summary>
        /// Time period for sending heartbeats. The interval between successive messages proving that a communication link is still alive.
        /// </summary>
        [XmlElement(Order=1)]
        public Duration hasTh
        {
            get
            {
                if ((_hasTh == null))
                {
                    _hasTh = new Duration();
                }
                return _hasTh;
            }
            set
            {
                _hasTh = value;
            }
        }
        
        /// <summary>
        /// Maximum accepted age of a message.
        /// </summary>
        [XmlElement(Order=2)]
        public Duration hasTmax
        {
            get
            {
                if ((_hasTmax == null))
                {
                    _hasTmax = new Duration();
                }
                return _hasTmax;
            }
            set
            {
                _hasTmax = value;
            }
        }
        
        /// <summary>
        /// RaSTA safety code according to &#167;5.3.11. Option 1 is to give no safety code. Option 2 is to preset the lower half of the MD4, option 3 is to preset lower and upper half of the MD4.
        /// </summary>
        [XmlElement(Order=3)]
        public RaStaSafetyCode usesSafetyCode
        {
            get
            {
                if ((_usesSafetyCode == null))
                {
                    _usesSafetyCode = new RaStaSafetyCode();
                }
                return _usesSafetyCode;
            }
            set
            {
                _usesSafetyCode = value;
            }
        }
    }
    
    /// <summary>
    /// Counters for controlling the flow of messages in the safety and retransmission layer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("safetyMessageCounters", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class SafetyMessageCounters
    {
        #region Private fields
        private int _mwa;
        private int _ndiagWindow;
        private int _nmaxPaket;
        private int _nsendmax;
        #endregion
        
        /// <summary>
        /// Maximum number of received, unconfirmed messages.
        /// This value shall be less than Nsendmax.
        /// </summary>
        [XmlElement(Order=0)]
        public int mwa
        {
            get
            {
                return _mwa;
            }
            set
            {
                _mwa = value;
            }
        }
        
        /// <summary>
        /// Defines the size of the measurement window for the channel quality measurement.
        /// </summary>
        [XmlElement(Order=1)]
        public int ndiagWindow
        {
            get
            {
                return _ndiagWindow;
            }
            set
            {
                _ndiagWindow = value;
            }
        }
        
        /// <summary>
        /// The maximum packetization factor states how many messages of one user may at maximum be combined to form a message of the safety and retransmission layer.
        /// </summary>
        [XmlElement(Order=2)]
        public int nmaxPaket
        {
            get
            {
                return _nmaxPaket;
            }
            set
            {
                _nmaxPaket = value;
            }
        }
        
        /// <summary>
        /// Maximum number of messages which the communication party may send without receiving a confirmation. This value is exchanged when the connection between the two communication parties is established and can be interpreted as the minimum size of the receive buffer.
        /// </summary>
        [XmlElement(Order=3)]
        public int nsendmax
        {
            get
            {
                return _nsendmax;
            }
            set
            {
                _nsendmax = value;
            }
        }
    }
    
    /// <summary>
    /// The safety code is a byte array that ensures the integrity of a RaSTA message.
    /// This class matches option 2 of &#167;5.3.11 with a configurable lower half of the MD4 8 bytes as a string.
    /// </summary>
    [XmlIncludeAttribute(typeof(RaStaFullSafetyCode))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("raStaSafetyCode", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class RaStaSafetyCode
    {
        #region Private fields
        private string _lowerHalfMD4;
        #endregion
        
        /// <summary>
        /// The lower half, i.e. the first 8 bytes of the MD4 as specified in RFC 1320 with a configurable initial value.
        /// Given as a string, e.g.  83 f0 d0 52 40 6b f4 92
        /// </summary>
        [XmlElement(Order=0)]
        public string lowerHalfMD4
        {
            get
            {
                return _lowerHalfMD4;
            }
            set
            {
                _lowerHalfMD4 = value;
            }
        }
    }
    
    /// <summary>
    /// The safety code is a byte array that ensures the integrity of a RaSTA message.
    /// The full MD4 as specified in RFC 1320 with a configurable initial value.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("raStaFullSafetyCode", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class RaStaFullSafetyCode : RaStaSafetyCode
    {
        #region Private fields
        private string _upperHalfMD4;
        #endregion
        
        /// <summary>
        /// The upper half, i.e. the last 8 bytes of the MD4 as specified in RFC 1320 with a configurable initial value.
        /// Given as a string, e.g. f8 9f 8d 1e 9b 89 c9 8d
        /// </summary>
        [XmlElement(Order=0)]
        public string upperHalfMD4
        {
            get
            {
                return _upperHalfMD4;
            }
            set
            {
                _upperHalfMD4 = value;
            }
        }
    }
    
    /// <summary>
    /// Allows passengers to board and alight from trains. Has one or more edges and passenger accesses.
    /// The platform designation is usually composed of the names of the platform edges,<i> </i>e.g. <i>Platform 3 and 4</i>. Sometimes, a name like <i>Platform A with tracks 102 and 103</i> may occur.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("platformFacility", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class PlatformFacility : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref[] _containsPlatformEdge;
        private PlatformAccess[] _hasPlatformAccess;
        #endregion
        
        /// <summary>
        /// A platform has one or more edges. It is possible to manage the edges and platforms separately (NR approach) or state that the edge is an integral part of the platform (DB approach).
        /// </summary>
        [XmlElement("containsPlatformEdge", Order=0)]
        public tElementWithIDref[] containsPlatformEdge
        {
            get
            {
                return _containsPlatformEdge;
            }
            set
            {
                _containsPlatformEdge = value;
            }
        }
        
        [XmlElement("hasPlatformAccess", Order=1)]
        public PlatformAccess[] hasPlatformAccess
        {
            get
            {
                return _hasPlatformAccess;
            }
            set
            {
                _hasPlatformAccess = value;
            }
        }
    }
    
    /// <summary>
    /// Means of platform access. Relevant for positioning operational stops.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("platformAccess", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class PlatformAccess : ConfiguredBaseObject
    {
        #region Private fields
        private PlatformAccessTypes _isOfPlatformAccessType;
        private PlatformEdgeAccessPoint[] _leadsPassengersToPlatformEdgeAccessPoint;
        private bool _isPrimaryAccess;
        #endregion
        
        [XmlElement(Order=0)]
        public PlatformAccessTypes isOfPlatformAccessType
        {
            get
            {
                return _isOfPlatformAccessType;
            }
            set
            {
                _isOfPlatformAccessType = value;
            }
        }
        
        [XmlElement("leadsPassengersToPlatformEdgeAccessPoint", Order=1)]
        public PlatformEdgeAccessPoint[] leadsPassengersToPlatformEdgeAccessPoint
        {
            get
            {
                return _leadsPassengersToPlatformEdgeAccessPoint;
            }
            set
            {
                _leadsPassengersToPlatformEdgeAccessPoint = value;
            }
        }
        
        /// <summary>
        /// When true, this is the primary platform access. Otherwise, secondary access.
        /// </summary>
        [XmlAttribute]
        public bool isPrimaryAccess
        {
            get
            {
                return _isPrimaryAccess;
            }
            set
            {
                _isPrimaryAccess = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum PlatformAccessTypes
    {
        staircase,
        lift,
        ramp,
        /// <summary>
        /// a track crossing at the level of the rails, for accessing a platform situated between two tracks.
        /// DE: Resi, Reisendensicherungsanlage (von Bahnpersonal gesperrt und in Stellwerkslogik eingespeist).
        /// UK: barrow crossing (not in use anymore)
        /// </summary>
        walkway,
        escalator,
        other,
    }
    
    /// <summary>
    /// ETCS Eurobalise telegram as specified in subset-026.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("etcsTelegram", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class EtcsTelegram : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref[] _containsPacket;
        private tElementWithIDref[] _informsAboutEtcsMarker;
        private tElementWithIDref _isSentByEtcsBalise;
        private int _m_mcount;
        #endregion
        
        /// <summary>
        /// an ETCS telegram contains a number of packets. During early design, one may not want to provide the packets.
        /// </summary>
        [XmlElement("containsPacket", Order=0)]
        public tElementWithIDref[] containsPacket
        {
            get
            {
                return _containsPacket;
            }
            set
            {
                _containsPacket = value;
            }
        }
        
        /// <summary>
        /// Reference from ETCS telegram to ETCS marker(s).
        /// The telegram informs about the marker, e.g . gradient, speed or national value.
        /// </summary>
        [XmlElement("informsAboutEtcsMarker", Order=1)]
        public tElementWithIDref[] informsAboutEtcsMarker
        {
            get
            {
                return _informsAboutEtcsMarker;
            }
            set
            {
                _informsAboutEtcsMarker = value;
            }
        }
        
        [XmlElement(Order=2)]
        public tElementWithIDref isSentByEtcsBalise
        {
            get
            {
                if ((_isSentByEtcsBalise == null))
                {
                    _isSentByEtcsBalise = new tElementWithIDref();
                }
                return _isSentByEtcsBalise;
            }
            set
            {
                _isSentByEtcsBalise = value;
            }
        }
        
        /// <summary>
        /// ETCS variable M_MCOUNT
        /// </summary>
        [XmlAttribute]
        public int m_mcount
        {
            get
            {
                return _m_mcount;
            }
            set
            {
                _m_mcount = value;
            }
        }
    }
    
    /// <summary>
    /// Marks a <i>spot location</i> from where a quality like a speed, gradient or ATP control changes.  A<i> physical track side signal</i> may be present at this location. This signal need not be positioned exactly where the quality changes.
    /// </summary>
    [XmlIncludeAttribute(typeof(SpeedChangeMarker))]
    [XmlIncludeAttribute(typeof(TpMarker))]
    [XmlIncludeAttribute(typeof(EtcsMarker))]
    [XmlIncludeAttribute(typeof(EtcsTransitionMarker))]
    [XmlIncludeAttribute(typeof(EtcsRbcTransitionMarker))]
    [XmlIncludeAttribute(typeof(EtcsTsiCcsTransitionMarker))]
    [XmlIncludeAttribute(typeof(EtcsLevelTransitionMarker))]
    [XmlIncludeAttribute(typeof(EtcsModeTransitionMarker))]
    [XmlIncludeAttribute(typeof(EtcsGeoPosMarker))]
    [XmlIncludeAttribute(typeof(EtcsNationalValueChangeMarker))]
    [XmlIncludeAttribute(typeof(EtcsConditionalEmergencyStopMarker))]
    [XmlIncludeAttribute(typeof(EtcsTrackConditionMarker))]
    [XmlIncludeAttribute(typeof(TC67_BigMetalMass))]
    [XmlIncludeAttribute(typeof(TC40_ChangeOfAllowedCurrentConsumption))]
    [XmlIncludeAttribute(typeof(TC69_StationPlatforms))]
    [XmlIncludeAttribute(typeof(TC68_TrackCondition))]
    [XmlIncludeAttribute(typeof(TC39_ChangeOfTractionSystem))]
    [XmlIncludeAttribute(typeof(EtcsTextMessageMarker))]
    [XmlIncludeAttribute(typeof(EtcsSpeedChangeMarker))]
    [XmlIncludeAttribute(typeof(EtcsGradientChangeMarker))]
    [XmlIncludeAttribute(typeof(TpTransitionMarker))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("changeMarker", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public abstract partial class ChangeMarker : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref _appliesFrom;
        private Length _appliesOverDistance;
        private tElementWithIDref _hasTracksideSignal;
        #endregion
        
        /// <summary>
        /// Applies from this spot location and works in the application direction.
        /// </summary>
        [XmlElement(Order=0)]
        public tElementWithIDref appliesFrom
        {
            get
            {
                if ((_appliesFrom == null))
                {
                    _appliesFrom = new tElementWithIDref();
                }
                return _appliesFrom;
            }
            set
            {
                _appliesFrom = value;
            }
        }
        
        [XmlElement(Order=1)]
        public Length appliesOverDistance
        {
            get
            {
                if ((_appliesOverDistance == null))
                {
                    _appliesOverDistance = new Length();
                }
                return _appliesOverDistance;
            }
            set
            {
                _appliesOverDistance = value;
            }
        }
        
        /// <summary>
        /// Signal (real or virtual) marking the change.
        /// </summary>
        [XmlElement(Order=2)]
        public tElementWithIDref hasTracksideSignal
        {
            get
            {
                if ((_hasTracksideSignal == null))
                {
                    _hasTracksideSignal = new tElementWithIDref();
                }
                return _hasTracksideSignal;
            }
            set
            {
                _hasTracksideSignal = value;
            }
        }
    }
    
    /// <summary>
    /// Marks a <i>spot location</i> from where a given speed applies. Often associated with a trackside sign.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("speedChangeMarker", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class SpeedChangeMarker : ChangeMarker
    {
        #region Private fields
        private Speed _hasMaximumSpeed;
        #endregion
        
        [XmlElement(Order=0)]
        public Speed hasMaximumSpeed
        {
            get
            {
                if ((_hasMaximumSpeed == null))
                {
                    _hasMaximumSpeed = new Speed();
                }
                return _hasMaximumSpeed;
            }
            set
            {
                _hasMaximumSpeed = value;
            }
        }
    }
    
    /// <summary>
    /// A mark from where Train Protection applies a (different) restriction.
    /// Use the inherited Description to annotate the ATP area demarcation (entry or exit point)
    /// E.g. "entry towards tracks 7-14"
    /// </summary>
    [XmlIncludeAttribute(typeof(EtcsMarker))]
    [XmlIncludeAttribute(typeof(EtcsTransitionMarker))]
    [XmlIncludeAttribute(typeof(EtcsRbcTransitionMarker))]
    [XmlIncludeAttribute(typeof(EtcsTsiCcsTransitionMarker))]
    [XmlIncludeAttribute(typeof(EtcsLevelTransitionMarker))]
    [XmlIncludeAttribute(typeof(EtcsModeTransitionMarker))]
    [XmlIncludeAttribute(typeof(EtcsGeoPosMarker))]
    [XmlIncludeAttribute(typeof(EtcsNationalValueChangeMarker))]
    [XmlIncludeAttribute(typeof(EtcsConditionalEmergencyStopMarker))]
    [XmlIncludeAttribute(typeof(EtcsTrackConditionMarker))]
    [XmlIncludeAttribute(typeof(TC67_BigMetalMass))]
    [XmlIncludeAttribute(typeof(TC40_ChangeOfAllowedCurrentConsumption))]
    [XmlIncludeAttribute(typeof(TC69_StationPlatforms))]
    [XmlIncludeAttribute(typeof(TC68_TrackCondition))]
    [XmlIncludeAttribute(typeof(TC39_ChangeOfTractionSystem))]
    [XmlIncludeAttribute(typeof(EtcsTextMessageMarker))]
    [XmlIncludeAttribute(typeof(EtcsSpeedChangeMarker))]
    [XmlIncludeAttribute(typeof(EtcsGradientChangeMarker))]
    [XmlIncludeAttribute(typeof(TpTransitionMarker))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("tpMarker", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public abstract partial class TpMarker : ChangeMarker
    {
        #region Private fields
        private NTC _fromNtc;
        private EtcsLevelTypes _transitFromEtcsLevel;
        #endregion
        
        /// <summary>
        /// The NTC from which a transit takes place.
        /// </summary>
        [XmlElement(Order=0)]
        public NTC fromNtc
        {
            get
            {
                if ((_fromNtc == null))
                {
                    _fromNtc = new NTC();
                }
                return _fromNtc;
            }
            set
            {
                _fromNtc = value;
            }
        }
        
        [XmlElement(Order=1)]
        public EtcsLevelTypes transitFromEtcsLevel
        {
            get
            {
                return _transitFromEtcsLevel;
            }
            set
            {
                _transitFromEtcsLevel = value;
            }
        }
    }
    
    /// <summary>
    /// National Train Control system as defined by ERA
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("nTC", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class NTC
    {
        #region Private fields
        private string _additionalInfo;
        private int _nid_ntc;
        #endregion
        
        /// <summary>
        /// Additional description of the NTC not provided by NID_NTC such as the specifiers
        /// <i>EG or NG </i>in ATB where ATB has NID_NTC=1 but 'EG' or 'NG' aren't in the NID_NTC list.
        /// </summary>
        [XmlElement(Order=0)]
        public string additionalInfo
        {
            get
            {
                return _additionalInfo;
            }
            set
            {
                _additionalInfo = value;
            }
        }
        
        /// <summary>
        /// The National Train Control system from which the train is transiting as defined by ERA_ERTMS_040001.
        /// </summary>
        [XmlElement(Order=1)]
        public int nid_ntc
        {
            get
            {
                return _nid_ntc;
            }
            set
            {
                _nid_ntc = value;
            }
        }
    }
    
    /// <summary>
    /// ETCS level types.
    /// Engineering rules may depend on the presence of line-side light signals.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum EtcsLevelTypes
    {
        /// <summary>
        /// ETCS Level 0
        /// E.g. shunting area on HSL Zuid (NL)
        /// </summary>
        level0,
        level1,
        /// <summary>
        /// ETCS Level 1 Limited Supervision.
        /// de-DE: ESG - ETCS Signalgef&#252;hrt.
        /// </summary>
        level1Ls,
        /// <summary>
        /// Level 2 without lateral light signalling.
        /// This includes areas that have light signals at the level transitions and/or some yard signals.
        /// </summary>
        level2WithoutLightSignals,
        level2WithLightSignals,
        level3,
        level3Hybrid,
        /// <summary>
        /// This area has a national train control system.
        /// </summary>
        levelNtc,
    }
    
    /// <summary>
    /// An ETCS marker is a spot on the track where an event occurs or a property changes that is relevant to ETCS signalling:
    /// <ul>
    /// <li>Change in National Values</li>
    /// <li>Change of gradient</li>
    /// <li>Change of speed</li>
    /// <li>Change of track condition</li>
    /// <li>Start of text display</li>
    /// </ul>
    /// 
    /// An ETCS profile is an ordered sequence of markers.
    /// </summary>
    [XmlIncludeAttribute(typeof(EtcsTransitionMarker))]
    [XmlIncludeAttribute(typeof(EtcsRbcTransitionMarker))]
    [XmlIncludeAttribute(typeof(EtcsTsiCcsTransitionMarker))]
    [XmlIncludeAttribute(typeof(EtcsLevelTransitionMarker))]
    [XmlIncludeAttribute(typeof(EtcsModeTransitionMarker))]
    [XmlIncludeAttribute(typeof(EtcsGeoPosMarker))]
    [XmlIncludeAttribute(typeof(EtcsNationalValueChangeMarker))]
    [XmlIncludeAttribute(typeof(EtcsConditionalEmergencyStopMarker))]
    [XmlIncludeAttribute(typeof(EtcsTrackConditionMarker))]
    [XmlIncludeAttribute(typeof(TC67_BigMetalMass))]
    [XmlIncludeAttribute(typeof(TC40_ChangeOfAllowedCurrentConsumption))]
    [XmlIncludeAttribute(typeof(TC69_StationPlatforms))]
    [XmlIncludeAttribute(typeof(TC68_TrackCondition))]
    [XmlIncludeAttribute(typeof(TC39_ChangeOfTractionSystem))]
    [XmlIncludeAttribute(typeof(EtcsTextMessageMarker))]
    [XmlIncludeAttribute(typeof(EtcsSpeedChangeMarker))]
    [XmlIncludeAttribute(typeof(EtcsGradientChangeMarker))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("etcsMarker", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class EtcsMarker : TpMarker
    {
        #region Private fields
        private tElementWithIDref[] _appliesWhenPointElementInPosition;
        private tElementWithIDref[] _limitsTcArea;
        #endregion
        
        /// <summary>
        /// The marker action applies only when the point element(s) are in the given position.
        /// de-DE: Entscheidungsweiche
        /// </summary>
        [XmlElement("appliesWhenPointElementInPosition", Order=0)]
        public tElementWithIDref[] appliesWhenPointElementInPosition
        {
            get
            {
                return _appliesWhenPointElementInPosition;
            }
            set
            {
                _appliesWhenPointElementInPosition = value;
            }
        }
        
        /// <summary>
        /// The ETCS marker marks the entry into track condition area(s).
        /// </summary>
        [XmlElement("limitsTcArea", Order=1)]
        public tElementWithIDref[] limitsTcArea
        {
            get
            {
                return _limitsTcArea;
            }
            set
            {
                _limitsTcArea = value;
            }
        }
    }
    
    /// <summary>
    /// Marks a spot and direction, where an ETCS transition occurs.
    /// </summary>
    [XmlIncludeAttribute(typeof(EtcsRbcTransitionMarker))]
    [XmlIncludeAttribute(typeof(EtcsTsiCcsTransitionMarker))]
    [XmlIncludeAttribute(typeof(EtcsLevelTransitionMarker))]
    [XmlIncludeAttribute(typeof(EtcsModeTransitionMarker))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("etcsTransitionMarker", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class EtcsTransitionMarker : EtcsMarker
    {
        #region Private fields
        private bool _hasNoRearSignal;
        private BoundaryElement _refersToBoundaryElement;
        #endregion
        
        /// <summary>
        /// The transition takes place before the train has reached the first signal in the accepting RBC area.
        /// de-DE: Bei Einstieg ohne bekanntes r&#252;ckwertiges Signal ist hier kein Signal vorgegeben.
        /// nl-NL: niet gebruikt want er is altijd een sein bij de transitie.
        /// </summary>
        [XmlElement(Order=0)]
        public bool hasNoRearSignal
        {
            get
            {
                return _hasNoRearSignal;
            }
            set
            {
                _hasNoRearSignal = value;
            }
        }
        
        /// <summary>
        /// The ETCS transition uses an element, signal or balise group, marking the boundary.
        /// </summary>
        [XmlElement(Order=1)]
        public BoundaryElement refersToBoundaryElement
        {
            get
            {
                if ((_refersToBoundaryElement == null))
                {
                    _refersToBoundaryElement = new BoundaryElement();
                }
                return _refersToBoundaryElement;
            }
            set
            {
                _refersToBoundaryElement = value;
            }
        }
    }
    
    /// <summary>
    /// The exit- or entry-element where a transition is ordered. This is a facade to a signal or balise group.
    /// de-DE: Grenzdatenpunkt oder Einstiegssignal nach ESG
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("boundaryElement", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class BoundaryElement
    {
        #region Private fields
        private tElementWithIDref _refersToEtcsBg;
        private tElementWithIDref _refersToSignal;
        #endregion
        
        /// <summary>
        /// Refers to ETCS balise group.
        /// The actual technical transition can have an offset with respect to the balise group.
        /// Can be a balise group that acts as Last Relevant Balise Group (LRBG) at a transition ordered by the RBC.
        /// de-DE: Grenzdatenpunkt
        /// </summary>
        [XmlElement(Order=0)]
        public tElementWithIDref refersToEtcsBg
        {
            get
            {
                if ((_refersToEtcsBg == null))
                {
                    _refersToEtcsBg = new tElementWithIDref();
                }
                return _refersToEtcsBg;
            }
            set
            {
                _refersToEtcsBg = value;
            }
        }
        
        /// <summary>
        /// Reference to a signal at the transition.
        /// The actual technical transition can have an offset with respect to the signal position (i.e. "early" or "late" transition)
        /// de-DE: Einstiegssignal. Bei Einstieg ohne bekanntes r&#252;ckwertiges Signal ist hier kein Signal vorgegeben.
        /// </summary>
        [XmlElement(Order=1)]
        public tElementWithIDref refersToSignal
        {
            get
            {
                if ((_refersToSignal == null))
                {
                    _refersToSignal = new tElementWithIDref();
                }
                return _refersToSignal;
            }
            set
            {
                _refersToSignal = value;
            }
        }
    }
    
    /// <summary>
    /// At this spot and in the given direction, a RBC transition applies. This is the border between the areas controlled by two different RBCs.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("etcsRbcTransitionMarker", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class EtcsRbcTransitionMarker : EtcsTransitionMarker
    {
        #region Private fields
        private tElementWithIDref[] _hasBtsPosition;
        private tElementWithIDref _refersToAcceptingRbc;
        private tElementWithIDref _refersToHovRbc;
        #endregion
        
        /// <summary>
        /// The chainage of the GSM-R BTS; needed to ascertain that the RBC-transition doesn't coincide with a GSM-R handover.
        /// </summary>
        [XmlElement("hasBtsPosition", Order=0)]
        public tElementWithIDref[] hasBtsPosition
        {
            get
            {
                return _hasBtsPosition;
            }
            set
            {
                _hasBtsPosition = value;
            }
        }
        
        /// <summary>
        /// Reference to the accepting RBC area.
        /// </summary>
        [XmlElement(Order=1)]
        public tElementWithIDref refersToAcceptingRbc
        {
            get
            {
                if ((_refersToAcceptingRbc == null))
                {
                    _refersToAcceptingRbc = new tElementWithIDref();
                }
                return _refersToAcceptingRbc;
            }
            set
            {
                _refersToAcceptingRbc = value;
            }
        }
        
        /// <summary>
        /// Reference to the handing-over RBC area
        /// </summary>
        [XmlElement(Order=2)]
        public tElementWithIDref refersToHovRbc
        {
            get
            {
                if ((_refersToHovRbc == null))
                {
                    _refersToHovRbc = new tElementWithIDref();
                }
                return _refersToHovRbc;
            }
            set
            {
                _refersToHovRbc = value;
            }
        }
    }
    
    /// <summary>
    /// At this spot, in the given direction, a transition procedure to another CCS applies.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("etcsTsiCcsTransitionMarker", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class EtcsTsiCcsTransitionMarker : EtcsTransitionMarker
    {
        #region Private fields
        private int _m_version;
        #endregion
        
        /// <summary>
        /// maps to ETCS variable M_VERSION in the applicable ETCS baseline.
        /// </summary>
        [XmlAttribute]
        public int m_version
        {
            get
            {
                return _m_version;
            }
            set
            {
                _m_version = value;
            }
        }
    }
    
    /// <summary>
    /// At this spot and in the given direction, the level given by M_LEVELTR takes over.
    /// This includes Level NTC such as PZB, ATB, etc.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("etcsLevelTransitionMarker", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class EtcsLevelTransitionMarker : EtcsTransitionMarker
    {
        #region Private fields
        private tElementWithIDref[] _hasAccessControlSignal;
        private LtProperties[] _hasLtProperties;
        private tElementWithIDref _leadsToEtcsAreaFittedWithVersion;
        private Length _maxTrainLength;
        #endregion
        
        /// <summary>
        /// Signal(s) that prevent unsuitable trains from transiting.
        /// de-DE: ausschlie&#223;lich f&#252;r ETCS L2 oS (ohne Signale)
        /// </summary>
        [XmlElement("hasAccessControlSignal", Order=0)]
        public tElementWithIDref[] hasAccessControlSignal
        {
            get
            {
                return _hasAccessControlSignal;
            }
            set
            {
                _hasAccessControlSignal = value;
            }
        }
        
        /// <summary>
        /// If more than one set of properties is given, priority is in the order given (thus reproducing subset-026 packet 41).
        /// </summary>
        [XmlElement("hasLtProperties", Order=1)]
        public LtProperties[] hasLtProperties
        {
            get
            {
                return _hasLtProperties;
            }
            set
            {
                _hasLtProperties = value;
            }
        }
        
        /// <summary>
        /// The ETCS level transition leads towards an area fitted with the given ETCS system version.
        /// </summary>
        [XmlElement(Order=2)]
        public tElementWithIDref leadsToEtcsAreaFittedWithVersion
        {
            get
            {
                if ((_leadsToEtcsAreaFittedWithVersion == null))
                {
                    _leadsToEtcsAreaFittedWithVersion = new tElementWithIDref();
                }
                return _leadsToEtcsAreaFittedWithVersion;
            }
            set
            {
                _leadsToEtcsAreaFittedWithVersion = value;
            }
        }
        
        /// <summary>
        /// de-DE: Max. Zugl&#228;nge f&#252;r die Berechnung der Ausdehnung von Bereich  "C"
        /// </summary>
        [XmlElement(Order=3)]
        public Length maxTrainLength
        {
            get
            {
                if ((_maxTrainLength == null))
                {
                    _maxTrainLength = new Length();
                }
                return _maxTrainLength;
            }
            set
            {
                _maxTrainLength = value;
            }
        }
    }
    
    /// <summary>
    /// Level transition properties including acknowledgement.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("ltProperties", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class LtProperties
    {
        #region Private fields
        private EtcsAcknowledgementLT _needsEtcsAck;
        private int _m_leveltr;
        private int _nid_ntc;
        #endregion
        
        /// <summary>
        /// acknowledgement only applies when entering ETCS Level 2/3
        /// acknowledgement distance and time
        /// </summary>
        [XmlElement(Order=0)]
        public EtcsAcknowledgementLT needsEtcsAck
        {
            get
            {
                if ((_needsEtcsAck == null))
                {
                    _needsEtcsAck = new EtcsAcknowledgementLT();
                }
                return _needsEtcsAck;
            }
            set
            {
                _needsEtcsAck = value;
            }
        }
        
        [XmlAttribute]
        public int m_leveltr
        {
            get
            {
                return _m_leveltr;
            }
            set
            {
                _m_leveltr = value;
            }
        }
        
        [XmlAttribute]
        public int nid_ntc
        {
            get
            {
                return _nid_ntc;
            }
            set
            {
                _nid_ntc = value;
            }
        }
    }
    
    /// <summary>
    /// Defines the length of the acknowledgement area for transition into a Level 2/3 area.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("etcsAcknowledgementLT", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class EtcsAcknowledgementLT : EtcsAcknowledgement
    {
        #region Private fields
        private float _l_ackleveltr;
        #endregion
        
        [XmlAttribute]
        public float l_ackleveltr
        {
            get
            {
                return _l_ackleveltr;
            }
            set
            {
                _l_ackleveltr = value;
            }
        }
    }
    
    /// <summary>
    /// Defines the length of the acknowledgement area (L_MAMODE). The design parameters are typically derived by national rules depending on duration and distance.
    /// 
    /// The <i><u>designed </u></i>duration during which the transition acknowledgement is requested. Given this duration this value, one computes the L_ACKLEVELTR or L_ACKMAMODE.
    /// 
    /// These parameters can be stored with the data.
    /// </summary>
    [XmlIncludeAttribute(typeof(EtcsAcknowledgementLT))]
    [XmlIncludeAttribute(typeof(EtcsAcknowledgementMode))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("etcsAcknowledgement", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class EtcsAcknowledgement
    {
        #region Private fields
        private Duration _hasAckDuration;
        #endregion
        
        [XmlElement(Order=0)]
        public Duration hasAckDuration
        {
            get
            {
                if ((_hasAckDuration == null))
                {
                    _hasAckDuration = new Duration();
                }
                return _hasAckDuration;
            }
            set
            {
                _hasAckDuration = value;
            }
        }
    }
    
    /// <summary>
    /// Defines the acknowledgement area in rear of the start of the required mode.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("etcsAcknowledgementMode", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class EtcsAcknowledgementMode : EtcsAcknowledgement
    {
        #region Private fields
        private float _l_ackmamode;
        #endregion
        
        [XmlAttribute]
        public float l_ackmamode
        {
            get
            {
                return _l_ackmamode;
            }
            set
            {
                _l_ackmamode = value;
            }
        }
    }
    
    /// <summary>
    /// At this spot, in the given direction, a mode transition procedure applies.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("etcsModeTransitionMarker", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class EtcsModeTransitionMarker : EtcsTransitionMarker
    {
        #region Private fields
        private EtcsAcknowledgementMode _needsEtcsAck;
        private float _l_mamode;
        private int _m_mamode;
        private bool _q_mamode;
        private int _v_mamode;
        #endregion
        
        [XmlElement(Order=0)]
        public EtcsAcknowledgementMode needsEtcsAck
        {
            get
            {
                if ((_needsEtcsAck == null))
                {
                    _needsEtcsAck = new EtcsAcknowledgementMode();
                }
                return _needsEtcsAck;
            }
            set
            {
                _needsEtcsAck = value;
            }
        }
        
        [XmlAttribute]
        public float l_mamode
        {
            get
            {
                return _l_mamode;
            }
            set
            {
                _l_mamode = value;
            }
        }
        
        [XmlAttribute]
        public int m_mamode
        {
            get
            {
                return _m_mamode;
            }
            set
            {
                _m_mamode = value;
            }
        }
        
        /// <summary>
        /// Maps to the variable Q_MAMODE in the applicable ETCS baseline.
        /// <ul>
        /// <li>false maps to 0</li>
        /// <li>true maps to 1</li>
        /// </ul>
        /// </summary>
        [XmlAttribute]
        public bool q_mamode
        {
            get
            {
                return _q_mamode;
            }
            set
            {
                _q_mamode = value;
            }
        }
        
        [XmlAttribute]
        public int v_mamode
        {
            get
            {
                return _v_mamode;
            }
            set
            {
                _v_mamode = value;
            }
        }
    }
    
    /// <summary>
    /// Marks a <i>spot location</i> from where a line kilometer ribbon applies.
    /// The new counter starts at this position.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("etcsGeoPosMarker", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class EtcsGeoPosMarker : EtcsMarker
    {
        #region Private fields
        private bool _countingUp;
        private int _m_position;
        #endregion
        
        /// <summary>
        /// True: the geo position value is counting up along the ribbon.
        /// False: counting down along the ribbon.
        /// </summary>
        [XmlAttribute]
        public bool countingUp
        {
            get
            {
                return _countingUp;
            }
            set
            {
                _countingUp = value;
            }
        }
        
        [XmlAttribute]
        public int m_position
        {
            get
            {
                return _m_position;
            }
            set
            {
                _m_position = value;
            }
        }
    }
    
    /// <summary>
    /// Marks a <i>spot location</i> from where a given <i>set </i>of national values applies.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("etcsNationalValueChangeMarker", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class EtcsNationalValueChangeMarker : EtcsMarker
    {
        #region Private fields
        private tElementWithIDref _appliesEtcsNationalValueSet;
        #endregion
        
        /// <summary>
        /// From the marker onward, this set of National Values applies.
        /// </summary>
        [XmlElement(Order=0)]
        public tElementWithIDref appliesEtcsNationalValueSet
        {
            get
            {
                if ((_appliesEtcsNationalValueSet == null))
                {
                    _appliesEtcsNationalValueSet = new tElementWithIDref();
                }
                return _appliesEtcsNationalValueSet;
            }
            set
            {
                _appliesEtcsNationalValueSet = value;
            }
        }
    }
    
    /// <summary>
    /// Marks a signal or stop marker board where a CES is issued.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("etcsConditionalEmergencyStopMarker", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class EtcsConditionalEmergencyStopMarker : EtcsMarker
    {
        #region Private fields
        private tElementWithIDref _appliesToSignal;
        private EtcsCesCondition _hasCesCondition;
        private tElementWithIDref _hasCesHandOverRbc;
        private Length _hasOffset;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref appliesToSignal
        {
            get
            {
                if ((_appliesToSignal == null))
                {
                    _appliesToSignal = new tElementWithIDref();
                }
                return _appliesToSignal;
            }
            set
            {
                _appliesToSignal = value;
            }
        }
        
        /// <summary>
        /// a condition under which the CES is issued.
        /// </summary>
        [XmlElement(Order=1)]
        public EtcsCesCondition hasCesCondition
        {
            get
            {
                if ((_hasCesCondition == null))
                {
                    _hasCesCondition = new EtcsCesCondition();
                }
                return _hasCesCondition;
            }
            set
            {
                _hasCesCondition = value;
            }
        }
        
        /// <summary>
        /// Refers to a RBC to which must be handed over <i>beyond </i>an RBC-RBC border.
        /// </summary>
        [XmlElement(Order=2)]
        public tElementWithIDref hasCesHandOverRbc
        {
            get
            {
                if ((_hasCesHandOverRbc == null))
                {
                    _hasCesHandOverRbc = new tElementWithIDref();
                }
                return _hasCesHandOverRbc;
            }
            set
            {
                _hasCesHandOverRbc = value;
            }
        }
        
        /// <summary>
        /// The CES can be shifted by a (positive) offset, always in rear of the signal.
        /// </summary>
        [XmlElement(Order=3)]
        public Length hasOffset
        {
            get
            {
                if ((_hasOffset == null))
                {
                    _hasOffset = new Length();
                }
                return _hasOffset;
            }
            set
            {
                _hasOffset = value;
            }
        }
    }
    
    /// <summary>
    /// The condition for issuing a CES.
    /// </summary>
    [XmlIncludeAttribute(typeof(EtcsCesSectionCondition))]
    [XmlIncludeAttribute(typeof(EtcsCesPointCondition))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("etcsCesCondition", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class EtcsCesCondition
    {
    }
    
    /// <summary>
    /// The CES is issued when TVP section(s) is occupied.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("etcsCesSectionCondition", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class EtcsCesSectionCondition : EtcsCesCondition
    {
        #region Private fields
        private tElementWithIDref[] _appliesWhenSectionIsOccupied;
        #endregion
        
        /// <summary>
        /// When the section is occupied, issue a CES
        /// </summary>
        [XmlElement("appliesWhenSectionIsOccupied", Order=0)]
        public tElementWithIDref[] appliesWhenSectionIsOccupied
        {
            get
            {
                return _appliesWhenSectionIsOccupied;
            }
            set
            {
                _appliesWhenSectionIsOccupied = value;
            }
        }
    }
    
    /// <summary>
    /// The CES is issued when point element(s) is in the given position.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("etcsCesPointCondition", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class EtcsCesPointCondition : EtcsCesCondition
    {
        #region Private fields
        private tElementWithIDref[] _appliesWhenPointElementInPosition;
        #endregion
        
        /// <summary>
        /// a CES applies when the point element is in the given position.
        /// </summary>
        [XmlElement("appliesWhenPointElementInPosition", Order=0)]
        public tElementWithIDref[] appliesWhenPointElementInPosition
        {
            get
            {
                return _appliesWhenPointElementInPosition;
            }
            set
            {
                _appliesWhenPointElementInPosition = value;
            }
        }
    }
    
    /// <summary>
    /// Marks a <i>spot location</i> from where a given track condition applies.
    /// </summary>
    [XmlIncludeAttribute(typeof(TC67_BigMetalMass))]
    [XmlIncludeAttribute(typeof(TC40_ChangeOfAllowedCurrentConsumption))]
    [XmlIncludeAttribute(typeof(TC69_StationPlatforms))]
    [XmlIncludeAttribute(typeof(TC68_TrackCondition))]
    [XmlIncludeAttribute(typeof(TC39_ChangeOfTractionSystem))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("etcsTrackConditionMarker", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class EtcsTrackConditionMarker : EtcsMarker
    {
        #region Private fields
        private int _q_trackinit;
        #endregion
        
        /// <summary>
        /// de-DE: DB verwendet kein Q_TRACKINIT
        /// </summary>
        [XmlAttribute]
        public int q_trackinit
        {
            get
            {
                return _q_trackinit;
            }
            set
            {
                _q_trackinit = value;
            }
        }
    }
    
    /// <summary>
    /// An ETCS track condition referring to a Big Metall Mass (Track Condition 67).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("tC67_BigMetalMass", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class TC67_BigMetalMass : EtcsTrackConditionMarker
    {
    }
    
    /// <summary>
    /// An ETCS track condition marking the location where the allowed power consumption changes.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("tC40_ChangeOfAllowedCurrentConsumption", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class TC40_ChangeOfAllowedCurrentConsumption : EtcsTrackConditionMarker
    {
        #region Private fields
        private int _m_current;
        #endregion
        
        [XmlAttribute]
        public int m_current
        {
            get
            {
                return _m_current;
            }
            set
            {
                _m_current = value;
            }
        }
    }
    
    /// <summary>
    /// An ETCS track condition referring to a station platform edge (Track Condition 69).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("tC69_StationPlatforms", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class TC69_StationPlatforms : EtcsTrackConditionMarker
    {
        #region Private fields
        private tElementWithIDref _refersToPlatformEdge;
        private int _m_platform;
        private int _q_platform;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref refersToPlatformEdge
        {
            get
            {
                if ((_refersToPlatformEdge == null))
                {
                    _refersToPlatformEdge = new tElementWithIDref();
                }
                return _refersToPlatformEdge;
            }
            set
            {
                _refersToPlatformEdge = value;
            }
        }
        
        [XmlAttribute]
        public int m_platform
        {
            get
            {
                return _m_platform;
            }
            set
            {
                _m_platform = value;
            }
        }
        
        [XmlAttribute]
        public int q_platform
        {
            get
            {
                return _q_platform;
            }
            set
            {
                _q_platform = value;
            }
        }
    }
    
    /// <summary>
    /// The track condition marker limits an area. The effective direction of the marker is <i>into</i> the area. Maps to ETCS track Condition 68.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("tC68_TrackCondition", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class TC68_TrackCondition : EtcsTrackConditionMarker
    {
        #region Private fields
        private AreaLocation _hasTrackConditionAreaLocation;
        private int _m_trackcond;
        #endregion
        
        [XmlElement(Order=0)]
        public AreaLocation hasTrackConditionAreaLocation
        {
            get
            {
                if ((_hasTrackConditionAreaLocation == null))
                {
                    _hasTrackConditionAreaLocation = new AreaLocation();
                }
                return _hasTrackConditionAreaLocation;
            }
            set
            {
                _hasTrackConditionAreaLocation = value;
            }
        }
        
        [XmlAttribute]
        public int m_trackcond
        {
            get
            {
                return _m_trackcond;
            }
            set
            {
                _m_trackcond = value;
            }
        }
    }
    
    /// <summary>
    /// An ETCS track condition referring to a Change of traction system (Track Condition 39).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("tC39_ChangeOfTractionSystem", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class TC39_ChangeOfTractionSystem : EtcsTrackConditionMarker
    {
        #region Private fields
        private int _m_voltage;
        private int _nid_ctraction;
        #endregion
        
        [XmlAttribute]
        public int m_voltage
        {
            get
            {
                return _m_voltage;
            }
            set
            {
                _m_voltage = value;
            }
        }
        
        [XmlAttribute]
        public int nid_ctraction
        {
            get
            {
                return _nid_ctraction;
            }
            set
            {
                _nid_ctraction = value;
            }
        }
    }
    
    /// <summary>
    /// A spot on the track from where a text message to the train turns valid. This marker defines:
    /// <ul>
    /// <li>the message string</li>
    /// <li>the conditions under which the message shall be displayed.</li>
    /// </ul>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("etcsTextMessageMarker", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class EtcsTextMessageMarker : EtcsMarker
    {
        #region Private fields
        private EtcsTextDisplayEndCondition _hasDisplayEndCondition;
        private EtcsTextDisplayStartCondition _hasDisplayStartCondition;
        private int _l_text;
        private int _nid_c;
        private int _nid_rbc;
        private int _nid_textmessage;
        private int _q_conftextdisplay;
        private int _q_text;
        private int _q_textclass;
        private int _q_textconfirm;
        private int _q_textdisplay;
        private int _q_textreport;
        private string _text;
        #endregion
        
        [XmlElement(Order=0)]
        public EtcsTextDisplayEndCondition hasDisplayEndCondition
        {
            get
            {
                if ((_hasDisplayEndCondition == null))
                {
                    _hasDisplayEndCondition = new EtcsTextDisplayEndCondition();
                }
                return _hasDisplayEndCondition;
            }
            set
            {
                _hasDisplayEndCondition = value;
            }
        }
        
        [XmlElement(Order=1)]
        public EtcsTextDisplayStartCondition hasDisplayStartCondition
        {
            get
            {
                if ((_hasDisplayStartCondition == null))
                {
                    _hasDisplayStartCondition = new EtcsTextDisplayStartCondition();
                }
                return _hasDisplayStartCondition;
            }
            set
            {
                _hasDisplayStartCondition = value;
            }
        }
        
        /// <summary>
        /// If provided, it must equate to the number of characters in the text string.
        /// </summary>
        [XmlAttribute]
        public int l_text
        {
            get
            {
                return _l_text;
            }
            set
            {
                _l_text = value;
            }
        }
        
        [XmlAttribute]
        public int nid_c
        {
            get
            {
                return _nid_c;
            }
            set
            {
                _nid_c = value;
            }
        }
        
        [XmlAttribute]
        public int nid_rbc
        {
            get
            {
                return _nid_rbc;
            }
            set
            {
                _nid_rbc = value;
            }
        }
        
        [XmlAttribute]
        public int nid_textmessage
        {
            get
            {
                return _nid_textmessage;
            }
            set
            {
                _nid_textmessage = value;
            }
        }
        
        [XmlAttribute]
        public int q_conftextdisplay
        {
            get
            {
                return _q_conftextdisplay;
            }
            set
            {
                _q_conftextdisplay = value;
            }
        }
        
        [XmlAttribute]
        public int q_text
        {
            get
            {
                return _q_text;
            }
            set
            {
                _q_text = value;
            }
        }
        
        [XmlAttribute]
        public int q_textclass
        {
            get
            {
                return _q_textclass;
            }
            set
            {
                _q_textclass = value;
            }
        }
        
        [XmlAttribute]
        public int q_textconfirm
        {
            get
            {
                return _q_textconfirm;
            }
            set
            {
                _q_textconfirm = value;
            }
        }
        
        [XmlAttribute]
        public int q_textdisplay
        {
            get
            {
                return _q_textdisplay;
            }
            set
            {
                _q_textdisplay = value;
            }
        }
        
        [XmlAttribute]
        public int q_textreport
        {
            get
            {
                return _q_textreport;
            }
            set
            {
                _q_textreport = value;
            }
        }
        
        /// <summary>
        /// The string of characters encoded in the iteration of X_TEXT.
        /// </summary>
        [XmlAttribute]
        public string text
        {
            get
            {
                return _text;
            }
            set
            {
                _text = value;
            }
        }
    }
    
    /// <summary>
    /// Defines the end conditions for displaying a text message. The conditions are
    /// <ul>
    /// <li>length or duration, as described in the subset</li>
    /// <li>ERTMS level</li>
    /// <li>mode</li>
    /// </ul>
    /// Q_TEXTDISPLAY defines how the conditions are to be used.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("etcsTextDisplayEndCondition", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class EtcsTextDisplayEndCondition
    {
        #region Private fields
        private EtcsLevelCondition _hasEtcsLevelCondition;
        private float _l_textdisplay;
        private int _m_modetextdisplay;
        private int _t_textdisplay;
        #endregion
        
        [XmlElement(Order=0)]
        public EtcsLevelCondition hasEtcsLevelCondition
        {
            get
            {
                if ((_hasEtcsLevelCondition == null))
                {
                    _hasEtcsLevelCondition = new EtcsLevelCondition();
                }
                return _hasEtcsLevelCondition;
            }
            set
            {
                _hasEtcsLevelCondition = value;
            }
        }
        
        [XmlAttribute]
        public float l_textdisplay
        {
            get
            {
                return _l_textdisplay;
            }
            set
            {
                _l_textdisplay = value;
            }
        }
        
        [XmlAttribute]
        public int m_modetextdisplay
        {
            get
            {
                return _m_modetextdisplay;
            }
            set
            {
                _m_modetextdisplay = value;
            }
        }
        
        [XmlAttribute]
        public int t_textdisplay
        {
            get
            {
                return _t_textdisplay;
            }
            set
            {
                _t_textdisplay = value;
            }
        }
    }
    
    /// <summary>
    /// Provides the condition under which a text is displayed or stops being displayed.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("etcsLevelCondition", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class EtcsLevelCondition
    {
        #region Private fields
        private int _m_leveltextdisplay;
        private int _nid_ntc;
        #endregion
        
        [XmlAttribute]
        public int m_leveltextdisplay
        {
            get
            {
                return _m_leveltextdisplay;
            }
            set
            {
                _m_leveltextdisplay = value;
            }
        }
        
        [XmlAttribute]
        public int nid_ntc
        {
            get
            {
                return _nid_ntc;
            }
            set
            {
                _nid_ntc = value;
            }
        }
    }
    
    /// <summary>
    /// Defines the start conditions for displaying a text message. The conditions are
    /// <ul>
    /// <li>location (location of the marker plus an offset, as described in the subset)</li>
    /// <li>ERTMS level</li>
    /// <li>mode</li>
    /// </ul>
    /// Q_TEXTDISPLAY defines how the conditions are to be used.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("etcsTextDisplayStartCondition", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class EtcsTextDisplayStartCondition
    {
        #region Private fields
        private EtcsLevelCondition _hasEtcsLevelCondition;
        private float _d_textdisplay;
        private int _m_modetextdisplay;
        #endregion
        
        [XmlElement(Order=0)]
        public EtcsLevelCondition hasEtcsLevelCondition
        {
            get
            {
                if ((_hasEtcsLevelCondition == null))
                {
                    _hasEtcsLevelCondition = new EtcsLevelCondition();
                }
                return _hasEtcsLevelCondition;
            }
            set
            {
                _hasEtcsLevelCondition = value;
            }
        }
        
        [XmlAttribute]
        public float d_textdisplay
        {
            get
            {
                return _d_textdisplay;
            }
            set
            {
                _d_textdisplay = value;
            }
        }
        
        [XmlAttribute]
        public int m_modetextdisplay
        {
            get
            {
                return _m_modetextdisplay;
            }
            set
            {
                _m_modetextdisplay = value;
            }
        }
    }
    
    /// <summary>
    /// From this spot and in the given direction, a speed applies.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("etcsSpeedChangeMarker", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class EtcsSpeedChangeMarker : EtcsMarker
    {
        #region Private fields
        private CantDeficiencySpeed[] _hasCantDeficiencySpeed;
        private EtcsTrainCategorySpeed[] _hasEtcsTrainCategorySpeed;
        private EtcsSpeedChangeCondition _hasSpeedChangeCondition;
        private int _q_diff;
        private bool _q_front;
        private int _v_static;
        #endregion
        
        [XmlElement("hasCantDeficiencySpeed", Order=0)]
        public CantDeficiencySpeed[] hasCantDeficiencySpeed
        {
            get
            {
                return _hasCantDeficiencySpeed;
            }
            set
            {
                _hasCantDeficiencySpeed = value;
            }
        }
        
        /// <summary>
        /// has speed depending on ETCS train category
        /// </summary>
        [XmlElement("hasEtcsTrainCategorySpeed", Order=1)]
        public EtcsTrainCategorySpeed[] hasEtcsTrainCategorySpeed
        {
            get
            {
                return _hasEtcsTrainCategorySpeed;
            }
            set
            {
                _hasEtcsTrainCategorySpeed = value;
            }
        }
        
        [XmlElement(Order=2)]
        public EtcsSpeedChangeCondition hasSpeedChangeCondition
        {
            get
            {
                if ((_hasSpeedChangeCondition == null))
                {
                    _hasSpeedChangeCondition = new EtcsSpeedChangeCondition();
                }
                return _hasSpeedChangeCondition;
            }
            set
            {
                _hasSpeedChangeCondition = value;
            }
        }
        
        [XmlAttribute]
        public int q_diff
        {
            get
            {
                return _q_diff;
            }
            set
            {
                _q_diff = value;
            }
        }
        
        [XmlAttribute]
        public bool q_front
        {
            get
            {
                return _q_front;
            }
            set
            {
                _q_front = value;
            }
        }
        
        /// <summary>
        /// Maps to V_STATIC, basic SSP.
        /// </summary>
        [XmlAttribute]
        public int v_static
        {
            get
            {
                return _v_static;
            }
            set
            {
                _v_static = value;
            }
        }
    }
    
    /// <summary>
    /// Tuple of cant deficiency and speed.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("cantDeficiencySpeed", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class CantDeficiencySpeed
    {
        #region Private fields
        private int _nc_cddiff;
        private int _v_diff;
        #endregion
        
        [XmlAttribute]
        public int nc_cddiff
        {
            get
            {
                return _nc_cddiff;
            }
            set
            {
                _nc_cddiff = value;
            }
        }
        
        [XmlAttribute]
        public int v_diff
        {
            get
            {
                return _v_diff;
            }
            set
            {
                _v_diff = value;
            }
        }
    }
    
    /// <summary>
    /// The speed change applies when a condition defined by this class applies.
    /// </summary>
    [XmlIncludeAttribute(typeof(EtcsWorkzoneCondition))]
    [XmlIncludeAttribute(typeof(EtcsSpeedPointCondition))]
    [XmlIncludeAttribute(typeof(EtcsSpeedChangeOtherCondition))]
    [XmlIncludeAttribute(typeof(EtcsSpeedSignalCondition))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("etcsSpeedChangeCondition", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class EtcsSpeedChangeCondition
    {
    }
    
    /// <summary>
    /// The speed change applies when the given work zone is active.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("etcsWorkzoneCondition", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class EtcsWorkzoneCondition : EtcsSpeedChangeCondition
    {
        #region Private fields
        private tElementWithIDref[] _appliesWhenWorkZoneActive;
        #endregion
        
        [XmlElement("appliesWhenWorkZoneActive", Order=0)]
        public tElementWithIDref[] appliesWhenWorkZoneActive
        {
            get
            {
                return _appliesWhenWorkZoneActive;
            }
            set
            {
                _appliesWhenWorkZoneActive = value;
            }
        }
    }
    
    /// <summary>
    /// The speed change applies when the given points are in the given position.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("etcsSpeedPointCondition", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class EtcsSpeedPointCondition : EtcsSpeedChangeCondition
    {
        #region Private fields
        private tElementWithIDref[] _appliesWhenPointElementInPosition;
        #endregion
        
        /// <summary>
        /// A speed change marker applies when the point element is in the given position.
        /// </summary>
        [XmlElement("appliesWhenPointElementInPosition", Order=0)]
        public tElementWithIDref[] appliesWhenPointElementInPosition
        {
            get
            {
                return _appliesWhenPointElementInPosition;
            }
            set
            {
                _appliesWhenPointElementInPosition = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("etcsSpeedChangeOtherCondition", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class EtcsSpeedChangeOtherCondition : EtcsSpeedChangeCondition
    {
    }
    
    /// <summary>
    /// The speed change applies when the given signal shows the given message. The message is composed by a (number of) aspect(s).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("etcsSpeedSignalCondition", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class EtcsSpeedSignalCondition : EtcsSpeedChangeCondition
    {
        #region Private fields
        private tElementWithIDref[] _appliesWhenSignalShowsMessage;
        #endregion
        
        [XmlElement("appliesWhenSignalShowsMessage", Order=0)]
        public tElementWithIDref[] appliesWhenSignalShowsMessage
        {
            get
            {
                return _appliesWhenSignalShowsMessage;
            }
            set
            {
                _appliesWhenSignalShowsMessage = value;
            }
        }
    }
    
    /// <summary>
    /// Marks a <i>spot location</i> from where a given gradient applies. Can be associated with a gradient sign (UK).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("etcsGradientChangeMarker", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class EtcsGradientChangeMarker : EtcsMarker
    {
        #region Private fields
        private int _g_a;
        private int _q_gdir;
        #endregion
        
        /// <summary>
        /// The position where the ETCS gradient changes. This is a gradient that has been derived by engineering rules from the slopes according to ETCS subset-027-3.11.12.4
        /// </summary>
        [XmlAttribute]
        public int g_a
        {
            get
            {
                return _g_a;
            }
            set
            {
                _g_a = value;
            }
        }
        
        [XmlAttribute]
        public int q_gdir
        {
            get
            {
                return _q_gdir;
            }
            set
            {
                _q_gdir = value;
            }
        }
    }
    
    /// <summary>
    /// A spot on the track where a train enters the control area of a another TP system.
    /// de-DE: Bereichsgrenze.
    /// nl-NL: puntafbakening van het beinvloedingsgebied.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("tpTransitionMarker", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class TpTransitionMarker : TpMarker
    {
    }
    
    /// <summary>
    /// Relates an asset to a local operating zone.
    /// Optionally defines the condition for returning the zone to the signaller.
    /// </summary>
    [XmlIncludeAttribute(typeof(LozTdsSection))]
    [XmlIncludeAttribute(typeof(LozDerailerRelation))]
    [XmlIncludeAttribute(typeof(LozPointRelation))]
    [XmlIncludeAttribute(typeof(LozKeyReleaseInstrumentRelation))]
    [XmlIncludeAttribute(typeof(LozSignalRelation))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("lozAssetRelation", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public abstract partial class LozAssetRelation : ConfiguredBaseObject
    {
        #region Private fields
        private bool _controllable;
        private tElementWithIDref[] _isPartOfLoz;
        #endregion
        
        /// <summary>
        /// Indicates whether the local operator has full control (true, default) or not (false) over the asset when the local operating zone is active. Applies only to signal, point and derailer.
        /// de-DE: freie Stellbarkeit
        /// </summary>
        [XmlElement(Order=0)]
        public bool controllable
        {
            get
            {
                return _controllable;
            }
            set
            {
                _controllable = value;
            }
        }
        
        [XmlElement("isPartOfLoz", Order=1)]
        public tElementWithIDref[] isPartOfLoz
        {
            get
            {
                return _isPartOfLoz;
            }
            set
            {
                _isPartOfLoz = value;
            }
        }
    }
    
    /// <summary>
    /// A TDS section within the local operating zone.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("lozTdsSection", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class LozTdsSection : LozAssetRelation
    {
        #region Private fields
        private tElementWithIDref _mustBeVacantForReturn;
        private tElementWithIDref _showsOnLocalDisplay;
        #endregion
        
        /// <summary>
        /// The section must be proven vacant before the local operating zone can be handed back to the signaller.
        /// </summary>
        [XmlElement(Order=0)]
        public tElementWithIDref mustBeVacantForReturn
        {
            get
            {
                if ((_mustBeVacantForReturn == null))
                {
                    _mustBeVacantForReturn = new tElementWithIDref();
                }
                return _mustBeVacantForReturn;
            }
            set
            {
                _mustBeVacantForReturn = value;
            }
        }
        
        [XmlElement(Order=1)]
        public tElementWithIDref showsOnLocalDisplay
        {
            get
            {
                if ((_showsOnLocalDisplay == null))
                {
                    _showsOnLocalDisplay = new tElementWithIDref();
                }
                return _showsOnLocalDisplay;
            }
            set
            {
                _showsOnLocalDisplay = value;
            }
        }
    }
    
    /// <summary>
    /// A derailer within the local operating zone.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("lozDerailerRelation", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class LozDerailerRelation : LozAssetRelation
    {
        #region Private fields
        private tElementWithIDref _appliesToDerailerElement;
        private DerailingPositionTypes _needsPositionForReturn;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref appliesToDerailerElement
        {
            get
            {
                if ((_appliesToDerailerElement == null))
                {
                    _appliesToDerailerElement = new tElementWithIDref();
                }
                return _appliesToDerailerElement;
            }
            set
            {
                _appliesToDerailerElement = value;
            }
        }
        
        /// <summary>
        /// The derailer must be in the given position before the local operating zone can be handed back to the signaller.
        /// </summary>
        [XmlElement(Order=1)]
        public DerailingPositionTypes needsPositionForReturn
        {
            get
            {
                return _needsPositionForReturn;
            }
            set
            {
                _needsPositionForReturn = value;
            }
        }
    }
    
    /// <summary>
    /// A point within the local operating zone.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("lozPointRelation", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class LozPointRelation : LozAssetRelation
    {
        #region Private fields
        private tElementWithIDref _appliesToPointElement;
        private LeftRight _needsPositionForReturn;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref appliesToPointElement
        {
            get
            {
                if ((_appliesToPointElement == null))
                {
                    _appliesToPointElement = new tElementWithIDref();
                }
                return _appliesToPointElement;
            }
            set
            {
                _appliesToPointElement = value;
            }
        }
        
        /// <summary>
        /// The point blades must be in the given position before the local operating zone can be handed back to the signaller.
        /// </summary>
        [XmlElement(Order=1)]
        public LeftRight needsPositionForReturn
        {
            get
            {
                return _needsPositionForReturn;
            }
            set
            {
                _needsPositionForReturn = value;
            }
        }
    }
    
    /// <summary>
    /// A key release instrument within the local operating zone.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("lozKeyReleaseInstrumentRelation", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class LozKeyReleaseInstrumentRelation : LozAssetRelation
    {
        #region Private fields
        private tElementWithIDref _appliesToKeyReleaseInstrument;
        private bool _needsKeyPresenceForReturn;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref appliesToKeyReleaseInstrument
        {
            get
            {
                if ((_appliesToKeyReleaseInstrument == null))
                {
                    _appliesToKeyReleaseInstrument = new tElementWithIDref();
                }
                return _appliesToKeyReleaseInstrument;
            }
            set
            {
                _appliesToKeyReleaseInstrument = value;
            }
        }
        
        /// <summary>
        /// True: The key must be locked inside the key release instrument before the local operating zone can be handed back to the signaller.
        /// nl-NL: grendel moet ter plekke zijn vrijgegeven.
        /// 
        /// False: the interlocking doesn't check the presence of the key before taking back the zone.
        /// </summary>
        [XmlElement(Order=1)]
        public bool needsKeyPresenceForReturn
        {
            get
            {
                return _needsKeyPresenceForReturn;
            }
            set
            {
                _needsKeyPresenceForReturn = value;
            }
        }
    }
    
    /// <summary>
    /// A signal within the local operating zone.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("lozSignalRelation", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class LozSignalRelation : LozAssetRelation
    {
        #region Private fields
        private tElementWithIDref _appliesToSignal;
        private tElementWithIDref _needsAspectForReturn;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref appliesToSignal
        {
            get
            {
                if ((_appliesToSignal == null))
                {
                    _appliesToSignal = new tElementWithIDref();
                }
                return _appliesToSignal;
            }
            set
            {
                _appliesToSignal = value;
            }
        }
        
        /// <summary>
        /// The signal must show the given aspect, generally stop, before the local operating zone can be handed back to the signaller.
        /// </summary>
        [XmlElement(Order=1)]
        public tElementWithIDref needsAspectForReturn
        {
            get
            {
                if ((_needsAspectForReturn == null))
                {
                    _needsAspectForReturn = new tElementWithIDref();
                }
                return _needsAspectForReturn;
            }
            set
            {
                _needsAspectForReturn = value;
            }
        }
    }
    
    /// <summary>
    /// Area that is under temporary possession, typically for maintenance activities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("workZone", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class WorkZone : ConfiguredBaseObject
    {
    }
    
    /// <summary>
    /// Set of National Values that can be reused, e.g. at (national) borders.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("etcsNationalValueSet", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class EtcsNationalValueSet : ConfiguredBaseObject
    {
        #region Private fields
        private EtcsNationalValuePair[] _hasNvElement;
        #endregion
        
        /// <summary>
        /// The ETCS National Value change marker has an ordered list of NV elements.
        /// </summary>
        [XmlElement("hasNvElement", Order=0)]
        public EtcsNationalValuePair[] hasNvElement
        {
            get
            {
                return _hasNvElement;
            }
            set
            {
                _hasNvElement = value;
            }
        }
    }
    
    /// <summary>
    /// A National Value pair of a <i>key, </i>the name of the National Value, and its <i>value.</i>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("etcsNationalValuePair", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class EtcsNationalValuePair
    {
        #region Private fields
        private EtcsNationalValuePair[] _hasSubset;
        private string _key;
        private string _value;
        #endregion
        
        /// <summary>
        /// A nested subset of key,value-pairs.
        /// </summary>
        [XmlElement("hasSubset", Order=0)]
        public EtcsNationalValuePair[] hasSubset
        {
            get
            {
                return _hasSubset;
            }
            set
            {
                _hasSubset = value;
            }
        }
        
        /// <summary>
        /// Identifier of the national value, e.g. Q_NVDRIVER_ADHES, V_NVREL, M_NVDERUN or D_NVROLL
        /// </summary>
        [XmlAttribute]
        public string key
        {
            get
            {
                return _key;
            }
            set
            {
                _key = value;
            }
        }
        
        /// <summary>
        /// The actual value of the national value identified by the key. If a subset of key,value-pairs follows, the value isn't needed.
        /// </summary>
        [XmlAttribute]
        public string value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
    }
    
    /// <summary>
    /// A shunting route can normally be activated even if one or more sections are not proven vacant. This class selects which sections must be proven vacant.
    /// If no sections are needed vacant no ShuntingRouteSectionProving instance is created.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("shuntingRouteSectionProving", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class ShuntingRouteSectionProving : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref _appliesToShuntingRoute;
        private tElementWithIDref[] _needsVacantSection;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref appliesToShuntingRoute
        {
            get
            {
                if ((_appliesToShuntingRoute == null))
                {
                    _appliesToShuntingRoute = new tElementWithIDref();
                }
                return _appliesToShuntingRoute;
            }
            set
            {
                _appliesToShuntingRoute = value;
            }
        }
        
        /// <summary>
        /// The section(s) that must be proven vacant.
        /// </summary>
        [XmlElement("needsVacantSection", Order=1)]
        public tElementWithIDref[] needsVacantSection
        {
            get
            {
                return _needsVacantSection;
            }
            set
            {
                _needsVacantSection = value;
            }
        }
    }
    
    /// <summary>
    /// Signals are placed at regulated positions. In exceptional circumstances, the signal is placed differently which may require additional documentation, eg. a 3D BIM model, and dispensation.
    /// This common EULYNX DP class can therefore be tailored to national needs. For instance:
    /// <ul>
    /// <li>Germany: two double-track arrangements would lead to confusing situations so the signals can be placed at the other side of the track. A checkered sign points out this fact to the driver.</li>
    /// </ul>
    /// <ul>
    /// <li>France: signals in Alsace - Lorraine region are placed on the other side as in other French regions. </li>
    /// </ul>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("specialPositionArrangement", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public abstract partial class SpecialPositionArrangement : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref _appliesToSignal;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref appliesToSignal
        {
            get
            {
                if ((_appliesToSignal == null))
                {
                    _appliesToSignal = new tElementWithIDref();
                }
                return _appliesToSignal;
            }
            set
            {
                _appliesToSignal = value;
            }
        }
    }
    
    /// <summary>
    /// A track asset is a named physical or virtual element that is relevant to signalling. E.g. point, signal, train detector or train detection section.
    /// 
    /// Most track assets are 'iron assets' but for convenience, one may define virtual track assets. These have no physical appearance but may be represented by e.g. a "chalk mark" on the rails. Examples are the virtual exit signal of certain routes.
    /// 
    /// Logical classes such as routes and TVP sections are not considered track assets.
    /// </summary>
    [XmlIncludeAttribute(typeof(TpsDevice))]
    [XmlIncludeAttribute(typeof(TpsLinearDevice))]
    [XmlIncludeAttribute(typeof(TpsSpotDevice))]
    [XmlIncludeAttribute(typeof(Detonator))]
    [XmlIncludeAttribute(typeof(Balise))]
    [XmlIncludeAttribute(typeof(EtcsBalise))]
    [XmlIncludeAttribute(typeof(VehicleStop))]
    [XmlIncludeAttribute(typeof(BufferStop))]
    [XmlIncludeAttribute(typeof(SandHump))]
    [XmlIncludeAttribute(typeof(LevelCrossingSystem))]
    [XmlIncludeAttribute(typeof(InterlockingIntegratedLevelCrossing))]
    [XmlIncludeAttribute(typeof(MainSignalProtectedLevelCrossing))]
    [XmlIncludeAttribute(typeof(SelfSupervisedLevelCrossing))]
    [XmlIncludeAttribute(typeof(LocallyMonitoredLevelCrossing))]
    [XmlIncludeAttribute(typeof(EtcsLevelCrossingSystem))]
    [XmlIncludeAttribute(typeof(VehiclePassageDetector))]
    [XmlIncludeAttribute(typeof(TdsComponent))]
    [XmlIncludeAttribute(typeof(AxleCountingHead))]
    [XmlIncludeAttribute(typeof(InsulatedRailJoint))]
    [XmlIncludeAttribute(typeof(ElectricJoint))]
    [XmlIncludeAttribute(typeof(VehicleSensor))]
    [XmlIncludeAttribute(typeof(TcSensor))]
    [XmlIncludeAttribute(typeof(TcSensorCombined))]
    [XmlIncludeAttribute(typeof(Loop))]
    [XmlIncludeAttribute(typeof(Treadle))]
    [XmlIncludeAttribute(typeof(EMSensor))]
    [XmlIncludeAttribute(typeof(BufferSensor))]
    [XmlIncludeAttribute(typeof(DepressionBar))]
    [XmlIncludeAttribute(typeof(MovableElement))]
    [XmlIncludeAttribute(typeof(MovableSystem))]
    [XmlIncludeAttribute(typeof(RailwayBarrier))]
    [XmlIncludeAttribute(typeof(MovableCatenary))]
    [XmlIncludeAttribute(typeof(Turnout))]
    [XmlIncludeAttribute(typeof(Derailer))]
    [XmlIncludeAttribute(typeof(PointCrossing))]
    [XmlIncludeAttribute(typeof(Point))]
    [XmlIncludeAttribute(typeof(Crossing))]
    [XmlIncludeAttribute(typeof(MovableBridge))]
    [XmlIncludeAttribute(typeof(MovableComponent))]
    [XmlIncludeAttribute(typeof(Mechanism))]
    [XmlIncludeAttribute(typeof(PoweredMechanism))]
    [XmlIncludeAttribute(typeof(ElectricDrive))]
    [XmlIncludeAttribute(typeof(HydraulicDrive))]
    [XmlIncludeAttribute(typeof(PneumaticDrive))]
    [XmlIncludeAttribute(typeof(HandOperatedMechanism))]
    [XmlIncludeAttribute(typeof(MechanicalMechanism))]
    [XmlIncludeAttribute(typeof(TurnoutComponent))]
    [XmlIncludeAttribute(typeof(PointBlades))]
    [XmlIncludeAttribute(typeof(PointBlade))]
    [XmlIncludeAttribute(typeof(DerailerComponent))]
    [XmlIncludeAttribute(typeof(Frog))]
    [XmlIncludeAttribute(typeof(FacingPointLock))]
    [XmlIncludeAttribute(typeof(TvpSection))]
    [XmlIncludeAttribute(typeof(Signal))]
    [XmlIncludeAttribute(typeof(VirtualSignal))]
    [XmlIncludeAttribute(typeof(NonPhysicalSignal))]
    [XmlIncludeAttribute(typeof(PhysicalSignal))]
    [XmlIncludeAttribute(typeof(Sign))]
    [XmlIncludeAttribute(typeof(Milepost))]
    [XmlIncludeAttribute(typeof(ActiveSignal))]
    [XmlIncludeAttribute(typeof(MechanicalSignal))]
    [XmlIncludeAttribute(typeof(LightSignal))]
    [XmlIncludeAttribute(typeof(CompoundLogicalObject))]
    [XmlIncludeAttribute(typeof(TcFeederReceiverElement))]
    [XmlIncludeAttribute(typeof(TdsSection))]
    [XmlIncludeAttribute(typeof(AxleCountingSystem))]
    [XmlIncludeAttribute(typeof(TrackCircuit))]
    [XmlIncludeAttribute(typeof(LowFrequencyTrackCircuit))]
    [XmlIncludeAttribute(typeof(AudioFrequencyTrackCircuit))]
    [XmlIncludeAttribute(typeof(FtgsTrackCircuit))]
    [XmlIncludeAttribute(typeof(DcVoltageTrackCircuit))]
    [XmlIncludeAttribute(typeof(HviTrackCircuit))]
    [XmlIncludeAttribute(typeof(Controller))]
    [XmlIncludeAttribute(typeof(VirtualController))]
    [XmlIncludeAttribute(typeof(FieldObjectController))]
    [XmlIncludeAttribute(typeof(TdsEvaluator))]
    [XmlIncludeAttribute(typeof(SignalController))]
    [XmlIncludeAttribute(typeof(IoController))]
    [XmlIncludeAttribute(typeof(LeuSystem))]
    [XmlIncludeAttribute(typeof(RBC))]
    [XmlIncludeAttribute(typeof(Interlocking))]
    [XmlIncludeAttribute(typeof(DecentralInterlocking))]
    [XmlIncludeAttribute(typeof(CentralInterlocking))]
    [XmlIncludeAttribute(typeof(TrafficControlSystem))]
    [XmlIncludeAttribute(typeof(ReleaseInstrument))]
    [XmlIncludeAttribute(typeof(KeyReleaseInstrument))]
    [XmlIncludeAttribute(typeof(ShutInSidingKeyReleaseInstrument))]
    [XmlIncludeAttribute(typeof(TcConnector))]
    [XmlIncludeAttribute(typeof(Bond))]
    [XmlIncludeAttribute(typeof(ImpedanceBond))]
    [XmlIncludeAttribute(typeof(TcFeedingReceivingCable))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("trackAsset", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class TrackAsset : ConfiguredBaseObject
    {
    }
    
    /// <summary>
    /// Device that transmits train protection information to a passing train.
    /// This class can be instantiated if the device is not (yet) planned and located in detail.
    /// </summary>
    [XmlIncludeAttribute(typeof(TpsLinearDevice))]
    [XmlIncludeAttribute(typeof(TpsSpotDevice))]
    [XmlIncludeAttribute(typeof(Detonator))]
    [XmlIncludeAttribute(typeof(Balise))]
    [XmlIncludeAttribute(typeof(EtcsBalise))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("tpsDevice", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class TpsDevice : TrackAsset
    {
        #region Private fields
        private tElementWithIDref _implementsTpsDataTxSystem;
        private tElementWithIDref _isLocatedAt;
        private int _positionInSystem;
        #endregion
        
        /// <summary>
        /// The device implements a TP information point.
        /// The device can implement several systems, i.e. a Eurobalise can implement ETCS L1, L2 or Berlin S-Bahn.
        /// </summary>
        [XmlElement(Order=0)]
        public tElementWithIDref implementsTpsDataTxSystem
        {
            get
            {
                if ((_implementsTpsDataTxSystem == null))
                {
                    _implementsTpsDataTxSystem = new tElementWithIDref();
                }
                return _implementsTpsDataTxSystem;
            }
            set
            {
                _implementsTpsDataTxSystem = value;
            }
        }
        
        /// <summary>
        /// The location of the device.
        /// </summary>
        [XmlElement(Order=1)]
        public tElementWithIDref isLocatedAt
        {
            get
            {
                if ((_isLocatedAt == null))
                {
                    _isLocatedAt = new tElementWithIDref();
                }
                return _isLocatedAt;
            }
            set
            {
                _isLocatedAt = value;
            }
        }
        
        /// <summary>
        /// 0 is first device, 1 is second, etc.
        /// </summary>
        [XmlElement(Order=2)]
        public int positionInSystem
        {
            get
            {
                return _positionInSystem;
            }
            set
            {
                _positionInSystem = value;
            }
        }
    }
    
    /// <summary>
    /// A loop transmitting train protection information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("tpsLinearDevice", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class TpsLinearDevice : TpsDevice
    {
        #region Private fields
        private tElementWithIDref _isLineLocatedAt;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref isLineLocatedAt
        {
            get
            {
                if ((_isLineLocatedAt == null))
                {
                    _isLineLocatedAt = new tElementWithIDref();
                }
                return _isLineLocatedAt;
            }
            set
            {
                _isLineLocatedAt = value;
            }
        }
    }
    
    /// <summary>
    /// A TPS device of limited length.
    /// </summary>
    [XmlIncludeAttribute(typeof(Detonator))]
    [XmlIncludeAttribute(typeof(Balise))]
    [XmlIncludeAttribute(typeof(EtcsBalise))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("tpsSpotDevice", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class TpsSpotDevice : TpsDevice
    {
    }
    
    /// <summary>
    /// A detonator creates an explosion to warn the driver about imminent danger ahead.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("detonator", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class Detonator : TpsSpotDevice
    {
        #region Private fields
        private tElementWithIDref _isActivatedByTreadle;
        private string _type;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref isActivatedByTreadle
        {
            get
            {
                if ((_isActivatedByTreadle == null))
                {
                    _isActivatedByTreadle = new tElementWithIDref();
                }
                return _isActivatedByTreadle;
            }
            set
            {
                _isActivatedByTreadle = value;
            }
        }
        
        /// <summary>
        /// Can inform about
        /// <ul>
        /// <li>on or off the rail.</li>
        /// <li>trailable.</li>
        /// </ul>
        /// </summary>
        [XmlAttribute]
        public string type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }
    }
    
    /// <summary>
    /// TPS Device using balise technology, e.g. euro balise, ATB NG or metro balises.
    /// A balise is energised by a passing train antenna and returns a series of bits to the antenna.
    /// </summary>
    [XmlIncludeAttribute(typeof(EtcsBalise))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("balise", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class Balise : TpsSpotDevice
    {
        #region Private fields
        private bool _isSwitchable;
        private string _mountingInstructions;
        #endregion
        
        /// <summary>
        /// True if the balise is switchable, i.e. is controlled.
        /// False if the balise is fixed.
        /// 
        /// DE: Transparent- oder Festdatenbalise.
        /// </summary>
        [XmlAttribute]
        public bool isSwitchable
        {
            get
            {
                return _isSwitchable;
            }
            set
            {
                _isSwitchable = value;
            }
        }
        
        /// <summary>
        /// Information given when balise mounting is special or exceptional.
        /// e.g.
        /// <ul>
        /// <li>reinforced concrete sleeper, no drilling allowed,</li>
        /// <li>type of special fixing device needed, e.g. Vortok</li>
        /// </ul>
        /// </summary>
        [XmlAttribute]
        public string mountingInstructions
        {
            get
            {
                return _mountingInstructions;
            }
            set
            {
                _mountingInstructions = value;
            }
        }
    }
    
    /// <summary>
    /// Eurobalise in an ETCS system.
    /// The model type as defined by the manufacturer can be described in the <a href="$feature://{3D2A1B2D-BBA0-4bce-8064-8F86DBA8783F}"><font color="#0000ff"><u>Supplier Information class.</u></font></a>
    /// Variable N_PIG is inherited from attribute "positionInSystem".
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("etcsBalise", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class EtcsBalise : Balise
    {
        #region Private fields
        private tElementWithIDref _duplicatesEtcsBalise;
        private tElementWithIDref _isControlledByLeuPort;
        #endregion
        
        /// <summary>
        /// Indicates whether this balise is a duplicate of an adjacent balise.
        /// Implements ETCS variable M_DUP.
        /// Can be left out in early planning stages when this information is not yet known.
        /// </summary>
        [XmlElement(Order=0)]
        public tElementWithIDref duplicatesEtcsBalise
        {
            get
            {
                if ((_duplicatesEtcsBalise == null))
                {
                    _duplicatesEtcsBalise = new tElementWithIDref();
                }
                return _duplicatesEtcsBalise;
            }
            set
            {
                _duplicatesEtcsBalise = value;
            }
        }
        
        /// <summary>
        /// An active balise is controlled by a port.
        /// </summary>
        [XmlElement(Order=1)]
        public tElementWithIDref isControlledByLeuPort
        {
            get
            {
                if ((_isControlledByLeuPort == null))
                {
                    _isControlledByLeuPort = new tElementWithIDref();
                }
                return _isControlledByLeuPort;
            }
            set
            {
                _isControlledByLeuPort = value;
            }
        }
    }
    
    /// <summary>
    /// Installation for physically stopping trains. The track may continue beyond the device.
    /// </summary>
    [XmlIncludeAttribute(typeof(BufferStop))]
    [XmlIncludeAttribute(typeof(SandHump))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("vehicleStop", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class VehicleStop : TrackAsset
    {
        #region Private fields
        private VehicleStopTypes _isOfVehicleStopType;
        private tElementWithIDref _refersToRtmVehicleStop;
        private tElementWithIDref[] _stopsVehicleAtLocation;
        #endregion
        
        /// <summary>
        /// Optional because the vehicle stop can be specialised
        /// </summary>
        [XmlElement(Order=0)]
        public VehicleStopTypes isOfVehicleStopType
        {
            get
            {
                return _isOfVehicleStopType;
            }
            set
            {
                _isOfVehicleStopType = value;
            }
        }
        
        [XmlElement(Order=1)]
        public tElementWithIDref refersToRtmVehicleStop
        {
            get
            {
                if ((_refersToRtmVehicleStop == null))
                {
                    _refersToRtmVehicleStop = new tElementWithIDref();
                }
                return _refersToRtmVehicleStop;
            }
            set
            {
                _refersToRtmVehicleStop = value;
            }
        }
        
        /// <summary>
        /// Functional definition of the location up to where a vehicle can advance. It provides both location of the spot where the vehicle is stopped and working direction
        /// </summary>
        [XmlElement("stopsVehicleAtLocation", Order=2)]
        public tElementWithIDref[] stopsVehicleAtLocation
        {
            get
            {
                return _stopsVehicleAtLocation;
            }
            set
            {
                _stopsVehicleAtLocation = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum VehicleStopTypes
    {
        /// <summary>
        /// For traversal., turntable, crossed sleepers.
        /// de-DE: Schiebeb&#252;hne
        /// </summary>
        other,
        ferryTerminal,
        /// <summary>
        /// Ramp at the end of track for loading cars.
        /// </summary>
        headRamp,
        /// <summary>
        /// A wedge fixed to the rails at the end of the track that keeps cars from rolling away.
        /// </summary>
        scotchBlock,
    }
    
    /// <summary>
    /// A device to prevent railway vehicles from going past the end of a physical section of track.
    /// de-DE: Prellbock
    /// fr-FR: heurtoir
    /// nl-NL: stootjuk
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("bufferStop", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class BufferStop : VehicleStop
    {
        #region Private fields
        private BufferStopTypes _isOfBufferStopType;
        #endregion
        
        [XmlElement(Order=0)]
        public BufferStopTypes isOfBufferStopType
        {
            get
            {
                return _isOfBufferStopType;
            }
            set
            {
                _isOfBufferStopType = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum BufferStopTypes
    {
        @fixed,
        /// <summary>
        /// The impact of a train is dissipated by friction, e.g. the train pushes the buffer stop some way along the track.
        /// </summary>
        friction,
        /// <summary>
        /// The impact energy of the train is dissipated by a hydraulic piston.
        /// </summary>
        hydraulic,
        other,
    }
    
    /// <summary>
    /// A sand hump, drag or other pile of sand designed to stop an overrunning vehicle.
    /// Do not use the attribute isOfVehicleStopType when using sand hump.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("sandHump", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class SandHump : VehicleStop
    {
        #region Private fields
        private Length _hasLength;
        #endregion
        
        [XmlElement(Order=0)]
        public Length hasLength
        {
            get
            {
                if ((_hasLength == null))
                {
                    _hasLength = new Length();
                }
                return _hasLength;
            }
            set
            {
                _hasLength = value;
            }
        }
    }
    
    /// <summary>
    /// The facility that protects a track crossing.
    /// </summary>
    [XmlIncludeAttribute(typeof(InterlockingIntegratedLevelCrossing))]
    [XmlIncludeAttribute(typeof(MainSignalProtectedLevelCrossing))]
    [XmlIncludeAttribute(typeof(SelfSupervisedLevelCrossing))]
    [XmlIncludeAttribute(typeof(LocallyMonitoredLevelCrossing))]
    [XmlIncludeAttribute(typeof(EtcsLevelCrossingSystem))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("levelCrossingSystem", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class LevelCrossingSystem : TrackAsset
    {
        #region Private fields
        private tElementWithIDref _protectsTrackCrossing;
        private bool _dependsOnRoadTrafficLights;
        private bool _hasObstacleDetector;
        private string _protectionType;
        private string _technologyType;
        #endregion
        
        /// <summary>
        /// the system can protect a street (including cycle path, footpath)
        /// </summary>
        [XmlElement(Order=0)]
        public tElementWithIDref protectsTrackCrossing
        {
            get
            {
                if ((_protectsTrackCrossing == null))
                {
                    _protectsTrackCrossing = new tElementWithIDref();
                }
                return _protectsTrackCrossing;
            }
            set
            {
                _protectsTrackCrossing = value;
            }
        }
        
        /// <summary>
        /// Informs whether the LX system interfaces with road traffic lights.
        /// Road traffic lights range from lights warning of approaching train to road traffic light system.
        /// </summary>
        [XmlAttribute]
        public bool dependsOnRoadTrafficLights
        {
            get
            {
                return _dependsOnRoadTrafficLights;
            }
            set
            {
                _dependsOnRoadTrafficLights = value;
            }
        }
        
        /// <summary>
        /// Detects obstacles between barriers.
        /// Normally only used for full barriers.
        /// </summary>
        [XmlAttribute]
        public bool hasObstacleDetector
        {
            get
            {
                return _hasObstacleDetector;
            }
            set
            {
                _hasObstacleDetector = value;
            }
        }
        
        /// <summary>
        /// Type of protection:
        /// <ul>
        /// <li>half-barrier</li>
        /// <li>full-barrier</li>
        /// <li>user-worked crossing with telephone</li>
        /// </ul>
        /// </summary>
        [XmlAttribute]
        public string protectionType
        {
            get
            {
                return _protectionType;
            }
            set
            {
                _protectionType = value;
            }
        }
        
        /// <summary>
        /// To store e.g. the supplier designation: "Siemens LC", "EBUET 80".
        /// <ul>
        /// <li>de-DE: e.g. Anrufschranke, BUES2000</li>
        /// <li>it-IT: PL privati</li>
        /// <li>nl-NL: AHOB</li>
        /// </ul>
        /// This value may be specialised in the national domain (see e.g. DB domain).
        /// </summary>
        [XmlAttribute]
        public string technologyType
        {
            get
            {
                return _technologyType;
            }
            set
            {
                _technologyType = value;
            }
        }
    }
    
    /// <summary>
    /// Level crossing system integrated into the IL logic.
    /// Derive from controlled track asset pattern.
    /// </summary>
    [XmlIncludeAttribute(typeof(MainSignalProtectedLevelCrossing))]
    [XmlIncludeAttribute(typeof(SelfSupervisedLevelCrossing))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("interlockingIntegratedLevelCrossing", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class InterlockingIntegratedLevelCrossing : LevelCrossingSystem
    {
    }
    
    /// <summary>
    /// Level crossing system integrated with a route and protected by a signal, normally a main signal.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("mainSignalProtectedLevelCrossing", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class MainSignalProtectedLevelCrossing : InterlockingIntegratedLevelCrossing
    {
    }
    
    /// <summary>
    /// Warns and/or closes the barriers when activated by train approach detection. When this function fails, it guarantees to report failure to the interlocking.
    /// Also known as autonomous level crossing.
    /// de-DE: F&#252;-B&#220;, Fern&#252;berwachter Bahn&#252;bergang
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("selfSupervisedLevelCrossing", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class SelfSupervisedLevelCrossing : InterlockingIntegratedLevelCrossing
    {
    }
    
    /// <summary>
    /// The level crossing status is locally monitored by the driver, and not integrated with IL logic: a level crossing system failure affects a signal that the driver observes.
    /// Failure and health status can be monitored and transmitted to a unspecified system (other than the IL logic).
    /// de-DE: &#220;S-B&#220; (&#220;berwachungssignalB&#220;)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("locallyMonitoredLevelCrossing", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class LocallyMonitoredLevelCrossing : LevelCrossingSystem
    {
    }
    
    /// <summary>
    /// Level crossing information associated with ETCS operations.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("etcsLevelCrossingSystem", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class EtcsLevelCrossingSystem : LevelCrossingSystem
    {
    }
    
    /// <summary>
    /// Line-side device for detecting passage of a rail vehicle.
    /// 
    /// en-UK: strike-in or strike-out detector.
    /// </summary>
    [XmlIncludeAttribute(typeof(TdsComponent))]
    [XmlIncludeAttribute(typeof(AxleCountingHead))]
    [XmlIncludeAttribute(typeof(InsulatedRailJoint))]
    [XmlIncludeAttribute(typeof(ElectricJoint))]
    [XmlIncludeAttribute(typeof(VehicleSensor))]
    [XmlIncludeAttribute(typeof(TcSensor))]
    [XmlIncludeAttribute(typeof(TcSensorCombined))]
    [XmlIncludeAttribute(typeof(Loop))]
    [XmlIncludeAttribute(typeof(Treadle))]
    [XmlIncludeAttribute(typeof(EMSensor))]
    [XmlIncludeAttribute(typeof(BufferSensor))]
    [XmlIncludeAttribute(typeof(DepressionBar))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("vehiclePassageDetector", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public abstract partial class VehiclePassageDetector : TrackAsset
    {
        #region Private fields
        private tElementWithIDref[] _isConstrainedByPositionOf;
        private tElementWithIDref _occupiesTdsSection;
        private tElementWithIDref _refersToRtmTrainPassageDetector;
        #endregion
        
        /// <summary>
        /// Reference to an asset or other location used to validate that the position of the detector is at a suitable distance from the location proxy.
        /// </summary>
        [XmlElement("isConstrainedByPositionOf", Order=0)]
        public tElementWithIDref[] isConstrainedByPositionOf
        {
            get
            {
                return _isConstrainedByPositionOf;
            }
            set
            {
                _isConstrainedByPositionOf = value;
            }
        }
        
        /// <summary>
        /// Only given when the detector is needed to make occupancy detection of the section more reliable.
        /// </summary>
        [XmlElement(Order=1)]
        public tElementWithIDref occupiesTdsSection
        {
            get
            {
                if ((_occupiesTdsSection == null))
                {
                    _occupiesTdsSection = new tElementWithIDref();
                }
                return _occupiesTdsSection;
            }
            set
            {
                _occupiesTdsSection = value;
            }
        }
        
        /// <summary>
        /// The detector in the RTM namespace is associated with a spot location. This spot location is often the extremity of a TVD section. If so, this spot location shouldn't conflict with the location of the TVP section.
        /// </summary>
        [XmlElement(Order=2)]
        public tElementWithIDref refersToRtmTrainPassageDetector
        {
            get
            {
                if ((_refersToRtmTrainPassageDetector == null))
                {
                    _refersToRtmTrainPassageDetector = new tElementWithIDref();
                }
                return _refersToRtmTrainPassageDetector;
            }
            set
            {
                _refersToRtmTrainPassageDetector = value;
            }
        }
    }
    
    /// <summary>
    /// Line-side component of a train detection installation, typically a rail joint or axle counter head.
    /// It is located at a spot location at one TVP boundary, i.e. the spot up to where the train detection can safely detect train vacancy. The TVP section extremities must coincide exactly with these spot locations.
    /// </summary>
    [XmlIncludeAttribute(typeof(AxleCountingHead))]
    [XmlIncludeAttribute(typeof(InsulatedRailJoint))]
    [XmlIncludeAttribute(typeof(ElectricJoint))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("tdsComponent", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class TdsComponent : VehiclePassageDetector
    {
        #region Private fields
        private tElementWithIDref[] _limitsTdsSection;
        #endregion
        
        [XmlElement("limitsTdsSection", Order=0)]
        public tElementWithIDref[] limitsTdsSection
        {
            get
            {
                return _limitsTdsSection;
            }
            set
            {
                _limitsTdsSection = value;
            }
        }
    }
    
    /// <summary>
    /// The sender plus receiver of an individual axle counter head mounted on or very near the rail.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("axleCountingHead", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class AxleCountingHead : TdsComponent
    {
        #region Private fields
        private string _railType;
        private bool _separatePowerAndData;
        #endregion
        
        /// <summary>
        /// Type of rail on which the counting head is mounted.
        /// For instance UIC 54, 50,  UIC 60, S55.
        /// </summary>
        [XmlAttribute]
        public string railType
        {
            get
            {
                return _railType;
            }
            set
            {
                _railType = value;
            }
        }
        
        /// <summary>
        /// True if the data communication partner does not supply power.
        /// </summary>
        [XmlAttribute]
        public bool separatePowerAndData
        {
            get
            {
                return _separatePowerAndData;
            }
            set
            {
                _separatePowerAndData = value;
            }
        }
    }
    
    /// <summary>
    /// Electric (galvanic) separation joint. The rail is cut.
    /// These joints can be situated at the extremity of a track circuit.
    /// They are also used <i>inside </i>TDS sections, where they do not limit a track circuit. For instance point sections where track return current needs a change of the earth rail.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("insulatedRailJoint", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class InsulatedRailJoint : TdsComponent
    {
        #region Private fields
        private bool _singleRail;
        #endregion
        
        /// <summary>
        /// If true, which rail has the joint is determined by the spot location.
        /// </summary>
        [XmlAttribute]
        public bool singleRail
        {
            get
            {
                return _singleRail;
            }
            set
            {
                _singleRail = value;
            }
        }
    }
    
    /// <summary>
    /// Limit of a audio frequency section.
    /// The rail isn't cut.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("electricJoint", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class ElectricJoint : TdsComponent
    {
    }
    
    /// <summary>
    /// Vehicle-worked actuator: line-side installation that senses vehicle passage and subsequently switches other equipment. This class can be instantiated in case no appropriate subtype is available or the type is unknown during design.
    /// </summary>
    [XmlIncludeAttribute(typeof(TcSensor))]
    [XmlIncludeAttribute(typeof(TcSensorCombined))]
    [XmlIncludeAttribute(typeof(Loop))]
    [XmlIncludeAttribute(typeof(Treadle))]
    [XmlIncludeAttribute(typeof(EMSensor))]
    [XmlIncludeAttribute(typeof(BufferSensor))]
    [XmlIncludeAttribute(typeof(DepressionBar))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("vehicleSensor", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class VehicleSensor : VehiclePassageDetector
    {
    }
    
    /// <summary>
    /// A very short track circuit that is exclusively used for detecting train passage.
    /// Typically used where axle counters are deployed or in the absence of other train detection.
    /// DE: isolierte Schiene
    /// </summary>
    [XmlIncludeAttribute(typeof(TcSensorCombined))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("tcSensor", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class TcSensor : VehicleSensor
    {
    }
    
    /// <summary>
    /// Track circuit that is both used for vacancy detection and train approach detection.
    /// de-DE: isolierte Schiene, FMA mitbenutzt.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("tcSensorCombined", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class TcSensorCombined : TcSensor
    {
    }
    
    /// <summary>
    /// A loop that senses train passage.
    /// NR puts the spot location of the loop in the centre.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("loop", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class Loop : VehicleSensor
    {
        #region Private fields
        private int _singleDoubleTriple;
        #endregion
        
        /// <summary>
        /// A train detection loop typically is a single (1), double (2) or even triple (3) loop.
        /// </summary>
        [XmlAttribute]
        public int singleDoubleTriple
        {
            get
            {
                return _singleDoubleTriple;
            }
            set
            {
                _singleDoubleTriple = value;
            }
        }
    }
    
    /// <summary>
    /// Detector of train passage. The treadle can be electronic or mechanical.
    /// <ul>
    /// <li>fr-FR: p&#233;dale</li>
    /// <li>de-DE: Schienenkontakt</li>
    /// <li>nl-NL: pedaal</li>
    /// </ul>
    /// The working direction of the treadle can be given by the spot location's application direction.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("treadle", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class Treadle : VehicleSensor
    {
        #region Private fields
        private bool _normallyOpen;
        private bool _singleRail;
        #endregion
        
        /// <summary>
        /// True: normally open
        /// False: normally closed
        /// Not given means "other".
        /// </summary>
        [XmlAttribute]
        public bool normallyOpen
        {
            get
            {
                return _normallyOpen;
            }
            set
            {
                _normallyOpen = value;
            }
        }
        
        /// <summary>
        /// True: one treadle mounted on one rail (which rail is implied in the spot location)
        /// False: two treadles mounted on both rails
        /// </summary>
        [XmlAttribute]
        public bool singleRail
        {
            get
            {
                return _singleRail;
            }
            set
            {
                _singleRail = value;
            }
        }
    }
    
    /// <summary>
    /// Electromagnetic train sensor.
    /// A sensor with two heads can also detect the direction of a passing train.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("eMSensor", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class EMSensor : VehicleSensor
    {
        #region Private fields
        private int _numberOfHeads;
        #endregion
        
        /// <summary>
        /// Number of heads (1 or 2)
        /// </summary>
        [XmlAttribute]
        public int numberOfHeads
        {
            get
            {
                return _numberOfHeads;
            }
            set
            {
                _numberOfHeads = value;
            }
        }
    }
    
    /// <summary>
    /// A friction buffer stop can be equipped with a sensor that detects when an impact has shifted the buffer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("bufferSensor", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class BufferSensor : VehicleSensor
    {
        #region Private fields
        private tElementWithIDref _monitorsBufferStop;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref monitorsBufferStop
        {
            get
            {
                if ((_monitorsBufferStop == null))
                {
                    _monitorsBufferStop = new tElementWithIDref();
                }
                return _monitorsBufferStop;
            }
            set
            {
                _monitorsBufferStop = value;
            }
        }
    }
    
    /// <summary>
    /// A mechanical bar that is depressed by a passing train wheel.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("depressionBar", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class DepressionBar : VehicleSensor
    {
    }
    
    /// <summary>
    /// The set of components that are controlled and set simultaneously to one of two positions.
    /// 
    /// The movable element is an abstraction that associates the underlying movable components. The signaller selects and operates one movable element and needs not be concerned with the individual components of the movable element.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("movableElement", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class MovableElement : TrackAsset
    {
        #region Private fields
        private tElementWithIDref[] _associatesMovableComponent;
        private tElementWithIDref[] _hasClearancePointLocatedAt;
        private tElementWithIDref _hasFoulingPointIndicator;
        private tElementWithIDref[] _hasFoulingPointLocatedAt;
        private tElementWithIDref[] _isLogicallyCoupledWithMovableElement;
        private tElementWithIDref _refersToPositionIndicator;
        private tElementWithIDref[] _refersToReferenceDrawing;
        #endregion
        
        /// <summary>
        /// The set of components that are controlled and set simultaneously to one of two positions.
        /// For instance, a single drive can control a bar or wire that moves one or more components such as blades, derailers <i>in lockstep</i>.
        /// </summary>
        [XmlElement("associatesMovableComponent", Order=0)]
        public tElementWithIDref[] associatesMovableComponent
        {
            get
            {
                return _associatesMovableComponent;
            }
            set
            {
                _associatesMovableComponent = value;
            }
        }
        
        [XmlElement("hasClearancePointLocatedAt", Order=1)]
        public tElementWithIDref[] hasClearancePointLocatedAt
        {
            get
            {
                return _hasClearancePointLocatedAt;
            }
            set
            {
                _hasClearancePointLocatedAt = value;
            }
        }
        
        /// <summary>
        /// The fouling point indicator is placed between the tracks.
        /// NR has no physical fouling point marking.
        /// </summary>
        [XmlElement(Order=2)]
        public tElementWithIDref hasFoulingPointIndicator
        {
            get
            {
                if ((_hasFoulingPointIndicator == null))
                {
                    _hasFoulingPointIndicator = new tElementWithIDref();
                }
                return _hasFoulingPointIndicator;
            }
            set
            {
                _hasFoulingPointIndicator = value;
            }
        }
        
        /// <summary>
        /// The fouling point is a spot location. It is located with respect to the track(s) that are fouling.
        /// A decommissioned point may have no fouling point.
        /// </summary>
        [XmlElement("hasFoulingPointLocatedAt", Order=3)]
        public tElementWithIDref[] hasFoulingPointLocatedAt
        {
            get
            {
                return _hasFoulingPointLocatedAt;
            }
            set
            {
                _hasFoulingPointLocatedAt = value;
            }
        }
        
        /// <summary>
        /// For stating that points are coupled.
        /// </summary>
        [XmlElement("isLogicallyCoupledWithMovableElement", Order=4)]
        public tElementWithIDref[] isLogicallyCoupledWithMovableElement
        {
            get
            {
                return _isLogicallyCoupledWithMovableElement;
            }
            set
            {
                _isLogicallyCoupledWithMovableElement = value;
            }
        }
        
        /// <summary>
        /// Refers to a signal that shows the position of the movable element.
        /// </summary>
        [XmlElement(Order=5)]
        public tElementWithIDref refersToPositionIndicator
        {
            get
            {
                if ((_refersToPositionIndicator == null))
                {
                    _refersToPositionIndicator = new tElementWithIDref();
                }
                return _refersToPositionIndicator;
            }
            set
            {
                _refersToPositionIndicator = value;
            }
        }
        
        /// <summary>
        /// Needed when the movable element combines multiple components, e.g. double slip point and coupled derailer. (DB)
        /// </summary>
        [XmlElement("refersToReferenceDrawing", Order=6)]
        public tElementWithIDref[] refersToReferenceDrawing
        {
            get
            {
                return _refersToReferenceDrawing;
            }
            set
            {
                _refersToReferenceDrawing = value;
            }
        }
    }
    
    /// <summary>
    /// Abstract class for systems that have movable elements. Movable systems either divert, halt or derail railway traffic.
    /// </summary>
    [XmlIncludeAttribute(typeof(RailwayBarrier))]
    [XmlIncludeAttribute(typeof(MovableCatenary))]
    [XmlIncludeAttribute(typeof(Turnout))]
    [XmlIncludeAttribute(typeof(Derailer))]
    [XmlIncludeAttribute(typeof(PointCrossing))]
    [XmlIncludeAttribute(typeof(Point))]
    [XmlIncludeAttribute(typeof(Crossing))]
    [XmlIncludeAttribute(typeof(MovableBridge))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("movableSystem", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public abstract partial class MovableSystem : TrackAsset
    {
    }
    
    /// <summary>
    /// Movable barrier that can be opened or closed to <i>railway </i>traffic.
    /// For instance a water barrier in a tunnel or dike.
    /// 
    /// For barriers that block <i>road traffic</i>, refer to Level Crossings.
    /// Gated level crossings have a dual function, blocking either road or rail traffic. These are detected much like level crossing and therefore considered Level Crossings in our model.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("railwayBarrier", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class RailwayBarrier : MovableSystem
    {
    }
    
    /// <summary>
    /// An interlocking can throw an overhead catenary just like a point or a crossing with movable frog. A movable overhead catenary is always situated over a point or a crossing.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("movableCatenary", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class MovableCatenary : MovableSystem
    {
        #region Private fields
        private LeftRight _preferredPosition;
        #endregion
        
        [XmlElement(Order=0)]
        public LeftRight preferredPosition
        {
            get
            {
                return _preferredPosition;
            }
            set
            {
                _preferredPosition = value;
            }
        }
    }
    
    /// <summary>
    /// A system where tracks divert, cross or that derails railway traffic.
    /// 
    /// A generic term for point-, crossing- and derailer-systems.
    /// <ul>
    /// <li>de-DE: Weichen-, Kreuzungs- und Gleissperrenanlagen.</li>
    /// <li>fr-FR: Aiguillages, travers&#233;es obliques, taquet d&#233;railleurs.</li>
    /// <li>it-IT: Deviatoio, incrocio.</li>
    /// <li>nl-NL: Wissels, kruisingen, stopontspoorblokken.</li>
    /// </ul>
    /// </summary>
    [XmlIncludeAttribute(typeof(Derailer))]
    [XmlIncludeAttribute(typeof(PointCrossing))]
    [XmlIncludeAttribute(typeof(Point))]
    [XmlIncludeAttribute(typeof(Crossing))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("turnout", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class Turnout : MovableSystem
    {
        #region Private fields
        private MovableElement[] _isComposedOfMovableElement;
        private tElementWithIDref _refersToRtmPoint;
        #endregion
        
        [XmlElement("isComposedOfMovableElement", Order=0)]
        public MovableElement[] isComposedOfMovableElement
        {
            get
            {
                return _isComposedOfMovableElement;
            }
            set
            {
                _isComposedOfMovableElement = value;
            }
        }
        
        [XmlElement(Order=1)]
        public tElementWithIDref refersToRtmPoint
        {
            get
            {
                if ((_refersToRtmPoint == null))
                {
                    _refersToRtmPoint = new tElementWithIDref();
                }
                return _refersToRtmPoint;
            }
            set
            {
                _refersToRtmPoint = value;
            }
        }
    }
    
    /// <summary>
    /// Glossary definition: "A safety device attached to a rail, that will, when operated, cause a derailment of a train making an unauthorised movement."
    /// Not to be confused with trap points.
    /// The derailment direction (direction in which the train is ejected from the rails) is an attribute of the individual derailer component(s).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("derailer", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class Derailer : Turnout
    {
    }
    
    /// <summary>
    /// Generic term for point or crossing installation. Typically a complete replaceable track unit.
    /// </summary>
    [XmlIncludeAttribute(typeof(Point))]
    [XmlIncludeAttribute(typeof(Crossing))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("pointCrossing", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class PointCrossing : Turnout
    {
        #region Private fields
        private PointHeating _hasHeating;
        private tElementWithIDref _refersToSignalShowingDetection;
        private bool _hasSwitchedNose;
        private string _insulationType;
        private string _typeDescription;
        #endregion
        
        [XmlElement(Order=0)]
        public PointHeating hasHeating
        {
            get
            {
                if ((_hasHeating == null))
                {
                    _hasHeating = new PointHeating();
                }
                return _hasHeating;
            }
            set
            {
                _hasHeating = value;
            }
        }
        
        [XmlElement(Order=1)]
        public tElementWithIDref refersToSignalShowingDetection
        {
            get
            {
                if ((_refersToSignalShowingDetection == null))
                {
                    _refersToSignalShowingDetection = new tElementWithIDref();
                }
                return _refersToSignalShowingDetection;
            }
            set
            {
                _refersToSignalShowingDetection = value;
            }
        }
        
        /// <summary>
        /// True if the point or crossing has a swing nose. Crossings have a switched diamond, equating to two swing noses with no point.
        /// </summary>
        [XmlAttribute]
        public bool hasSwitchedNose
        {
            get
            {
                return _hasSwitchedNose;
            }
            set
            {
                _hasSwitchedNose = value;
            }
        }
        
        /// <summary>
        /// Type of insulation needed for equipment like stretcher bars in case the point or crossing is in an area with track circuits.
        /// </summary>
        [XmlAttribute]
        public string insulationType
        {
            get
            {
                return _insulationType;
            }
            set
            {
                _insulationType = value;
            }
        }
        
        /// <summary>
        /// String describing the type as required by regulated naming conventions.
        /// This string s for information only and should not be parsed for further processing.
        /// For instance de-DE: "EW 60 - 1200 - 1:18,5 - fb; Kr 54 - 1:18,5; DKW 49 - 190 - 1:9".
        /// </summary>
        [XmlAttribute]
        public string typeDescription
        {
            get
            {
                return _typeDescription;
            }
            set
            {
                _typeDescription = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("pointHeating", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class PointHeating
    {
        #region Private fields
        private string _heatSource;
        #endregion
        
        /// <summary>
        /// Typically gas, electric or geothermal.
        /// </summary>
        [XmlAttribute]
        public string heatSource
        {
            get
            {
                return _heatSource;
            }
            set
            {
                _heatSource = value;
            }
        }
    }
    
    /// <summary>
    /// en-GB: point
    /// en-US: switch
    /// fr-FR: aiguillage
    /// nl-NL: wissel
    /// de-DE: Weiche
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("point", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class Point : PointCrossing
    {
        #region Private fields
        private PointTypes _isOfPointType;
        #endregion
        
        [XmlElement(Order=0)]
        public PointTypes isOfPointType
        {
            get
            {
                return _isOfPointType;
            }
            set
            {
                _isOfPointType = value;
            }
        }
    }
    
    /// <summary>
    /// Types of point according to geometry.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum PointTypes
    {
        /// <summary>
        /// A simple point.
        /// de-DE: EW (einfache Weiche)
        /// </summary>
        simple,
        /// <summary>
        /// A simple point with contrary flexure geometry.
        /// de-DE: Aussenbogenweiche
        /// </summary>
        contraryFlexure,
        /// <summary>
        /// A simple point with similar flexure geometry.
        /// de-DE: Innenbogenweiche
        /// </summary>
        similarFlexure,
        /// <summary>
        /// A simple point with clothoid geometry.
        /// de-DE: Klotho&#239;denweiche
        /// </summary>
        clothoid,
        /// <summary>
        /// Point that can cause a derailing when in protecting position. This point has no nose.
        /// </summary>
        trap,
        other,
    }
    
    /// <summary>
    /// A crossing installation.
    /// Some crossings, especially high speed ones, have a switched diamond to close the gap at the crossing (DE: Flachkreuzung mit beweglichen Herzst&#252;ckspitzen, NL: kruising met beweegbaar puntstuk).
    /// Strictly speaking such a crossing isn't a turnout because the movable frog will not send the train left or right. This said, it does guide the train and its position is essential for avoiding derailment.
    /// The slip points, if any, to which the crossing connects are separate instances of the Point class.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("crossing", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class Crossing : PointCrossing
    {
        #region Private fields
        private Diamond[] _hasDiamond;
        private CrossingTypes _isOfCrossingType;
        #endregion
        
        [XmlElement("hasDiamond", Order=0)]
        public Diamond[] hasDiamond
        {
            get
            {
                return _hasDiamond;
            }
            set
            {
                _hasDiamond = value;
            }
        }
        
        /// <summary>
        /// Informs the type that this crossing is part of.
        /// </summary>
        [XmlElement(Order=1)]
        public CrossingTypes isOfCrossingType
        {
            get
            {
                return _isOfCrossingType;
            }
            set
            {
                _isOfCrossingType = value;
            }
        }
    }
    
    /// <summary>
    /// Types of crossings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum CrossingTypes
    {
        /// <summary>
        /// A crossing without slip junctions.
        /// </summary>
        simple,
        /// <summary>
        /// A single slip junction.
        /// </summary>
        singleSlip,
        /// <summary>
        /// A double slip junction.
        /// </summary>
        doubleSlip,
        other,
    }
    
    /// <summary>
    /// A railway bridge that can be opened or closed to train traffic.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("movableBridge", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class MovableBridge : MovableSystem
    {
    }
    
    /// <summary>
    /// The smallest mobile part of a point, i.e. a set of blades, a derailer, a movable frog, or the mechanism that drives other components.
    /// 
    /// A derailer can consist of mechanically coupled derailing devices, each of which applies to a separate track. The derailer is considered a movable element, the atomic derailing device is a component.
    /// 
    /// Notes:
    /// The locking mechanism, e.g. SNCF's VCC (Verrou Carter Coussinet) or NR's FPL (Facing Point Lock) qualifies as movable component. The FPL name maps to the designation. Trailable points have no locking mechanism.
    /// The manually applied lock is not considered a movable component.
    /// </summary>
    [XmlIncludeAttribute(typeof(Mechanism))]
    [XmlIncludeAttribute(typeof(PoweredMechanism))]
    [XmlIncludeAttribute(typeof(ElectricDrive))]
    [XmlIncludeAttribute(typeof(HydraulicDrive))]
    [XmlIncludeAttribute(typeof(PneumaticDrive))]
    [XmlIncludeAttribute(typeof(HandOperatedMechanism))]
    [XmlIncludeAttribute(typeof(MechanicalMechanism))]
    [XmlIncludeAttribute(typeof(TurnoutComponent))]
    [XmlIncludeAttribute(typeof(PointBlades))]
    [XmlIncludeAttribute(typeof(PointBlade))]
    [XmlIncludeAttribute(typeof(DerailerComponent))]
    [XmlIncludeAttribute(typeof(Frog))]
    [XmlIncludeAttribute(typeof(FacingPointLock))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("movableComponent", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class MovableComponent : TrackAsset
    {
        #region Private fields
        private tElementWithIDref[] _isLocatedAt;
        private tElementWithIDref[] _refersToReferenceDrawing;
        #endregion
        
        /// <summary>
        /// Individual components of a turnout and its movable elements can be spot-located.
        /// </summary>
        [XmlElement("isLocatedAt", Order=0)]
        public tElementWithIDref[] isLocatedAt
        {
            get
            {
                return _isLocatedAt;
            }
            set
            {
                _isLocatedAt = value;
            }
        }
        
        [XmlElement("refersToReferenceDrawing", Order=1)]
        public tElementWithIDref[] refersToReferenceDrawing
        {
            get
            {
                return _refersToReferenceDrawing;
            }
            set
            {
                _refersToReferenceDrawing = value;
            }
        }
    }
    
    /// <summary>
    /// Mechanism that drives turnout components:
    /// <ul>
    /// <li>point machine (or drive)</li>
    /// <li>hydraulic drive</li>
    /// <li>manual levers for hand points</li>
    /// <li>wires</li>
    /// <li>rods</li>
    /// </ul>
    /// </summary>
    [XmlIncludeAttribute(typeof(PoweredMechanism))]
    [XmlIncludeAttribute(typeof(ElectricDrive))]
    [XmlIncludeAttribute(typeof(HydraulicDrive))]
    [XmlIncludeAttribute(typeof(PneumaticDrive))]
    [XmlIncludeAttribute(typeof(HandOperatedMechanism))]
    [XmlIncludeAttribute(typeof(MechanicalMechanism))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("mechanism", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class Mechanism : MovableComponent
    {
        #region Private fields
        private tElementWithIDref[] _drivesTurnoutComponent;
        #endregion
        
        /// <summary>
        /// A mechanism drives any number of turnout components.
        /// E.g. an electric point machine drives two pairs of blades in a double slip crossing
        /// </summary>
        [XmlElement("drivesTurnoutComponent", Order=0)]
        public tElementWithIDref[] drivesTurnoutComponent
        {
            get
            {
                return _drivesTurnoutComponent;
            }
            set
            {
                _drivesTurnoutComponent = value;
            }
        }
    }
    
    /// <summary>
    /// Powered mechanism that drives turnout components, typically a point machine.
    /// </summary>
    [XmlIncludeAttribute(typeof(ElectricDrive))]
    [XmlIncludeAttribute(typeof(HydraulicDrive))]
    [XmlIncludeAttribute(typeof(PneumaticDrive))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("poweredMechanism", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class PoweredMechanism : Mechanism
    {
    }
    
    /// <summary>
    /// Electric point machine.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("electricDrive", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class ElectricDrive : PoweredMechanism
    {
    }
    
    /// <summary>
    /// Point machine that uses hydraulic pressure to throw the point.
    /// Note that a point machine equipped with an electric pump that builds up hydraulic pressure is considered an electric drive.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("hydraulicDrive", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class HydraulicDrive : PoweredMechanism
    {
    }
    
    /// <summary>
    /// Point machine that uses pneumatic pressure to throw the point.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("pneumaticDrive", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class PneumaticDrive : PoweredMechanism
    {
    }
    
    /// <summary>
    /// Worked by hand locally.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("handOperatedMechanism", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class HandOperatedMechanism : Mechanism
    {
    }
    
    /// <summary>
    /// Worked by means of wires or rods, at some distance.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("mechanicalMechanism", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class MechanicalMechanism : Mechanism
    {
    }
    
    /// <summary>
    /// Smallest movable component of a point, a crossing or a derailer.
    /// </summary>
    [XmlIncludeAttribute(typeof(PointBlades))]
    [XmlIncludeAttribute(typeof(PointBlade))]
    [XmlIncludeAttribute(typeof(DerailerComponent))]
    [XmlIncludeAttribute(typeof(Frog))]
    [XmlIncludeAttribute(typeof(FacingPointLock))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("turnoutComponent", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class TurnoutComponent : MovableComponent
    {
    }
    
    /// <summary>
    /// The pair of switch rails of a point that are secured together by a stretcher bar.
    /// </summary>
    [XmlIncludeAttribute(typeof(PointBlade))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("pointBlades", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class PointBlades : TurnoutComponent
    {
        #region Private fields
        private LeftRight _branchTowardsCrossing;
        private PointIndicatorTypes _hasPointIndicatorOfType;
        private Speed _imposesSpeedRestrictionLeft;
        private Speed _imposesSpeedRestrictionRight;
        private bool _hasExternalDetectors;
        private bool _hasExternalLock;
        private int _numberOfExternalDetectors;
        #endregion
        
        /// <summary>
        /// The branch that leads to the crossing (the diamond). This is the branch that leads to where the tracks actually cross. Only applies to slip points.
        /// de-DE: Weichenschenkel, der bei Kreuzungsweichen vom zugeh&#246;rigen Zungenpaar in Richtung des Kreuzungsmittelpunktes f&#252;hrt. Das Attribut muss bei EKW und DKW angegeben werden, um eine lagerichtige Zuordnung der Kanteneigenschaften sicherzustellen
        /// </summary>
        [XmlElement(Order=0)]
        public LeftRight branchTowardsCrossing
        {
            get
            {
                return _branchTowardsCrossing;
            }
            set
            {
                _branchTowardsCrossing = value;
            }
        }
        
        /// <summary>
        /// If present, the point blades are mechanically coupled to a point position indicator, that is either backlit or reflective.
        /// </summary>
        [XmlElement(Order=1)]
        public PointIndicatorTypes hasPointIndicatorOfType
        {
            get
            {
                return _hasPointIndicatorOfType;
            }
            set
            {
                _hasPointIndicatorOfType = value;
            }
        }
        
        /// <summary>
        /// The <b>left </b>branch of the point imposes a speed restriction.
        /// The construction of the component, blade, nose or diamond can impose a speed restriction.
        /// </summary>
        [XmlElement(Order=2)]
        public Speed imposesSpeedRestrictionLeft
        {
            get
            {
                if ((_imposesSpeedRestrictionLeft == null))
                {
                    _imposesSpeedRestrictionLeft = new Speed();
                }
                return _imposesSpeedRestrictionLeft;
            }
            set
            {
                _imposesSpeedRestrictionLeft = value;
            }
        }
        
        /// <summary>
        /// The <b>right </b>branch of the point imposes a speed restriction.
        /// The construction of the component, blade, nose or diamond can impose a speed restriction.
        /// </summary>
        [XmlElement(Order=3)]
        public Speed imposesSpeedRestrictionRight
        {
            get
            {
                if ((_imposesSpeedRestrictionRight == null))
                {
                    _imposesSpeedRestrictionRight = new Speed();
                }
                return _imposesSpeedRestrictionRight;
            }
            set
            {
                _imposesSpeedRestrictionRight = value;
            }
        }
        
        /// <summary>
        /// True, if there are external blade position detectors.
        /// This excludes detectors inside the drive mechanism.
        /// If false, attribute numberOfExternalDetectors is not given.
        /// </summary>
        [XmlAttribute]
        public bool hasExternalDetectors
        {
            get
            {
                return _hasExternalDetectors;
            }
            set
            {
                _hasExternalDetectors = value;
            }
        }
        
        /// <summary>
        /// True if the blades have an external lock that is mechanically coupled and driven by the point mechanism.
        /// False: no lock.
        /// If left out, the information isn't relevant.
        /// <ul>
        /// <li>de-DE: Klammerverschluss (information not given to supplier)</li>
        /// <li>en-GB: not used because the clamp lock is covered by the mechanism type.</li>
        /// <li>fr-FR: Verrou Carter Coussinet</li>
        /// <li>se-SE: </li>
        /// </ul>
        /// </summary>
        [XmlAttribute]
        public bool hasExternalLock
        {
            get
            {
                return _hasExternalLock;
            }
            set
            {
                _hasExternalLock = value;
            }
        }
        
        /// <summary>
        /// Number of external blade position detectors.
        /// This excludes detectors inside the drive mechanism.
        /// Not given when attribute hasExternalDetectors is false.
        /// </summary>
        [XmlAttribute]
        public int numberOfExternalDetectors
        {
            get
            {
                return _numberOfExternalDetectors;
            }
            set
            {
                _numberOfExternalDetectors = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum PointIndicatorTypes
    {
        backlit,
        reflective,
    }
    
    /// <summary>
    /// Individual switch rail (NetworkRail can separately control the blades in some cases).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("pointBlade", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class PointBlade : PointBlades
    {
    }
    
    /// <summary>
    /// A derailer consists of one derailer component.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("derailerComponent", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class DerailerComponent : TurnoutComponent
    {
        #region Private fields
        private LeftRightCentreTypes _derailsInDirection;
        private bool _hasGuardRail;
        #endregion
        
        /// <summary>
        /// The <b>unique </b>direction in which the train is derailed, given with respect to the RTM application (or effective) direction.
        /// The application direction is an attribute of the RTM spot location that is associated with the derailer.
        /// 
        /// Most commonly left or right, although a wide gauge derailer can derail a train towards the middle/centre.
        /// </summary>
        [XmlElement(Order=0)]
        public LeftRightCentreTypes derailsInDirection
        {
            get
            {
                return _derailsInDirection;
            }
            set
            {
                _derailsInDirection = value;
            }
        }
        
        /// <summary>
        /// True if the derailer has a guard rail.
        /// </summary>
        [XmlAttribute]
        public bool hasGuardRail
        {
            get
            {
                return _hasGuardRail;
            }
            set
            {
                _hasGuardRail = value;
            }
        }
    }
    
    /// <summary>
    /// The part of a turnout, a crossing, or a gantlet, where the rails have an intersection which allows the wheel flanges to cross the running rail. The frog may be fixed or moveable.
    /// Also known as movable nose or swing nose.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("frog", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class Frog : TurnoutComponent
    {
    }
    
    /// <summary>
    /// A movable lock that keeps the point blade(s) in place.
    /// <ul>
    /// <li>en-GB: Facing Point Lock (FPL). The scheme design provides the label for the designation.</li>
    /// </ul>
    /// <ul>
    /// <li>fr-FR: Verrou Carter Coussinet.</li>
    /// </ul>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("facingPointLock", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class FacingPointLock : TurnoutComponent
    {
    }
    
    /// <summary>
    /// Section of track that must be proven vacant for safe train operations. Vacancy proving is accomplished either by a TDS or by procedure.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("tvpSection", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class TvpSection : TrackAsset
    {
        #region Private fields
        private Speed _imposesSpeedRestriction;
        private tElementWithIDref _isLocatedAt;
        #endregion
        
        [XmlElement(Order=0)]
        public Speed imposesSpeedRestriction
        {
            get
            {
                if ((_imposesSpeedRestriction == null))
                {
                    _imposesSpeedRestriction = new Speed();
                }
                return _imposesSpeedRestriction;
            }
            set
            {
                _imposesSpeedRestriction = value;
            }
        }
        
        /// <summary>
        /// A TVP section is linear except when it spans a point or crossing. Area and linear locations both relate to one or more RTM associated net elements, so the TVP section is always located at an area location.
        /// TDS components such as joints and axle counters are situated at the ends of the section and data engineers should beware that the spot location of these detectors don't conflict with the location of the TVP section.
        /// Note that the section can have an application direction.
        /// </summary>
        [XmlElement(Order=1)]
        public tElementWithIDref isLocatedAt
        {
            get
            {
                if ((_isLocatedAt == null))
                {
                    _isLocatedAt = new tElementWithIDref();
                }
                return _isLocatedAt;
            }
            set
            {
                _isLocatedAt = value;
            }
        }
    }
    
    /// <summary>
    /// A Signal is a line side element that sends a message to driver. The signal can consist of several frames each of which carries part of the message to the driver.
    /// The signal in the EULYNX DP namespace enriches the RTM information with signalling information.
    /// </summary>
    [XmlIncludeAttribute(typeof(VirtualSignal))]
    [XmlIncludeAttribute(typeof(NonPhysicalSignal))]
    [XmlIncludeAttribute(typeof(PhysicalSignal))]
    [XmlIncludeAttribute(typeof(Sign))]
    [XmlIncludeAttribute(typeof(Milepost))]
    [XmlIncludeAttribute(typeof(ActiveSignal))]
    [XmlIncludeAttribute(typeof(MechanicalSignal))]
    [XmlIncludeAttribute(typeof(LightSignal))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("signal", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class Signal : TrackAsset
    {
        #region Private fields
        private LocalDatum _hasLocalDatum;
        private tElementWithIDref _hasLocation;
        private tElementWithIDref[] _hasSignalFrame;
        private FixingTypes _isOfFixingType;
        private tElementWithIDref[] _refersToOverlapsForDisplay;
        private tElementWithIDref _refersToRtmSignal;
        private tElementWithIDref[] _refersToSafetyDistance;
        private tElementWithIDref _showsDefaultMessage;
        #endregion
        
        [XmlElement(Order=0)]
        public LocalDatum hasLocalDatum
        {
            get
            {
                if ((_hasLocalDatum == null))
                {
                    _hasLocalDatum = new LocalDatum();
                }
                return _hasLocalDatum;
            }
            set
            {
                _hasLocalDatum = value;
            }
        }
        
        [XmlElement(Order=1)]
        public tElementWithIDref hasLocation
        {
            get
            {
                if ((_hasLocation == null))
                {
                    _hasLocation = new tElementWithIDref();
                }
                return _hasLocation;
            }
            set
            {
                _hasLocation = value;
            }
        }
        
        /// <summary>
        /// A signal has one or more signal frames. A signal frame has an aspect that is either passive or active, i.e. that can change aspect.
        /// A non-physical signal has no frame
        /// </summary>
        [XmlElement("hasSignalFrame", Order=2)]
        public tElementWithIDref[] hasSignalFrame
        {
            get
            {
                return _hasSignalFrame;
            }
            set
            {
                _hasSignalFrame = value;
            }
        }
        
        /// <summary>
        /// General information about the fixing of a signal. Mainly used in early design phase and cost calculations.
        /// </summary>
        [XmlElement(Order=3)]
        public FixingTypes isOfFixingType
        {
            get
            {
                return _isOfFixingType;
            }
            set
            {
                _isOfFixingType = value;
            }
        }
        
        /// <summary>
        /// The list of overlaps is ordered so the signaller's display shows the overlaps in the given sequence.
        /// de-DE: D-Wege die an einem Signal beginnen.
        /// </summary>
        [XmlElement("refersToOverlapsForDisplay", Order=4)]
        public tElementWithIDref[] refersToOverlapsForDisplay
        {
            get
            {
                return _refersToOverlapsForDisplay;
            }
            set
            {
                _refersToOverlapsForDisplay = value;
            }
        }
        
        /// <summary>
        /// A EULYNX DP signal refers to a signal in the RTM namespace.
        /// </summary>
        [XmlElement(Order=5)]
        public tElementWithIDref refersToRtmSignal
        {
            get
            {
                if ((_refersToRtmSignal == null))
                {
                    _refersToRtmSignal = new tElementWithIDref();
                }
                return _refersToRtmSignal;
            }
            set
            {
                _refersToRtmSignal = value;
            }
        }
        
        /// <summary>
        /// An exit signal has a list of safety distances, i.e. overlap or danger point.
        /// </summary>
        [XmlElement("refersToSafetyDistance", Order=6)]
        public tElementWithIDref[] refersToSafetyDistance
        {
            get
            {
                return _refersToSafetyDistance;
            }
            set
            {
                _refersToSafetyDistance = value;
            }
        }
        
        /// <summary>
        /// The default message that the signal shows after startup and at rest (most restrictive message/aspect).
        /// </summary>
        [XmlElement(Order=7)]
        public tElementWithIDref showsDefaultMessage
        {
            get
            {
                if ((_showsDefaultMessage == null))
                {
                    _showsDefaultMessage = new tElementWithIDref();
                }
                return _showsDefaultMessage;
            }
            set
            {
                _showsDefaultMessage = value;
            }
        }
    }
    
    /// <summary>
    /// List of fixings that can support signalling equipment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum FixingTypes
    {
        /// <summary>
        /// Substructure foundation.
        /// </summary>
        foundation,
        /// <summary>
        /// Ground or pile. A pile is a very lightweight mounting structure without any foundation. Commonly used for clearance point markers.
        /// </summary>
        groundOrPile,
        sleeper,
        /// <summary>
        /// Rail mounting is often used for temporary signs.
        /// </summary>
        rail,
        bufferStop,
        wall,
        /// <summary>
        /// A post is a permanent structure with a solid foundation.
        /// </summary>
        post,
        shortPost,
        /// <summary>
        /// A pole is a lightweight mounting structure with a simple or even without a foundation. Alternative, more common choice, is the post. Simple passive signs could be mounted on poles.
        /// </summary>
        pole,
        /// <summary>
        /// DB: Signalbruecke
        /// SNCF: portique
        /// RFI: portale
        /// </summary>
        gantry,
        /// <summary>
        /// DB: Signalausleger
        /// SNCF: potence
        /// RFI: sospensione
        /// </summary>
        cantilever,
        /// <summary>
        /// A cantilever covering two lines.
        /// </summary>
        cantileverTwoLines,
        /// <summary>
        /// A cage protects the signal and track maintenance workers from the overhead line.
        /// Alternative choice is a mesh.
        /// </summary>
        cage,
        /// <summary>
        /// A mesh protects the signal and track workers from the overhead line. Alternative choice is a cage which is an almost closed mesh.
        /// </summary>
        mesh,
        platform,
        overheadLineMast,
        overheadLineStructure,
        /// <summary>
        /// A custom made construction in case one cannot use one of the standard fixing types.
        /// </summary>
        specialConstruction,
        /// <summary>
        /// The frame or signal is attached to a roof, e.g. a platform roof. Alternative choices are wall (e.g. for tunnel) or bridge.
        /// </summary>
        roof,
        bridge,
        /// <summary>
        /// en-UK: dropper
        /// de-DE: Signalkorb
        /// fr-FR: nacelle
        /// </summary>
        suspensionStructure,
        other,
    }
    
    /// <summary>
    /// Virtual signals are typically used for block interfaces where the signalman calls a route to or from a block. The virtual signal has no physical equivalent in the field but exists only as an software object. In spite of this, the virtual signal is often attributed a location on the track (like a chalk-mark on the track) such that one can map it to a location.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("virtualSignal", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class VirtualSignal : Signal
    {
        #region Private fields
        private tElementWithIDref _isAssociatedWithBufferStop;
        #endregion
        
        /// <summary>
        /// A route exit can be a buffer stop. If so, a virtual signal is associated with the buffer stop.
        /// </summary>
        [XmlElement(Order=0)]
        public tElementWithIDref isAssociatedWithBufferStop
        {
            get
            {
                if ((_isAssociatedWithBufferStop == null))
                {
                    _isAssociatedWithBufferStop = new tElementWithIDref();
                }
                return _isAssociatedWithBufferStop;
            }
            set
            {
                _isAssociatedWithBufferStop = value;
            }
        }
    }
    
    /// <summary>
    /// A signal without a physical line-side appearance. Signals mostly refer to by as virtual or fictitious signals are mapped in EULYNX DP to the class NonPhysical (neutral term to avoid confusion).
    /// The main property of a non-physical signal is that it needs not send information to the train (as opposed to a physical signal). For example: a fictitious exit signal is an artefact shown only on the signalman's display allowing him to call a route towards open line.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("nonPhysicalSignal", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class NonPhysicalSignal : Signal
    {
        #region Private fields
        private tElementWithIDref _hasPhysicalPresence;
        #endregion
        
        /// <summary>
        /// A non-physical signal may have a physical representation in the field with a passive board or a marker.
        /// For example: a virtual ERTMS L2 signal may be physically represented with a stop marker board along the track.
        /// </summary>
        [XmlElement(Order=0)]
        public tElementWithIDref hasPhysicalPresence
        {
            get
            {
                if ((_hasPhysicalPresence == null))
                {
                    _hasPhysicalPresence = new tElementWithIDref();
                }
                return _hasPhysicalPresence;
            }
            set
            {
                _hasPhysicalPresence = value;
            }
        }
    }
    
    /// <summary>
    /// A signal with a physical line-side appearance.
    /// </summary>
    [XmlIncludeAttribute(typeof(Sign))]
    [XmlIncludeAttribute(typeof(Milepost))]
    [XmlIncludeAttribute(typeof(ActiveSignal))]
    [XmlIncludeAttribute(typeof(MechanicalSignal))]
    [XmlIncludeAttribute(typeof(LightSignal))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("physicalSignal", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class PhysicalSignal : Signal
    {
    }
    
    /// <summary>
    /// A signal with a passive aspect, <i><u>not controlled </u></i>by the signalling system.
    /// A sign (or board) sends a permanent message to the driver. Its message and physical appearance (shape, colour, patterns) are normalised.
    /// 
    /// Note: A sign can carry a lamp showing one single aspect, and the interlocking can <i><u>only read </u></i>the status of the lamp (e.g. a sign with a lamp marking the end of the track).
    /// </summary>
    [XmlIncludeAttribute(typeof(Milepost))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("sign", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class Sign : PhysicalSignal
    {
    }
    
    /// <summary>
    /// Simple wayside sign marking mileage/kilometrage/hectometre.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("milepost", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class Milepost : Sign
    {
        #region Private fields
        private string _type;
        private string _valueShown;
        #endregion
        
        /// <summary>
        /// Type of the value shown:
        /// <ul>
        /// <li>UK: quarter-mile, half-mile.</li>
        /// <li>Continent:  kilometre, metre, hectometre.</li>
        /// </ul>
        /// </summary>
        [XmlAttribute]
        public string type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }
        
        /// <summary>
        /// The mileage or kilometre value written on the milepost
        /// </summary>
        [XmlAttribute]
        public string valueShown
        {
            get
            {
                return _valueShown;
            }
            set
            {
                _valueShown = value;
            }
        }
    }
    
    /// <summary>
    /// A signal with a variable, controlled aspect.
    /// </summary>
    [XmlIncludeAttribute(typeof(MechanicalSignal))]
    [XmlIncludeAttribute(typeof(LightSignal))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("activeSignal", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class ActiveSignal : PhysicalSignal
    {
    }
    
    /// <summary>
    /// Also known as semaphore. The aspect is given by the position of the arms.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("mechanicalSignal", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class MechanicalSignal : ActiveSignal
    {
    }
    
    /// <summary>
    /// A signal with lamps that transmit information to the driver.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("lightSignal", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class LightSignal : ActiveSignal
    {
        #region Private fields
        private LuminosityTypes _hasLuminosity;
        #endregion
        
        [XmlElement(Order=0)]
        public LuminosityTypes hasLuminosity
        {
            get
            {
                return _hasLuminosity;
            }
            set
            {
                _hasLuminosity = value;
            }
        }
    }
    
    /// <summary>
    /// The luminosity, i.e. light intensity, of a signal lamp may depend on day/night or use in tunnels. Typically, a tunnel signal is configured at permanently low intensity. Many signals can be switched to low intensity at night.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum LuminosityTypes
    {
        /// <summary>
        /// Light intensity is permanently high.
        /// </summary>
        permanentlyHigh,
        /// <summary>
        /// Light intensity is permanently low.
        /// </summary>
        permanentlyLow,
        /// <summary>
        /// Light intensity can be switched. High during day and low during the night.
        /// </summary>
        switchable,
    }
    
    /// <summary>
    /// The compound logical object is a fa&#231;ade to a system or device implementing Boolean logic. It can represent anything from a simple relay contact to complex relay circuitry or a PLC that converts high/low electric input signals from any source into Boolean true/false outputs.
    /// It can exchange binary i/o with the interlocking.
    /// The description attribute can contain textual description of the field elements and Boolean relations that produce the Boolean output.
    /// Use this for ancillary equipment connected to the interlocking, e.g. bascule bridges, tunnel equipment, detectors such as earthquake and flooding detectors. Also useful for reading inputs from field activated level crossings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("compoundLogicalObject", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class CompoundLogicalObject : TrackAsset
    {
        #region Private fields
        private tElementWithIDref[] _isImplementedByDetector;
        private string _description;
        #endregion
        
        /// <summary>
        /// The logic is implemented by a (set of) line side spot detectors.
        /// The description of the compound logical object can state the logical equations.
        /// </summary>
        [XmlElement("isImplementedByDetector", Order=0)]
        public tElementWithIDref[] isImplementedByDetector
        {
            get
            {
                return _isImplementedByDetector;
            }
            set
            {
                _isImplementedByDetector = value;
            }
        }
        
        /// <summary>
        /// Description of the logic.
        /// </summary>
        [XmlAttribute]
        public string Description
        {
            get
            {
                return _description;
            }
            set
            {
                _description = value;
            }
        }
    }
    
    /// <summary>
    /// Track side devices for feeding AC signals into and receiving the same from track circuits.
    /// A feeder and receiver can share a spot location.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("tcFeederReceiverElement", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class TcFeederReceiverElement : TrackAsset
    {
        #region Private fields
        private tElementWithIDref _connectsToRailVia;
        private tElementWithIDref _isLocatedAt;
        private TcFeederReceiverTypes[] _isOfFeederReceiverType;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref connectsToRailVia
        {
            get
            {
                if ((_connectsToRailVia == null))
                {
                    _connectsToRailVia = new tElementWithIDref();
                }
                return _connectsToRailVia;
            }
            set
            {
                _connectsToRailVia = value;
            }
        }
        
        /// <summary>
        /// The spot location of the feeder/receiver; typically near but not necessarily exactly at the section limit.
        /// </summary>
        [XmlElement(Order=1)]
        public tElementWithIDref isLocatedAt
        {
            get
            {
                if ((_isLocatedAt == null))
                {
                    _isLocatedAt = new tElementWithIDref();
                }
                return _isLocatedAt;
            }
            set
            {
                _isLocatedAt = value;
            }
        }
        
        [XmlElement("isOfFeederReceiverType", Order=2)]
        public TcFeederReceiverTypes[] isOfFeederReceiverType
        {
            get
            {
                return _isOfFeederReceiverType;
            }
            set
            {
                _isOfFeederReceiverType = value;
            }
        }
    }
    
    /// <summary>
    /// The different types of track circuit feeders and receivers.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum TcFeederReceiverTypes
    {
        /// <summary>
        /// UK: letter R
        /// FR: letters Re(cepteur)
        /// </summary>
        receiver,
        /// <summary>
        /// UK: letter F(eed)
        /// </summary>
        transmitter,
        /// <summary>
        /// audio frequency receiver
        /// UK: letters RX
        /// FR: Re(cepteur)
        /// </summary>
        receiverWithTuner,
        /// <summary>
        /// audio frequency transmitter
        /// FR: Em(etteur)
        /// UK: TX
        /// </summary>
        transmitterWithTuner,
        /// <summary>
        /// A track side receiver attached to a loop in the track.
        /// FR: reception sur boucle
        /// </summary>
        receiverWithLoop,
    }
    
    /// <summary>
    /// Train Detection System associated with a TVP section.
    /// </summary>
    [XmlIncludeAttribute(typeof(AxleCountingSystem))]
    [XmlIncludeAttribute(typeof(TrackCircuit))]
    [XmlIncludeAttribute(typeof(LowFrequencyTrackCircuit))]
    [XmlIncludeAttribute(typeof(AudioFrequencyTrackCircuit))]
    [XmlIncludeAttribute(typeof(FtgsTrackCircuit))]
    [XmlIncludeAttribute(typeof(DcVoltageTrackCircuit))]
    [XmlIncludeAttribute(typeof(HviTrackCircuit))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("tdsSection", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class TdsSection : TrackAsset
    {
        #region Private fields
        private tElementWithIDref _appliesToTvpSection;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref appliesToTvpSection
        {
            get
            {
                if ((_appliesToTvpSection == null))
                {
                    _appliesToTvpSection = new tElementWithIDref();
                }
                return _appliesToTvpSection;
            }
            set
            {
                _appliesToTvpSection = value;
            }
        }
    }
    
    /// <summary>
    /// An Axle counting system detects trains in a section by counting incoming and outgoing train axles.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("axleCountingSystem", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class AxleCountingSystem : TdsSection
    {
    }
    
    /// <summary>
    /// <p align="right" dir="rtl">A train detection system that detects train axles shunting the rails.</p>
    /// </summary>
    [XmlIncludeAttribute(typeof(LowFrequencyTrackCircuit))]
    [XmlIncludeAttribute(typeof(AudioFrequencyTrackCircuit))]
    [XmlIncludeAttribute(typeof(FtgsTrackCircuit))]
    [XmlIncludeAttribute(typeof(DcVoltageTrackCircuit))]
    [XmlIncludeAttribute(typeof(HviTrackCircuit))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("trackCircuit", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class TrackCircuit : TdsSection
    {
        #region Private fields
        private TrackCircuitProperties _hasProperties;
        private TcFeederReceiverElement[] _hasTcFeederReceiver;
        private string _cutSectionIndex;
        private bool _individualAssesment;
        #endregion
        
        [XmlElement(Order=0)]
        public TrackCircuitProperties hasProperties
        {
            get
            {
                if ((_hasProperties == null))
                {
                    _hasProperties = new TrackCircuitProperties();
                }
                return _hasProperties;
            }
            set
            {
                _hasProperties = value;
            }
        }
        
        /// <summary>
        /// A track circuit has 1..4 elements for feeding or receiving signals.
        /// </summary>
        [XmlElement("hasTcFeederReceiver", Order=1)]
        public TcFeederReceiverElement[] hasTcFeederReceiver
        {
            get
            {
                return _hasTcFeederReceiver;
            }
            set
            {
                _hasTcFeederReceiver = value;
            }
        }
        
        /// <summary>
        /// UK: index of the cut section track, e.g. 60G103<u>.1</u>
        /// NL: index van de technische sectie
        /// DE: FMA Kaskade Bezeichnung bei technisch notwendiger Unterteilung eines Gleisabschnitts in mehr als einen Freimeldeabschnitt
        /// </summary>
        [XmlAttribute]
        public string cutSectionIndex
        {
            get
            {
                return _cutSectionIndex;
            }
            set
            {
                _cutSectionIndex = value;
            }
        }
        
        /// <summary>
        /// If true, the cut-section vacancy statuses are <i>assessed </i>and reported to the interlocking <i>individually</i>.
        /// If false, the interlocking receives the lumped vacant/occupied status of all cut-sections.
        /// Only used in combination with cascaded, or cut sections.
        /// DE: Einzelauswertung vorgesehen
        /// </summary>
        [XmlAttribute]
        public bool individualAssesment
        {
            get
            {
                return _individualAssesment;
            }
            set
            {
                _individualAssesment = value;
            }
        }
    }
    
    /// <summary>
    /// de-DE: Niedrigfrequenzgleiskreis
    /// nl-NL:  laagfrequent spoorstroomloop
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("lowFrequencyTrackCircuit", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class LowFrequencyTrackCircuit : TrackCircuit
    {
    }
    
    /// <summary>
    /// de-DE: Tonfrequenz-Gleisstromkreis
    /// nl-NL:  toonfrequente spoorstroomloop
    /// </summary>
    [XmlIncludeAttribute(typeof(FtgsTrackCircuit))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("audioFrequencyTrackCircuit", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class AudioFrequencyTrackCircuit : TrackCircuit
    {
        #region Private fields
        private string _channel;
        #endregion
        
        /// <summary>
        /// fr-FR: bande de fr&#233;quences (V1F1, V1F2, V2F1, V2F2).
        /// en-UK: channel x or frequency.
        /// </summary>
        [XmlAttribute]
        public string channel
        {
            get
            {
                return _channel;
            }
            set
            {
                _channel = value;
            }
        }
    }
    
    /// <summary>
    /// Ferngespeister codierter Tonfrequenz-Gleisstromkreis von Siemens (FTG S) audio frequency track section technology.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("ftgsTrackCircuit", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class FtgsTrackCircuit : AudioFrequencyTrackCircuit
    {
    }
    
    /// <summary>
    /// DC voltage track circuit.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("dcVoltageTrackCircuit", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class DcVoltageTrackCircuit : TrackCircuit
    {
    }
    
    /// <summary>
    /// High Voltage Impulse track circuit.
    /// fr-FR: Impulsion de tension &#233;lev&#233;e (ITE)
    /// nl-NL: prikspanningsspoorstroomloop.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("hviTrackCircuit", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class HviTrackCircuit : TrackCircuit
    {
        #region Private fields
        private string _channel;
        #endregion
        
        /// <summary>
        /// Frequency with which the impulses are given.
        /// FR: bande de frequences (F1 .. F4).
        /// </summary>
        [XmlAttribute]
        public string channel
        {
            get
            {
                return _channel;
            }
            set
            {
                _channel = value;
            }
        }
    }
    
    /// <summary>
    /// Term for constructing the hierarchy of types of objects that control the field elements.
    /// This controller class can be instantiated when no other appropriate sub-class is available, e.g. when a new kind of controller is introduced.
    /// </summary>
    [XmlIncludeAttribute(typeof(VirtualController))]
    [XmlIncludeAttribute(typeof(FieldObjectController))]
    [XmlIncludeAttribute(typeof(TdsEvaluator))]
    [XmlIncludeAttribute(typeof(SignalController))]
    [XmlIncludeAttribute(typeof(IoController))]
    [XmlIncludeAttribute(typeof(LeuSystem))]
    [XmlIncludeAttribute(typeof(RBC))]
    [XmlIncludeAttribute(typeof(Interlocking))]
    [XmlIncludeAttribute(typeof(DecentralInterlocking))]
    [XmlIncludeAttribute(typeof(CentralInterlocking))]
    [XmlIncludeAttribute(typeof(TrafficControlSystem))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("controller", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class Controller : TrackAsset
    {
        #region Private fields
        private PowerSupplyTypes[] _hasBackupPowerSupplyType;
        private PowerSupplyTypes _hasPowerSupplyType;
        private tElementWithIDref _isHousedIn;
        private tElementWithIDref[] _operatesLocality;
        private tElementWithIDref[] _reportsToDiagnosticsCollector;
        private string _technology;
        #endregion
        
        [XmlElement("hasBackupPowerSupplyType", Order=0)]
        public PowerSupplyTypes[] hasBackupPowerSupplyType
        {
            get
            {
                return _hasBackupPowerSupplyType;
            }
            set
            {
                _hasBackupPowerSupplyType = value;
            }
        }
        
        [XmlElement(Order=1)]
        public PowerSupplyTypes hasPowerSupplyType
        {
            get
            {
                return _hasPowerSupplyType;
            }
            set
            {
                _hasPowerSupplyType = value;
            }
        }
        
        [XmlElement(Order=2)]
        public tElementWithIDref isHousedIn
        {
            get
            {
                if ((_isHousedIn == null))
                {
                    _isHousedIn = new tElementWithIDref();
                }
                return _isHousedIn;
            }
            set
            {
                _isHousedIn = value;
            }
        }
        
        /// <summary>
        /// Informs about the locality under control.
        /// </summary>
        [XmlElement("operatesLocality", Order=3)]
        public tElementWithIDref[] operatesLocality
        {
            get
            {
                return _operatesLocality;
            }
            set
            {
                _operatesLocality = value;
            }
        }
        
        [XmlElement("reportsToDiagnosticsCollector", Order=4)]
        public tElementWithIDref[] reportsToDiagnosticsCollector
        {
            get
            {
                return _reportsToDiagnosticsCollector;
            }
            set
            {
                _reportsToDiagnosticsCollector = value;
            }
        }
        
        /// <summary>
        /// The technology of the controller, e.g. digital, electronic, cloud, geographical, tabular, lever, relay, mechanical, pushbutton.
        /// </summary>
        [XmlAttribute]
        public string technology
        {
            get
            {
                return _technology;
            }
            set
            {
                _technology = value;
            }
        }
    }
    
    /// <summary>
    /// The types of power supply used by controllers and controlled track assets.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum PowerSupplyTypes
    {
        /// <summary>
        /// To be used if the controller is not available or cannot be specified.
        /// </summary>
        otherController,
        /// <summary>
        /// Battery, not to be confused with UPS.
        /// </summary>
        battery,
        /// <summary>
        /// uninteruptable power supply. The UPS is connected to the main grid and continues to work for some time when the mains fail.
        /// </summary>
        ups,
        /// <summary>
        /// level crossing installations supplying power (DB)
        /// </summary>
        levelCrossing,
        /// <summary>
        /// overhead line or third rail, normally used for traction, is used for supplying power to the controller.
        /// </summary>
        tractionSupply,
        /// <summary>
        /// a power grid dedicated to railway signalling
        /// </summary>
        railwayPowerSupply,
        /// <summary>
        /// national grid
        /// </summary>
        nationalPowerSupply,
        /// <summary>
        /// permanent power generator.
        /// </summary>
        generator,
        /// <summary>
        /// socket to which an external power supply, typically a portable generator, can connect.
        /// </summary>
        generatorConnection,
        /// <summary>
        /// other technologies like solar, fuel cell, geothermal, pneumatic, hydraulic
        /// </summary>
        other,
    }
    
    /// <summary>
    /// Placeholder for a control object used when the architecture is not known (yet) or irrelevant. Useful during a tendering or design phase.
    /// Once the architecture is known, this object would be replaced by controllers that match its particular architecture.
    /// For instance:
    /// <ul>
    /// <li>central interlocking and some decentral sub-interlockings</li>
    /// <li>central interlocking and many field object controllers (EULYNX style)</li>
    /// </ul>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("virtualController", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class VirtualController : Controller
    {
    }
    
    /// <summary>
    /// A device that exchanges commands, information, power with one or a few individual field objects like signal, point, etc.
    /// 
    /// In control of active track assets.
    /// </summary>
    [XmlIncludeAttribute(typeof(TdsEvaluator))]
    [XmlIncludeAttribute(typeof(SignalController))]
    [XmlIncludeAttribute(typeof(IoController))]
    [XmlIncludeAttribute(typeof(LeuSystem))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("fieldObjectController", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class FieldObjectController : Controller
    {
    }
    
    /// <summary>
    /// Controller for one or more TDS sections.
    /// The type of evaluator depends on the connected TDS section technology, typically axle count evaluation unit or track circuit evaluator.
    /// Can be in the field or near the interlocking. Provides the logical vacancy status to the IL.
    /// de-DE: Gleisfreimelde-Innenanlage
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("tdsEvaluator", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class TdsEvaluator : FieldObjectController
    {
    }
    
    /// <summary>
    /// Object controller for a signal.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("signalController", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class SignalController : FieldObjectController
    {
    }
    
    /// <summary>
    /// Controller for receiving binary inputs and sending binary outputs.
    /// <ul>
    /// <li>Inputs, typically received from relay contacts, are packed into telegrams and sent to the interlocking.</li>
    /// </ul>
    /// <ul>
    /// <li>Telegrams received from the interlocking are converted to outputs.</li>
    /// </ul>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("ioController", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class IoController : FieldObjectController
    {
    }
    
    /// <summary>
    /// A Lineside Electronic Unit (LEU) system controls zero or more ETCS balises.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("leuSystem", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class LeuSystem : FieldObjectController
    {
        #region Private fields
        private LeuPort[] _hasLeuPort;
        private tElementWithIDref _isGovernedByMovableElement;
        private tElementWithIDref[] _isHousedInCabinet;
        private tElementWithIDref _isRelatedToSignal;
        #endregion
        
        [XmlElement("hasLeuPort", Order=0)]
        public LeuPort[] hasLeuPort
        {
            get
            {
                return _hasLeuPort;
            }
            set
            {
                _hasLeuPort = value;
            }
        }
        
        /// <summary>
        /// Reference to a movable element that governs the LEU's output. Direct, typically a contact at the level of the point control or indirect via interlocking logic ??
        /// </summary>
        [XmlElement(Order=1)]
        public tElementWithIDref isGovernedByMovableElement
        {
            get
            {
                if ((_isGovernedByMovableElement == null))
                {
                    _isGovernedByMovableElement = new tElementWithIDref();
                }
                return _isGovernedByMovableElement;
            }
            set
            {
                _isGovernedByMovableElement = value;
            }
        }
        
        [XmlElement("isHousedInCabinet", Order=2)]
        public tElementWithIDref[] isHousedInCabinet
        {
            get
            {
                return _isHousedInCabinet;
            }
            set
            {
                _isHousedInCabinet = value;
            }
        }
        
        /// <summary>
        /// The signal, SMB or light signal associated with the LEU. Typically used to generate the designation of the LEU.
        /// </summary>
        [XmlElement(Order=3)]
        public tElementWithIDref isRelatedToSignal
        {
            get
            {
                if ((_isRelatedToSignal == null))
                {
                    _isRelatedToSignal = new tElementWithIDref();
                }
                return _isRelatedToSignal;
            }
            set
            {
                _isRelatedToSignal = value;
            }
        }
    }
    
    /// <summary>
    /// Radio Block Centre.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("rBC", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class RBC : Controller
    {
        #region Private fields
        private tElementWithIDref[] _knowsEtcsEdge;
        #endregion
        
        /// <summary>
        /// The edge is known to this RBC, i.e. the RBC has information about the edge supporting the compilation of movement authorities.
        /// </summary>
        [XmlElement("knowsEtcsEdge", Order=0)]
        public tElementWithIDref[] knowsEtcsEdge
        {
            get
            {
                return _knowsEtcsEdge;
            }
            set
            {
                _knowsEtcsEdge = value;
            }
        }
    }
    
    /// <summary>
    /// A specific interlocking system that has a control relationship with track-assets and/or controllers in a yard.
    /// </summary>
    [XmlIncludeAttribute(typeof(DecentralInterlocking))]
    [XmlIncludeAttribute(typeof(CentralInterlocking))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("interlocking", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class Interlocking : Controller
    {
    }
    
    /// <summary>
    /// Decentral part of the interlocking, running a sub-area of the interlocking area. Typically placed as close as possible to the field elements that it controls.
    /// DB: Gleisfeldkonzentrator (Gfk)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("decentralInterlocking", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class DecentralInterlocking : Interlocking
    {
    }
    
    /// <summary>
    /// The part of the interlocking where the core route logic runs.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("centralInterlocking", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class CentralInterlocking : Interlocking
    {
    }
    
    /// <summary>
    /// A Traffic Control System is located in the
    /// <ul>
    /// <li>fr-FR: Poste de commande &#224; distance</li>
    /// <li>Betriebszentrale in DACH</li>
    /// <li>en-UK: signalbox</li>
    /// <li>nl-NL: VL-Post</li>
    /// <li>it-IT: Posto centrale/locale</li>
    /// </ul>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("trafficControlSystem", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class TrafficControlSystem : Controller
    {
    }
    
    /// <summary>
    /// A device that releases control of an asset.
    /// nl-NL: Grendel
    /// </summary>
    [XmlIncludeAttribute(typeof(KeyReleaseInstrument))]
    [XmlIncludeAttribute(typeof(ShutInSidingKeyReleaseInstrument))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("releaseInstrument", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class ReleaseInstrument : TrackAsset
    {
        #region Private fields
        private tElementWithIDref _isHousedIn;
        private tElementWithIDref[] _releasesTrackAsset;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref isHousedIn
        {
            get
            {
                if ((_isHousedIn == null))
                {
                    _isHousedIn = new tElementWithIDref();
                }
                return _isHousedIn;
            }
            set
            {
                _isHousedIn = value;
            }
        }
        
        /// <summary>
        /// The release instrument releases the track asset so that it can be operated locally.
        /// </summary>
        [XmlElement("releasesTrackAsset", Order=1)]
        public tElementWithIDref[] releasesTrackAsset
        {
            get
            {
                return _releasesTrackAsset;
            }
            set
            {
                _releasesTrackAsset = value;
            }
        }
    }
    
    /// <summary>
    /// A device that releases control over an asset by releasing a key.
    /// When the key is released, the interlocking gets no status information about the track asset, and the staff can use the key to mechanically unlock and work the asset locally.
    /// The instrument "hides" the locked element from the interlocking.
    /// </summary>
    [XmlIncludeAttribute(typeof(ShutInSidingKeyReleaseInstrument))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("keyReleaseInstrument", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class KeyReleaseInstrument : ReleaseInstrument
    {
        #region Private fields
        private AccessabilityTypes _isOfAccessabilityType;
        #endregion
        
        [XmlElement(Order=0)]
        public AccessabilityTypes isOfAccessabilityType
        {
            get
            {
                return _isOfAccessabilityType;
            }
            set
            {
                _isOfAccessabilityType = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum AccessabilityTypes
    {
        /// <summary>
        /// Access is restricted to IM staff only, i.e. those holding a key to open the box that houses the key release instrument.
        /// </summary>
        imOnly,
        /// <summary>
        /// Access is not restricted. All railway staff (operators, drivers) can have access.
        /// </summary>
        notRestricted,
        other,
    }
    
    /// <summary>
    /// Key release instrument particular to shunting sidings on open line.
    /// It isolates (or <i>shuts in</i>) the shunting yard from the main running line.
    /// de-DE: Ausweichanschlussstelle
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("shutInSidingKeyReleaseInstrument", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class ShutInSidingKeyReleaseInstrument : KeyReleaseInstrument
    {
    }
    
    /// <summary>
    /// A connector used by track circuits.
    /// </summary>
    [XmlIncludeAttribute(typeof(Bond))]
    [XmlIncludeAttribute(typeof(ImpedanceBond))]
    [XmlIncludeAttribute(typeof(TcFeedingReceivingCable))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("tcConnector", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public abstract partial class TcConnector : TrackAsset
    {
        #region Private fields
        private LeftRight[] _connectsToRail;
        private tElementWithIDref[] _isConnectedToRailAt;
        private string _cableType;
        private int _numberOfStrands;
        #endregion
        
        /// <summary>
        /// Denotes to which rail to connect. Given with respect to the orientation of the topological linear element.
        /// </summary>
        [XmlElement("connectsToRail", Order=0)]
        public LeftRight[] connectsToRail
        {
            get
            {
                return _connectsToRail;
            }
            set
            {
                _connectsToRail = value;
            }
        }
        
        /// <summary>
        /// Describes where the TcConnector (or Cable) is connected to the rail, not the dimensions of the connector itself.
        /// </summary>
        [XmlElement("isConnectedToRailAt", Order=1)]
        public tElementWithIDref[] isConnectedToRailAt
        {
            get
            {
                return _isConnectedToRailAt;
            }
            set
            {
                _isConnectedToRailAt = value;
            }
        }
        
        /// <summary>
        /// Description of the type of cable according to cable book. For instance:
        /// <ul>
        /// <li>DE: 120 Cu, 240 Al. </li>
        /// <li>UK: cable type 5.</li>
        /// <li>NL: kabel 50 mm2 koper of 70 mm2 aluminium.</li>
        /// </ul>
        /// </summary>
        [XmlAttribute]
        public string cableType
        {
            get
            {
                return _cableType;
            }
            set
            {
                _cableType = value;
            }
        }
        
        /// <summary>
        /// Number of strands in a cable.
        /// Used in DE.
        /// DE: Verdrillte Seilen.
        /// NL: aantal aders.
        /// </summary>
        [XmlAttribute]
        public int numberOfStrands
        {
            get
            {
                return _numberOfStrands;
            }
            set
            {
                _numberOfStrands = value;
            }
        }
    }
    
    /// <summary>
    /// A cable needed for the correct functioning of train detection and traction current return.
    /// Bonds connect pieces of track and are designed to (dis)allow:
    /// <ul>
    /// <li>traction return current</li>
    /// <li>train detection signal</li>
    /// </ul>
    /// </summary>
    [XmlIncludeAttribute(typeof(ImpedanceBond))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("bond", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class Bond : TcConnector
    {
        #region Private fields
        private tElementWithIDref[] _connectsToBond;
        private TcBondTypes _isOfTcBondType;
        #endregion
        
        /// <summary>
        /// Recursive relation allows to connect a bond to another bond. This creates a network of bonds.
        /// </summary>
        [XmlElement("connectsToBond", Order=0)]
        public tElementWithIDref[] connectsToBond
        {
            get
            {
                return _connectsToBond;
            }
            set
            {
                _connectsToBond = value;
            }
        }
        
        [XmlElement(Order=1)]
        public TcBondTypes isOfTcBondType
        {
            get
            {
                return _isOfTcBondType;
            }
            set
            {
                _isOfTcBondType = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum TcBondTypes
    {
        /// <summary>
        /// de-DE: Kurzschlussverbinder
        /// </summary>
        shortCircuit,
        /// <summary>
        /// de-DE: S_Verbinder
        /// </summary>
        bondSForm,
        /// <summary>
        /// de-DE: Endverbinder
        /// </summary>
        termination,
        /// <summary>
        /// de-DE: Endverbinder modifiziert
        /// </summary>
        terminationBondModified,
        /// <summary>
        /// de-DE: Ueberlagerungsverbinder
        /// </summary>
        overlapping,
        /// <summary>
        /// de-DE: Potentialausgleichsverbinder
        /// </summary>
        potentialEqualisation,
        other,
    }
    
    /// <summary>
    /// A choke (coil) that filters certain frequencies. This separates TC signals from traction currents.
    /// <ul>
    /// <li>de-DE: Drosselspule</li>
    /// </ul>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("impedanceBond", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class ImpedanceBond : Bond
    {
        #region Private fields
        private bool _internalFilterTuning;
        private tElementWithIDref _isLocatedAt;
        #endregion
        
        /// <summary>
        /// True: the tuning filter is internal.
        /// False: the tuning filter is external.
        /// en-UK: The internal/external filter is tuned to a frequency. UK: The filter is internal for new work. Legacy chokes have external filter tuning.
        /// </summary>
        [XmlElement(Order=0)]
        public bool internalFilterTuning
        {
            get
            {
                return _internalFilterTuning;
            }
            set
            {
                _internalFilterTuning = value;
            }
        }
        
        /// <summary>
        /// The impedance bond is spot-located on or beside the line.
        /// </summary>
        [XmlElement(Order=1)]
        public tElementWithIDref isLocatedAt
        {
            get
            {
                if ((_isLocatedAt == null))
                {
                    _isLocatedAt = new tElementWithIDref();
                }
                return _isLocatedAt;
            }
            set
            {
                _isLocatedAt = value;
            }
        }
    }
    
    /// <summary>
    /// A cable that feeds signals into or receives signals from the track circuit.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("tcFeedingReceivingCable", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class TcFeedingReceivingCable : TcConnector
    {
        #region Private fields
        private tElementWithIDref _bondsTrackCircuit;
        private bool _feeding;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref bondsTrackCircuit
        {
            get
            {
                if ((_bondsTrackCircuit == null))
                {
                    _bondsTrackCircuit = new tElementWithIDref();
                }
                return _bondsTrackCircuit;
            }
            set
            {
                _bondsTrackCircuit = value;
            }
        }
        
        /// <summary>
        /// <ul>
        /// <li>true: cable feeds signal
        /// de-DE: Einspeisung</li>
        /// <li>false: cable receives signal
        /// de-DE: Ausspeisung</li>
        /// </ul>
        /// </summary>
        [XmlAttribute]
        public bool feeding
        {
            get
            {
                return _feeding;
            }
            set
            {
                _feeding = value;
            }
        }
    }
    
    /// <summary>
    /// Abstract super class for areas of track with particular properties.
    /// </summary>
    [XmlIncludeAttribute(typeof(TrackTypeSection))]
    [XmlIncludeAttribute(typeof(ShuntingSection))]
    [XmlIncludeAttribute(typeof(MainSection))]
    [XmlIncludeAttribute(typeof(OpenLineSection))]
    [XmlIncludeAttribute(typeof(SecondarySection))]
    [XmlIncludeAttribute(typeof(SidingSection))]
    [XmlIncludeAttribute(typeof(TrackDesignation))]
    [XmlIncludeAttribute(typeof(Trackway))]
    [XmlIncludeAttribute(typeof(SleeperTrack))]
    [XmlIncludeAttribute(typeof(SlabTrack))]
    [XmlIncludeAttribute(typeof(RestrictedArea))]
    [XmlIncludeAttribute(typeof(RemovedTrack))]
    [XmlIncludeAttribute(typeof(BlockedTrack))]
    [XmlIncludeAttribute(typeof(ConstructionArea))]
    [XmlIncludeAttribute(typeof(SpecialGauge))]
    [XmlIncludeAttribute(typeof(SpecialStructureGauge))]
    [XmlIncludeAttribute(typeof(SpecialTrackGauge))]
    [XmlIncludeAttribute(typeof(ElectrificationSegment))]
    [XmlIncludeAttribute(typeof(ElectrificationSection))]
    [XmlIncludeAttribute(typeof(OverheadLineSection))]
    [XmlIncludeAttribute(typeof(ConductorRailSection))]
    [XmlIncludeAttribute(typeof(ElectrificationGap))]
    [XmlIncludeAttribute(typeof(OverheadLineGap))]
    [XmlIncludeAttribute(typeof(ConductorRailGap))]
    [XmlIncludeAttribute(typeof(ElectrificationOverlap))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("trackProperty", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public abstract partial class TrackProperty : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref[] _isLocatedAt;
        #endregion
        
        /// <summary>
        /// The property can apply to one or more track areas. The concerned areas aren't necessarily connected.
        /// </summary>
        [XmlElement("isLocatedAt", Order=0)]
        public tElementWithIDref[] isLocatedAt
        {
            get
            {
                return _isLocatedAt;
            }
            set
            {
                _isLocatedAt = value;
            }
        }
    }
    
    /// <summary>
    /// Operational classification that applies to track.
    /// In case no suitable specialisation of this class is available, instantiate a TrackTypeSection with an appropriate Annotation or Description inherited from the Configured Base Object and that describes the needed type.
    /// </summary>
    [XmlIncludeAttribute(typeof(ShuntingSection))]
    [XmlIncludeAttribute(typeof(MainSection))]
    [XmlIncludeAttribute(typeof(OpenLineSection))]
    [XmlIncludeAttribute(typeof(SecondarySection))]
    [XmlIncludeAttribute(typeof(SidingSection))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("trackTypeSection", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class TrackTypeSection : TrackProperty
    {
    }
    
    /// <summary>
    /// de-DE: Rangierbahnhof
    /// nl-NL: rangeerterrein Kijfhoek
    /// fr-FR: gare de triage
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("shuntingSection", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class ShuntingSection : TrackTypeSection
    {
    }
    
    /// <summary>
    /// Main track in a station under control of an interlocking <i>as opposed to </i>open line.
    /// de-DE: Hauptgleis
    /// en-GB: Passengerline, thick line on drawing
    /// nl-NL: hoofdspoor in CBG
    /// fr-FR: voie principale en gare
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("mainSection", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class MainSection : TrackTypeSection
    {
    }
    
    /// <summary>
    /// Section of track on open line, i.e. not controlled by an interlocking.
    /// de-DE: Streckengleis
    /// nl-NL: vrije baan
    /// fr-FR: pleine voie hors poste (non applicable en France)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("openLineSection", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class OpenLineSection : TrackTypeSection
    {
    }
    
    /// <summary>
    /// en-UK: freight, shows as dotted line in operations drawing
    /// de-DE: Nebengleis
    /// nl-NL: Opstelspoor - gebruik SidingSection
    /// fr-FR: voie de service - utilisez SidingSection
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("secondarySection", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class SecondarySection : TrackTypeSection
    {
    }
    
    /// <summary>
    /// Track not considered part of the main infrastructure
    /// de-DE: Anschlussgleis, Werksgleis
    /// en-GB: used for shunting
    /// nl-NL: raccordement, opstelspoor
    /// fr-FR: voie de service
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("sidingSection", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class SidingSection : TrackTypeSection
    {
    }
    
    /// <summary>
    /// Name of the section that the signalman can refer to for operational purpose (e.g. track 1/2) or a name that appears on signalling plans.
    /// Use the Designation class inherited from the Configured Base Object to set the name.
    /// en-GB: line name
    /// de-DE: Gleisbezeichner
    /// nl-NL: spoornaam
    /// fr-FR: nom de la ligne
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("trackDesignation", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class TrackDesignation : TrackProperty
    {
    }
    
    /// <summary>
    /// Type of track, given if relevant for mounting signalling equipment.
    /// </summary>
    [XmlIncludeAttribute(typeof(SleeperTrack))]
    [XmlIncludeAttribute(typeof(SlabTrack))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("trackway", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class Trackway : TrackProperty
    {
    }
    
    /// <summary>
    /// Track with sleepers resting on ballast.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("sleeperTrack", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class SleeperTrack : Trackway
    {
        #region Private fields
        private MaterialTypes _hasSleepersMadeOf;
        #endregion
        
        [XmlElement(Order=0)]
        public MaterialTypes hasSleepersMadeOf
        {
            get
            {
                return _hasSleepersMadeOf;
            }
            set
            {
                _hasSleepersMadeOf = value;
            }
        }
    }
    
    /// <summary>
    /// Concrete, ballastless track bed.
    /// DE: feste Fahrbahn
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("slabTrack", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class SlabTrack : Trackway
    {
        #region Private fields
        private bool _isFloating;
        #endregion
        
        /// <summary>
        /// The concrete slab to which the rails are affixed is supported by a flexible layer that attenuates elastic waves.
        /// Need not to be filled in if irrelevant to signalling or unknown.
        /// </summary>
        [XmlAttribute]
        public bool isFloating
        {
            get
            {
                return _isFloating;
            }
            set
            {
                _isFloating = value;
            }
        }
    }
    
    /// <summary>
    /// Track area not usable for normal operation <i>over longer periods</i>. Construction activities are planned or taking place. The process and the time frames when activities take place are separated from the area.
    /// en-GB: Track area under possession
    /// en-GB: SDEF blue area during a given time frame
    /// </summary>
    [XmlIncludeAttribute(typeof(RemovedTrack))]
    [XmlIncludeAttribute(typeof(BlockedTrack))]
    [XmlIncludeAttribute(typeof(ConstructionArea))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("restrictedArea", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class RestrictedArea : TrackProperty
    {
    }
    
    /// <summary>
    /// Area removed or earmarked for removal. At some stage during the construction process the track is physically removed but the (topological) information about the area is retained so that it can still be shown in the diagrams or  restored at a later stage, e.g. after track bed renewal.
    /// de-DE: ausgebaut
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("removedTrack", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class RemovedTrack : RestrictedArea
    {
    }
    
    /// <summary>
    /// Access is only possible by special procedure, similar to shunting.
    /// de-DE: gesperrt
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("blockedTrack", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class BlockedTrack : RestrictedArea
    {
    }
    
    /// <summary>
    /// Track area under construction.
    /// de-DE: Baugleis
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("constructionArea", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class ConstructionArea : RestrictedArea
    {
    }
    
    /// <summary>
    /// Area(s) where a non-standard gauge applies. Standard gauges can be found in the national domain or indicated by reference drawings.
    /// Structure gauge is the envelope.
    /// Track gauge is the distance between the rails.
    /// </summary>
    [XmlIncludeAttribute(typeof(SpecialStructureGauge))]
    [XmlIncludeAttribute(typeof(SpecialTrackGauge))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("specialGauge", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public abstract partial class SpecialGauge : TrackProperty
    {
    }
    
    /// <summary>
    /// The structure gauge is the outline within which there are no obstacles.
    /// de-DE: Lichtraumprofil
    /// nl-NL: profiel van vrije ruimte.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("specialStructureGauge", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class SpecialStructureGauge : SpecialGauge
    {
        #region Private fields
        private tElementWithIDref[] _hasReferenceDrawing;
        private string _gaugeName;
        #endregion
        
        /// <summary>
        /// Non-standard gauges are typically associated with (sets of) drawings.
        /// </summary>
        [XmlElement("hasReferenceDrawing", Order=0)]
        public tElementWithIDref[] hasReferenceDrawing
        {
            get
            {
                return _hasReferenceDrawing;
            }
            set
            {
                _hasReferenceDrawing = value;
            }
        }
        
        /// <summary>
        /// Name of the structure gauge.
        /// e.g. S-Bahn Berlin, GC in Germany or PVR-GC in NL.
        /// </summary>
        [XmlAttribute]
        public string gaugeName
        {
            get
            {
                return _gaugeName;
            }
            set
            {
                _gaugeName = value;
            }
        }
    }
    
    /// <summary>
    /// Area with non-standard gauge, i.e. other than 1435 mm.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("specialTrackGauge", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class SpecialTrackGauge : SpecialGauge
    {
        #region Private fields
        private Length[] _hasValue;
        #endregion
        
        /// <summary>
        /// Dual gauge has two values for the distance between the rails, e.g. in CH.
        /// </summary>
        [XmlElement("hasValue", Order=0)]
        public Length[] hasValue
        {
            get
            {
                return _hasValue;
            }
            set
            {
                _hasValue = value;
            }
        }
    }
    
    /// <summary>
    /// Electrification segment with information relevant to signalling.
    /// </summary>
    [XmlIncludeAttribute(typeof(ElectrificationSection))]
    [XmlIncludeAttribute(typeof(OverheadLineSection))]
    [XmlIncludeAttribute(typeof(ConductorRailSection))]
    [XmlIncludeAttribute(typeof(ElectrificationGap))]
    [XmlIncludeAttribute(typeof(OverheadLineGap))]
    [XmlIncludeAttribute(typeof(ConductorRailGap))]
    [XmlIncludeAttribute(typeof(ElectrificationOverlap))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("electrificationSegment", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public abstract partial class ElectrificationSegment : TrackProperty
    {
    }
    
    /// <summary>
    /// Elementary section allowing electric train traction to be switched on or off
    /// </summary>
    [XmlIncludeAttribute(typeof(OverheadLineSection))]
    [XmlIncludeAttribute(typeof(ConductorRailSection))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("electrificationSection", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class ElectrificationSection : ElectrificationSegment
    {
    }
    
    /// <summary>
    /// A section of the track where traction power is provided by an overhead line.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("overheadLineSection", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class OverheadLineSection : ElectrificationSection
    {
        #region Private fields
        private TractionVoltageTypes[] _isOfTractionVoltageType;
        #endregion
        
        [XmlElement("isOfTractionVoltageType", Order=0)]
        public TractionVoltageTypes[] isOfTractionVoltageType
        {
            get
            {
                return _isOfTractionVoltageType;
            }
            set
            {
                _isOfTractionVoltageType = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum TractionVoltageTypes
    {
        [XmlEnumAttribute("25kVAC_50Hz")]
        [EnumMember(Value="25kVAC_50Hz")]
        Item25kVAC_50Hz,
        [XmlEnumAttribute("1500VDC")]
        [EnumMember(Value="1500VDC")]
        Item1500VDC,
        [XmlEnumAttribute("15kVAC_16_7Hz")]
        [EnumMember(Value="15kVAC_16_7Hz")]
        Item15kVAC_16_7Hz,
        [XmlEnumAttribute("2400VDC")]
        [EnumMember(Value="2400VDC")]
        Item2400VDC,
        [XmlEnumAttribute("3000VDC")]
        [EnumMember(Value="3000VDC")]
        Item3000VDC,
        /// <summary>
        /// 750V DC overhead catenary line
        /// </summary>
        [XmlEnumAttribute("750VDC")]
        [EnumMember(Value="750VDC")]
        Item750VDC,
        /// <summary>
        /// choose other if there is a specialisation in the national domain
        /// </summary>
        other,
    }
    
    /// <summary>
    /// A section of the track equipped with conductor rail, often referred to as third rail.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("conductorRailSection", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class ConductorRailSection : ElectrificationSection
    {
        #region Private fields
        private ConductorVoltageTypes[] _isOfConductorVoltageType;
        #endregion
        
        [XmlElement("isOfConductorVoltageType", Order=0)]
        public ConductorVoltageTypes[] isOfConductorVoltageType
        {
            get
            {
                return _isOfConductorVoltageType;
            }
            set
            {
                _isOfConductorVoltageType = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum ConductorVoltageTypes
    {
        [XmlEnumAttribute("1200VDC")]
        [EnumMember(Value="1200VDC")]
        Item1200VDC,
        /// <summary>
        /// 750 VDC third rail
        /// </summary>
        [XmlEnumAttribute("750VDC")]
        [EnumMember(Value="750VDC")]
        Item750VDC,
        other,
    }
    
    /// <summary>
    /// Gap in the traction system where no traction power can ever be drawn.
    /// UK: neutral section in overhead line systems, gap in third rail systems.
    /// DE: Trennstelle
    /// NL: spanningsloze sectie
    /// FR: section de s&#233;paration
    /// </summary>
    [XmlIncludeAttribute(typeof(OverheadLineGap))]
    [XmlIncludeAttribute(typeof(ConductorRailGap))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("electrificationGap", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class ElectrificationGap : ElectrificationSegment
    {
    }
    
    /// <summary>
    /// A gap in the overhead traction. The wired attribute indicates whether or not a (neutral) line is present.
    /// 
    /// A bascule bridge would typically have a gap with open wire and no type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("overheadLineGap", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class OverheadLineGap : ElectrificationGap
    {
        #region Private fields
        private OverheadLineGapTypes _isOfOverheadLineGapType;
        private bool _wired;
        #endregion
        
        [XmlElement(Order=0)]
        public OverheadLineGapTypes isOfOverheadLineGapType
        {
            get
            {
                return _isOfOverheadLineGapType;
            }
            set
            {
                _isOfOverheadLineGapType = value;
            }
        }
        
        /// <summary>
        /// true: pantograph must be lowered.
        /// false: no need to lower the pantograph
        /// </summary>
        [XmlAttribute]
        public bool wired
        {
            get
            {
                return _wired;
            }
            set
            {
                _wired = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum OverheadLineGapTypes
    {
        /// <summary>
        /// Separates two AC electrification sections with different phases.
        /// </summary>
        phaseLock,
        /// <summary>
        /// Separates two electrified sections with different voltages.
        /// </summary>
        voltageLock,
    }
    
    /// <summary>
    /// A gap in the conductor rail traction.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("conductorRailGap", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class ConductorRailGap : ElectrificationGap
    {
    }
    
    /// <summary>
    /// Section where overhead lines overlap. When a train stops in the overlap, chances are that current runs through and damages the pantograph. Trains should therefore not stop here.
    /// fr-FR: sectionnement critique
    /// nl-NL: open spaninrichting.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("electrificationOverlap", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class ElectrificationOverlap : ElectrificationSegment
    {
        #region Private fields
        private string _type;
        #endregion
        
        /// <summary>
        /// Description of the type of overlap like booster, auto, traction mounted auxiliary, normally open/closed switch.
        /// Used for assessing where to place signals to minimise the risk of trains stopping in the overlap.
        /// </summary>
        [XmlAttribute]
        public string type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }
    }
    
    /// <summary>
    /// The lock accepts a key and locks out one or more track assets from interlocking control.
    /// </summary>
    [XmlIncludeAttribute(typeof(PointLock))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("lock", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class Lock : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref _acceptsKey;
        private tElementWithIDref _isDependentLockInLockCombination;
        private tElementWithIDref _isInKeyReleaseInstrument;
        private tElementWithIDref _isMasterLockInLockCombination;
        private tElementWithIDref _locksAssetInState;
        private bool _captiveKey;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref acceptsKey
        {
            get
            {
                if ((_acceptsKey == null))
                {
                    _acceptsKey = new tElementWithIDref();
                }
                return _acceptsKey;
            }
            set
            {
                _acceptsKey = value;
            }
        }
        
        /// <summary>
        /// The lock is a dependent lock in this lock combination.
        /// </summary>
        [XmlElement(Order=1)]
        public tElementWithIDref isDependentLockInLockCombination
        {
            get
            {
                if ((_isDependentLockInLockCombination == null))
                {
                    _isDependentLockInLockCombination = new tElementWithIDref();
                }
                return _isDependentLockInLockCombination;
            }
            set
            {
                _isDependentLockInLockCombination = value;
            }
        }
        
        /// <summary>
        /// The lock is a component of the key release instrument.
        /// </summary>
        [XmlElement(Order=2)]
        public tElementWithIDref isInKeyReleaseInstrument
        {
            get
            {
                if ((_isInKeyReleaseInstrument == null))
                {
                    _isInKeyReleaseInstrument = new tElementWithIDref();
                }
                return _isInKeyReleaseInstrument;
            }
            set
            {
                _isInKeyReleaseInstrument = value;
            }
        }
        
        /// <summary>
        /// This lock is the masterlock in this lock combination.
        /// </summary>
        [XmlElement(Order=3)]
        public tElementWithIDref isMasterLockInLockCombination
        {
            get
            {
                if ((_isMasterLockInLockCombination == null))
                {
                    _isMasterLockInLockCombination = new tElementWithIDref();
                }
                return _isMasterLockInLockCombination;
            }
            set
            {
                _isMasterLockInLockCombination = value;
            }
        }
        
        /// <summary>
        /// Locks an asset such as point in a given state.
        /// </summary>
        [XmlElement(Order=4)]
        public tElementWithIDref locksAssetInState
        {
            get
            {
                if ((_locksAssetInState == null))
                {
                    _locksAssetInState = new tElementWithIDref();
                }
                return _locksAssetInState;
            }
            set
            {
                _locksAssetInState = value;
            }
        }
        
        /// <summary>
        /// True: the key is normally in.
        /// False: the key is normally out.
        /// </summary>
        [XmlAttribute]
        public bool captiveKey
        {
            get
            {
                return _captiveKey;
            }
            set
            {
                _captiveKey = value;
            }
        }
    }
    
    /// <summary>
    /// Lock attached to a clamp that prevents point blades from moving.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("pointLock", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class PointLock : Lock
    {
        #region Private fields
        private LeftRight _isMountedOnSide;
        private string _type;
        #endregion
        
        /// <summary>
        /// Used only for point locks.
        /// Indicates left or right side, viewed from the facing side of the point.
        /// </summary>
        [XmlElement(Order=0)]
        public LeftRight isMountedOnSide
        {
            get
            {
                return _isMountedOnSide;
            }
            set
            {
                _isMountedOnSide = value;
            }
        }
        
        /// <summary>
        /// Type of lock such as
        /// point blade lock
        /// point blade clamp
        /// HV 73 (DE)
        /// articolo 8 (IT)
        /// neutralisation, broche, verrou de l&#233;vier, agrafe, boulon de calage, griffe (FR)
        /// wisselgrendel met Z of KZ-slot (NL)
        /// </summary>
        [XmlAttribute]
        public string type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }
    }
    
    /// <summary>
    /// Reading distance defined following national rules.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("signalSightingDistance", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class SignalSightingDistance : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref _appliesToSignal;
        private Length _hasAvailableDistance;
        private Length _hasMinimumDistance;
        private Length _hasPreferredDistance;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref appliesToSignal
        {
            get
            {
                if ((_appliesToSignal == null))
                {
                    _appliesToSignal = new tElementWithIDref();
                }
                return _appliesToSignal;
            }
            set
            {
                _appliesToSignal = value;
            }
        }
        
        /// <summary>
        /// Reading distance without any mitigation works, i.e. assessed on site before removing obstructions.
        /// </summary>
        [XmlElement(Order=1)]
        public Length hasAvailableDistance
        {
            get
            {
                if ((_hasAvailableDistance == null))
                {
                    _hasAvailableDistance = new Length();
                }
                return _hasAvailableDistance;
            }
            set
            {
                _hasAvailableDistance = value;
            }
        }
        
        /// <summary>
        /// Minimal distance calculated based on the minimum response time, the signal complexity and the local speed.
        /// Fixed in national rules, sometimes adapted to local circumstances.
        /// </summary>
        [XmlElement(Order=2)]
        public Length hasMinimumDistance
        {
            get
            {
                if ((_hasMinimumDistance == null))
                {
                    _hasMinimumDistance = new Length();
                }
                return _hasMinimumDistance;
            }
            set
            {
                _hasMinimumDistance = value;
            }
        }
        
        /// <summary>
        /// Distance at which the signal shall be visible if economically viable. Fixed in national rules. Always greater than the minimum distance.
        /// <ul>
        /// <li>For NR this maps to "required distance" and can also apply to the route indicators or shunting aspects.</li>
        /// </ul>
        /// <ul>
        /// <li>de-DE: Sollsignalsicht.</li>
        /// </ul>
        /// </summary>
        [XmlElement(Order=3)]
        public Length hasPreferredDistance
        {
            get
            {
                if ((_hasPreferredDistance == null))
                {
                    _hasPreferredDistance = new Length();
                }
                return _hasPreferredDistance;
            }
            set
            {
                _hasPreferredDistance = value;
            }
        }
    }
    
    /// <summary>
    /// Watchdog that checks the pulse of the inter-RBC connection.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("rbcWatchdog", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class RbcWatchdog : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref[] _appliesToRbc;
        private Duration _hasLifeSignTimer;
        #endregion
        
        [XmlElement("appliesToRbc", Order=0)]
        public tElementWithIDref[] appliesToRbc
        {
            get
            {
                return _appliesToRbc;
            }
            set
            {
                _appliesToRbc = value;
            }
        }
        
        [XmlElement(Order=1)]
        public Duration hasLifeSignTimer
        {
            get
            {
                if ((_hasLifeSignTimer == null))
                {
                    _hasLifeSignTimer = new Duration();
                }
                return _hasLifeSignTimer;
            }
            set
            {
                _hasLifeSignTimer = value;
            }
        }
    }
    
    /// <summary>
    /// Activation of the level crossing means that the barriers start closing and/or the road user gets a warning.
    /// This class stores parameters relevant to the activation process.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("levelCrossingActivation", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class LevelCrossingActivation : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref[] _activatesDangerTrackArea;
        private LevelCrossingActivationDelaySet _hasLevelCrossingActivationDelaySet;
        private LevelCrossingActivationTypes _isOfLxActivationType;
        private tElementWithIDref _usesTriggerAssignment;
        private bool _speedDiscrimination;
        private bool _stoppingTrain;
        #endregion
        
        /// <summary>
        /// One activation applies to one crossing that might be composed of several danger area tracks.
        /// </summary>
        [XmlElement("activatesDangerTrackArea", Order=0)]
        public tElementWithIDref[] activatesDangerTrackArea
        {
            get
            {
                return _activatesDangerTrackArea;
            }
            set
            {
                _activatesDangerTrackArea = value;
            }
        }
        
        [XmlElement(Order=1)]
        public LevelCrossingActivationDelaySet hasLevelCrossingActivationDelaySet
        {
            get
            {
                if ((_hasLevelCrossingActivationDelaySet == null))
                {
                    _hasLevelCrossingActivationDelaySet = new LevelCrossingActivationDelaySet();
                }
                return _hasLevelCrossingActivationDelaySet;
            }
            set
            {
                _hasLevelCrossingActivationDelaySet = value;
            }
        }
        
        /// <summary>
        /// NR: not used
        /// </summary>
        [XmlElement(Order=2)]
        public LevelCrossingActivationTypes isOfLxActivationType
        {
            get
            {
                return _isOfLxActivationType;
            }
            set
            {
                _isOfLxActivationType = value;
            }
        }
        
        /// <summary>
        /// Link to a trigger assignment that informs about the activation of the Level Crossing
        /// </summary>
        [XmlElement(Order=3)]
        public tElementWithIDref usesTriggerAssignment
        {
            get
            {
                if ((_usesTriggerAssignment == null))
                {
                    _usesTriggerAssignment = new tElementWithIDref();
                }
                return _usesTriggerAssignment;
            }
            set
            {
                _usesTriggerAssignment = value;
            }
        }
        
        /// <summary>
        /// True: a speed measuring system activates the level crossing. This allows matching the LX activation delay to the speed of the approaching train.
        /// False: no speed measure
        /// </summary>
        [XmlAttribute]
        public bool speedDiscrimination
        {
            get
            {
                return _speedDiscrimination;
            }
            set
            {
                _speedDiscrimination = value;
            }
        }
        
        /// <summary>
        /// The activation is delayed when a train stops at the platform.
        /// (planned stopping train as opposed to passing train).
        /// </summary>
        [XmlAttribute]
        public bool stoppingTrain
        {
            get
            {
                return _stoppingTrain;
            }
            set
            {
                _stoppingTrain = value;
            }
        }
    }
    
    /// <summary>
    /// Allows storing a set of activation delays.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("levelCrossingActivationDelaySet", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class LevelCrossingActivationDelaySet
    {
        #region Private fields
        private Duration _hasCalculatedActivationDelay;
        private Duration _hasCalculatedSignalDelay;
        #endregion
        
        /// <summary>
        /// Calculated delay of level crossing activation.
        /// Can be zero.
        /// </summary>
        [XmlElement(Order=0)]
        public Duration hasCalculatedActivationDelay
        {
            get
            {
                if ((_hasCalculatedActivationDelay == null))
                {
                    _hasCalculatedActivationDelay = new Duration();
                }
                return _hasCalculatedActivationDelay;
            }
            set
            {
                _hasCalculatedActivationDelay = value;
            }
        }
        
        /// <summary>
        /// The opening of the main signal covering the level crossing can be delayed.
        /// If not provided, equals zero.
        /// 
        /// Typically allows road users to evacuate the danger area in case of half-barrier crossings.
        /// </summary>
        [XmlElement(Order=1)]
        public Duration hasCalculatedSignalDelay
        {
            get
            {
                if ((_hasCalculatedSignalDelay == null))
                {
                    _hasCalculatedSignalDelay = new Duration();
                }
                return _hasCalculatedSignalDelay;
            }
            set
            {
                _hasCalculatedSignalDelay = value;
            }
        }
    }
    
    /// <summary>
    /// The activation depends on the type of level crossing. Some need earlier activation than others.
    /// 
    /// Enum: B&#220; Funktions&#252;berwachung
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum LevelCrossingActivationTypes
    {
        locallyMonitored,
        locallyMonitoredOptimisedActivation,
        mainSignalProtected,
        selfSupervised,
    }
    
    /// <summary>
    /// The terminal for locally working line-side elements.
    /// </summary>
    [XmlIncludeAttribute(typeof(ControlFrame))]
    [XmlIncludeAttribute(typeof(GroundFrame))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("localOperationDevice", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class LocalOperationDevice : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref _uiDesignAttachment;
        private LocalOperationUiElement[] _composedOfUiElement;
        private OperatorPosition _hasOperatorPosition;
        private LocalOperationDeviceTypes _isOfLocalOperationDeviceType;
        private tElementWithIDref _isSupportedBy;
        private tElementWithIDref _refersToController;
        #endregion
        
        /// <summary>
        /// Reference to an attachment that describes the actual user interface of the local operation device in detail. Typically includes a drawing of the layout.
        /// </summary>
        [XmlElement(Order=0)]
        public tElementWithIDref UiDesignAttachment
        {
            get
            {
                if ((_uiDesignAttachment == null))
                {
                    _uiDesignAttachment = new tElementWithIDref();
                }
                return _uiDesignAttachment;
            }
            set
            {
                _uiDesignAttachment = value;
            }
        }
        
        /// <summary>
        /// The local operation device has a set of buttons, switches.
        /// </summary>
        [XmlElement("composedOfUiElement", Order=1)]
        public LocalOperationUiElement[] composedOfUiElement
        {
            get
            {
                return _composedOfUiElement;
            }
            set
            {
                _composedOfUiElement = value;
            }
        }
        
        [XmlElement(Order=2)]
        public OperatorPosition hasOperatorPosition
        {
            get
            {
                return _hasOperatorPosition;
            }
            set
            {
                _hasOperatorPosition = value;
            }
        }
        
        [XmlElement(Order=3)]
        public LocalOperationDeviceTypes isOfLocalOperationDeviceType
        {
            get
            {
                return _isOfLocalOperationDeviceType;
            }
            set
            {
                _isOfLocalOperationDeviceType = value;
            }
        }
        
        /// <summary>
        /// the device is supported by a post or housed in a cabinet.
        /// </summary>
        [XmlElement(Order=4)]
        public tElementWithIDref isSupportedBy
        {
            get
            {
                if ((_isSupportedBy == null))
                {
                    _isSupportedBy = new tElementWithIDref();
                }
                return _isSupportedBy;
            }
            set
            {
                _isSupportedBy = value;
            }
        }
        
        /// <summary>
        /// Refers to the controller that normally controls the field element (interlocking, decentral interlocking or field object controller).
        /// </summary>
        [XmlElement(Order=5)]
        public tElementWithIDref refersToController
        {
            get
            {
                if ((_refersToController == null))
                {
                    _refersToController = new tElementWithIDref();
                }
                return _refersToController;
            }
            set
            {
                _refersToController = value;
            }
        }
    }
    
    /// <summary>
    /// The position of the operator relative to the equipment, when viewed from the associated track.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum OperatorPosition
    {
        left,
        right,
        far,
        near,
    }
    
    /// <summary>
    /// Constructional type of the local operation device.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum LocalOperationDeviceTypes
    {
        /// <summary>
        /// A vertical panel.
        /// de-DE: Tafel
        /// </summary>
        panel,
        /// <summary>
        /// An inclined panel.
        /// de-DE: Pult
        /// en-UK: part of the UI where the interactive UI elements are.
        /// </summary>
        console,
        /// <summary>
        /// A vertical column with integrated control elements.
        /// de-DE: S&#228;ule
        /// </summary>
        column,
        /// <summary>
        /// A small panel, can be portable.
        /// de-DE: Tablett
        /// </summary>
        tablet,
        /// <summary>
        /// A set of levers, typically used to throw switch blades and (dis-)engage point locks.
        /// en-GB: ground frame
        /// </summary>
        leverFrame,
        /// <summary>
        /// de-DE: sonstige
        /// </summary>
        other,
    }
    
    /// <summary>
    /// A trackside frame for locally controlling movable elements.
    /// </summary>
    [XmlIncludeAttribute(typeof(GroundFrame))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("controlFrame", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class ControlFrame : LocalOperationDevice
    {
        #region Private fields
        private bool _covered;
        private string _releaseNumber;
        #endregion
        
        /// <summary>
        /// True if the device is covered. False otherwise.
        /// </summary>
        [XmlAttribute]
        public bool covered
        {
            get
            {
                return _covered;
            }
            set
            {
                _covered = value;
            }
        }
        
        /// <summary>
        /// The release number from the associated signal box
        /// </summary>
        [XmlAttribute]
        public string releaseNumber
        {
            get
            {
                return _releaseNumber;
            }
            set
            {
                _releaseNumber = value;
            }
        }
    }
    
    /// <summary>
    /// Mechanical lever frame for manually throwing movable elements like points.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("groundFrame", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class GroundFrame : ControlFrame
    {
        #region Private fields
        private int _numberOfLevers;
        #endregion
        
        [XmlAttribute]
        public int numberOfLevers
        {
            get
            {
                return _numberOfLevers;
            }
            set
            {
                _numberOfLevers = value;
            }
        }
    }
    
    /// <summary>
    /// Cable, wire or core.
    /// A cable provides the physical connection.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("cable", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class Cable : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref[] _enclosesCable;
        private Length _hasLength;
        private tElementWithIDref _isLocatedAt;
        #endregion
        
        /// <summary>
        /// A cable can enclose one or more wires. A wire can have one or more cores.
        /// </summary>
        [XmlElement("enclosesCable", Order=0)]
        public tElementWithIDref[] enclosesCable
        {
            get
            {
                return _enclosesCable;
            }
            set
            {
                _enclosesCable = value;
            }
        }
        
        /// <summary>
        /// In situ required or designed length of cable.
        /// Can differ from the length of cable route because of the need to cover the last metres to the field element, slack or spare length.
        /// </summary>
        [XmlElement(Order=1)]
        public Length hasLength
        {
            get
            {
                if ((_hasLength == null))
                {
                    _hasLength = new Length();
                }
                return _hasLength;
            }
            set
            {
                _hasLength = value;
            }
        }
        
        /// <summary>
        /// The length of the RTM linear location indicates the <i>minimum length </i>of cable. Additional length has to be added for the distance to the connected elements outside the cable duct topology.
        /// </summary>
        [XmlElement(Order=2)]
        public tElementWithIDref isLocatedAt
        {
            get
            {
                if ((_isLocatedAt == null))
                {
                    _isLocatedAt = new tElementWithIDref();
                }
                return _isLocatedAt;
            }
            set
            {
                _isLocatedAt = value;
            }
        }
    }
    
    /// <summary>
    /// Facade for a location that may, or not, be associated with an asset.
    /// </summary>
    [XmlIncludeAttribute(typeof(LocationOfInterest))]
    [XmlIncludeAttribute(typeof(LocationReference))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("locationProxy", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public abstract partial class LocationProxy : ConfiguredBaseObject
    {
    }
    
    /// <summary>
    /// Point of interest to the signalling system.
    /// Often a location that is well-identifiable, e.g. as to attract attention to a dangerpoint, e.g. to the tip of a point or gauge conflict or end of platform.
    /// Can be used for specifying dangerpoints, end of overlap or ATP protected location, a location where speed changes.
    /// fr-FR: point remarquable
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("locationOfInterest", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class LocationOfInterest : LocationProxy
    {
        #region Private fields
        private tElementWithIDref _isLocatedAt;
        private tElementWithIDref _refersToBigMetalMassArea;
        private tElementWithIDref _refersToDangerAreaTrack;
        private tElementWithIDref _refersToPlatformEdge;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref isLocatedAt
        {
            get
            {
                if ((_isLocatedAt == null))
                {
                    _isLocatedAt = new tElementWithIDref();
                }
                return _isLocatedAt;
            }
            set
            {
                _isLocatedAt = value;
            }
        }
        
        /// <summary>
        /// Reference to a massive metal structure such as a bridge.
        /// </summary>
        [XmlElement(Order=1)]
        public tElementWithIDref refersToBigMetalMassArea
        {
            get
            {
                if ((_refersToBigMetalMassArea == null))
                {
                    _refersToBigMetalMassArea = new tElementWithIDref();
                }
                return _refersToBigMetalMassArea;
            }
            set
            {
                _refersToBigMetalMassArea = value;
            }
        }
        
        [XmlElement(Order=2)]
        public tElementWithIDref refersToDangerAreaTrack
        {
            get
            {
                if ((_refersToDangerAreaTrack == null))
                {
                    _refersToDangerAreaTrack = new tElementWithIDref();
                }
                return _refersToDangerAreaTrack;
            }
            set
            {
                _refersToDangerAreaTrack = value;
            }
        }
        
        [XmlElement(Order=3)]
        public tElementWithIDref refersToPlatformEdge
        {
            get
            {
                if ((_refersToPlatformEdge == null))
                {
                    _refersToPlatformEdge = new tElementWithIDref();
                }
                return _refersToPlatformEdge;
            }
            set
            {
                _refersToPlatformEdge = value;
            }
        }
    }
    
    /// <summary>
    /// Reference to the protected infrastructure object <i>e.g. a signal or fouling point.</i>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("locationReference", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class LocationReference : LocationProxy
    {
        #region Private fields
        private tElementWithIDref _refersToTrackAsset;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref refersToTrackAsset
        {
            get
            {
                if ((_refersToTrackAsset == null))
                {
                    _refersToTrackAsset = new tElementWithIDref();
                }
                return _refersToTrackAsset;
            }
            set
            {
                _refersToTrackAsset = value;
            }
        }
    }
    
    /// <summary>
    /// Telephone for communication between train driver and signalman.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("signalPostTelephone", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class SignalPostTelephone : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref[] _appliesToSignal;
        private tElementWithIDref _isLocatedAt;
        private string _position;
        private string _telephoneType;
        #endregion
        
        [XmlElement("appliesToSignal", Order=0)]
        public tElementWithIDref[] appliesToSignal
        {
            get
            {
                return _appliesToSignal;
            }
            set
            {
                _appliesToSignal = value;
            }
        }
        
        [XmlElement(Order=1)]
        public tElementWithIDref isLocatedAt
        {
            get
            {
                if ((_isLocatedAt == null))
                {
                    _isLocatedAt = new tElementWithIDref();
                }
                return _isLocatedAt;
            }
            set
            {
                _isLocatedAt = value;
            }
        }
        
        /// <summary>
        /// Description of the position of the telephone in relation to the associated signal (distance and offset from track)
        /// </summary>
        [XmlAttribute]
        public string position
        {
            get
            {
                return _position;
            }
            set
            {
                _position = value;
            }
        }
        
        /// <summary>
        /// Type of telephone: locked, direct line, dial phone. etc.
        /// </summary>
        [XmlAttribute]
        public string telephoneType
        {
            get
            {
                return _telephoneType;
            }
            set
            {
                _telephoneType = value;
            }
        }
    }
    
    /// <summary>
    /// Deactivation of the level crossing means that the barriers open and/or the road user gets an all-clear.
    /// This class stores parameters relevant to the de-activation process.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("levelCrossingDeactivation", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class LevelCrossingDeactivation : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref _appliestoDangerAreaTrack;
        private tElementWithIDref _usesTriggerAssignment;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref appliestoDangerAreaTrack
        {
            get
            {
                if ((_appliestoDangerAreaTrack == null))
                {
                    _appliestoDangerAreaTrack = new tElementWithIDref();
                }
                return _appliestoDangerAreaTrack;
            }
            set
            {
                _appliestoDangerAreaTrack = value;
            }
        }
        
        /// <summary>
        /// Link to a trigger assignment that informs about the deactivation of the level crossing.
        /// </summary>
        [XmlElement(Order=1)]
        public tElementWithIDref usesTriggerAssignment
        {
            get
            {
                if ((_usesTriggerAssignment == null))
                {
                    _usesTriggerAssignment = new tElementWithIDref();
                }
                return _usesTriggerAssignment;
            }
            set
            {
                _usesTriggerAssignment = value;
            }
        }
    }
    
    /// <summary>
    /// Informs at what distance the TP device or system is placed on approach to the signal.
    /// The signal could be a speed restriction board (NR approach).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("tpsRelation", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class TpsRelation : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref _appliesToBufferStop;
        private tElementWithIDref[] _appliesToRelatedSignal;
        private tElementWithIDref _appliesToSignal;
        private tElementWithIDref _appliesToTpsDataTxSystem;
        private tElementWithIDref _appliesToTpsDevice;
        private Length _hasDistanceFromTpsToSignal;
        #endregion
        
        /// <summary>
        /// States that the TP system protects a buffer stop (in use with ProRail and NR).
        /// </summary>
        [XmlElement(Order=0)]
        public tElementWithIDref appliesToBufferStop
        {
            get
            {
                if ((_appliesToBufferStop == null))
                {
                    _appliesToBufferStop = new tElementWithIDref();
                }
                return _appliesToBufferStop;
            }
            set
            {
                _appliesToBufferStop = value;
            }
        }
        
        /// <summary>
        /// The TPS device can reference repeater signals, stop marker boards, distant signals (DB).
        /// </summary>
        [XmlElement("appliesToRelatedSignal", Order=1)]
        public tElementWithIDref[] appliesToRelatedSignal
        {
            get
            {
                return _appliesToRelatedSignal;
            }
            set
            {
                _appliesToRelatedSignal = value;
            }
        }
        
        /// <summary>
        /// The signal that dictates the position of the TPS device. This is given with the distance from the signal.
        /// </summary>
        [XmlElement(Order=2)]
        public tElementWithIDref appliesToSignal
        {
            get
            {
                if ((_appliesToSignal == null))
                {
                    _appliesToSignal = new tElementWithIDref();
                }
                return _appliesToSignal;
            }
            set
            {
                _appliesToSignal = value;
            }
        }
        
        /// <summary>
        /// Applies to a TPS data transmission system.
        /// </summary>
        [XmlElement(Order=3)]
        public tElementWithIDref appliesToTpsDataTxSystem
        {
            get
            {
                if ((_appliesToTpsDataTxSystem == null))
                {
                    _appliesToTpsDataTxSystem = new tElementWithIDref();
                }
                return _appliesToTpsDataTxSystem;
            }
            set
            {
                _appliesToTpsDataTxSystem = value;
            }
        }
        
        [XmlElement(Order=4)]
        public tElementWithIDref appliesToTpsDevice
        {
            get
            {
                if ((_appliesToTpsDevice == null))
                {
                    _appliesToTpsDevice = new tElementWithIDref();
                }
                return _appliesToTpsDevice;
            }
            set
            {
                _appliesToTpsDevice = value;
            }
        }
        
        /// <summary>
        /// Distance from the TP device or system  to the signal.
        /// </summary>
        [XmlElement(Order=5)]
        public Length hasDistanceFromTpsToSignal
        {
            get
            {
                if ((_hasDistanceFromTpsToSignal == null))
                {
                    _hasDistanceFromTpsToSignal = new Length();
                }
                return _hasDistanceFromTpsToSignal;
            }
            set
            {
                _hasDistanceFromTpsToSignal = value;
            }
        }
    }
    
    /// <summary>
    /// Atomic information displayed by the signal, conveyed by means of light, shape, text, symbol or sound.
    /// </summary>
    [XmlIncludeAttribute(typeof(ActiveAspect))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("aspect", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class Aspect : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref[] _appliesToTrainCategory;
        private Symbol _hasSymbol;
        private TextInformation _hasTextInformation;
        private string _aspectId;
        private bool _indicatesRouteDirection;
        #endregion
        
        /// <summary>
        /// The aspect may apply to a train category.
        /// If no category is given, the aspect applies to <i>all</i> categories.
        /// Some IM must explicitly define the train category to which the aspect applies. NR for instance needs a list of train categories to which a speed aspect applies.
        /// See the <u>Speed profiles</u> package for more information.
        /// </summary>
        [XmlElement("appliesToTrainCategory", Order=0)]
        public tElementWithIDref[] appliesToTrainCategory
        {
            get
            {
                return _appliesToTrainCategory;
            }
            set
            {
                _appliesToTrainCategory = value;
            }
        }
        
        [XmlElement(Order=1)]
        public Symbol hasSymbol
        {
            get
            {
                if ((_hasSymbol == null))
                {
                    _hasSymbol = new Symbol();
                }
                return _hasSymbol;
            }
            set
            {
                _hasSymbol = value;
            }
        }
        
        [XmlElement(Order=2)]
        public TextInformation hasTextInformation
        {
            get
            {
                if ((_hasTextInformation == null))
                {
                    _hasTextInformation = new TextInformation();
                }
                return _hasTextInformation;
            }
            set
            {
                _hasTextInformation = value;
            }
        }
        
        /// <summary>
        /// An entry in the national signal book or EULYNX regulation, describing the meaning, colour, shape, etc. that define the aspect.
        /// For instance: "Zs 3"
        /// </summary>
        [XmlAttribute]
        public string aspectId
        {
            get
            {
                return _aspectId;
            }
            set
            {
                _aspectId = value;
            }
        }
        
        /// <summary>
        /// The aspect has an <i>implicit </i>direction indication.
        /// E.g. a german driver can derive from Zs3 speed indication the direction of the route on grounds of local knowledge (e.g. high speed to Berlin, low speed to Leipzig). This helps the designer to decide whether an explicit direction indicator is needed.
        /// Not filled when the signal has explicit direction indication (NR case)
        /// </summary>
        [XmlAttribute]
        public bool indicatesRouteDirection
        {
            get
            {
                return _indicatesRouteDirection;
            }
            set
            {
                _indicatesRouteDirection = value;
            }
        }
    }
    
    /// <summary>
    /// A symbol that sends a message to the driver. E.g. a fixed letter, an arrow, a letter or a number that can be switched on.
    /// The symbol is normalised in the signalling rules and regulations. If the text is not or less regulated, use the class TextInformation.
    /// This is a display value and shouldn't be interpreted e.g. by simulation programs or speed profile designers.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("symbol", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class Symbol
    {
        #region Private fields
        private string _value;
        #endregion
        
        [XmlAttribute]
        public string value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
    }
    
    /// <summary>
    /// Text legend written on the signal frame.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("textInformation", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class TextInformation
    {
        #region Private fields
        private string _value;
        #endregion
        
        [XmlAttribute]
        public string value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
    }
    
    /// <summary>
    /// An aspect that can be controlled.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("activeAspect", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class ActiveAspect : Aspect
    {
        #region Private fields
        private Duration _hasTimedDeactivation;
        private AspectDeactivationTypes _isOfAspectDeactivationType;
        #endregion
        
        /// <summary>
        /// Describes a delay after which the aspect disappears.
        /// </summary>
        [XmlElement(Order=0)]
        public Duration hasTimedDeactivation
        {
            get
            {
                if ((_hasTimedDeactivation == null))
                {
                    _hasTimedDeactivation = new Duration();
                }
                return _hasTimedDeactivation;
            }
            set
            {
                _hasTimedDeactivation = value;
            }
        }
        
        [XmlElement(Order=1)]
        public AspectDeactivationTypes isOfAspectDeactivationType
        {
            get
            {
                return _isOfAspectDeactivationType;
            }
            set
            {
                _isOfAspectDeactivationType = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum AspectDeactivationTypes
    {
        /// <summary>
        /// The deactivation of this aspect is triggered by a technical condition (e.g. occupation of a section).
        /// The trigger is the same for all technically triggered aspects of the same signal.
        /// </summary>
        technicallyTriggered,
        /// <summary>
        /// The deactivation of this aspect is triggered by a timer.
        /// The trigger is the same for all technically triggered aspects of the same signal.
        /// </summary>
        timeTriggered,
        other,
    }
    
    /// <summary>
    /// The start-up configuration data that the MDM provides to the controller at boot time.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("startUpProcedureConfiguration", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class StartUpProcedureConfiguration : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref _configuresController;
        private Attachment _hasNonVitalDataFile;
        private Attachment _hasVitalDataFile;
        #endregion
        
        /// <summary>
        /// A (boot-)file that configures the controller during start-up
        /// </summary>
        [XmlElement(Order=0)]
        public tElementWithIDref configuresController
        {
            get
            {
                if ((_configuresController == null))
                {
                    _configuresController = new tElementWithIDref();
                }
                return _configuresController;
            }
            set
            {
                _configuresController = value;
            }
        }
        
        /// <summary>
        /// The TFTP file with non-safety-critical data.
        /// </summary>
        [XmlElement(Order=1)]
        public Attachment hasNonVitalDataFile
        {
            get
            {
                if ((_hasNonVitalDataFile == null))
                {
                    _hasNonVitalDataFile = new Attachment();
                }
                return _hasNonVitalDataFile;
            }
            set
            {
                _hasNonVitalDataFile = value;
            }
        }
        
        /// <summary>
        /// The TFTP file with safety-critical data.
        /// </summary>
        [XmlElement(Order=2)]
        public Attachment hasVitalDataFile
        {
            get
            {
                if ((_hasVitalDataFile == null))
                {
                    _hasVitalDataFile = new Attachment();
                }
                return _hasVitalDataFile;
            }
            set
            {
                _hasVitalDataFile = value;
            }
        }
    }
    
    /// <summary>
    /// The Subsystem - Maintenance and Data Management (MDM) runs the services required for the operation of the EULYNX System. Service functions may be provided also to the adjacent systems.
    /// </summary>
    [XmlIncludeAttribute(typeof(VirtualisedMDM))]
    [XmlIncludeAttribute(typeof(PhysicalMDM))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("maintenanceDataManagement", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class MaintenanceDataManagement : ConfiguredBaseObject
    {
        #region Private fields
        private StartUpProcedureConfiguration[] _hasStartUpConfiguration;
        private DiagnosticsCollector[] _hostsDiagnosticsCollector;
        #endregion
        
        [XmlElement("hasStartUpConfiguration", Order=0)]
        public StartUpProcedureConfiguration[] hasStartUpConfiguration
        {
            get
            {
                return _hasStartUpConfiguration;
            }
            set
            {
                _hasStartUpConfiguration = value;
            }
        }
        
        /// <summary>
        /// The MDM hosts a diagnostic collector service.
        /// </summary>
        [XmlElement("hostsDiagnosticsCollector", Order=1)]
        public DiagnosticsCollector[] hostsDiagnosticsCollector
        {
            get
            {
                return _hostsDiagnosticsCollector;
            }
            set
            {
                _hostsDiagnosticsCollector = value;
            }
        }
    }
    
    /// <summary>
    /// Service function that processes and channels diagnostics data.
    /// Can be a separate hardware component or virtualised software such as a OPC-UA server.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("diagnosticsCollector", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class DiagnosticsCollector : BaseObject1
    {
        #region Private fields
        private DiagnosticsOpcUaConfiguration _hasDiagnosticsConfiguration;
        private tElementWithIDref[] _servesDiagDataToCollector;
        #endregion
        
        [XmlElement(Order=0)]
        public DiagnosticsOpcUaConfiguration hasDiagnosticsConfiguration
        {
            get
            {
                if ((_hasDiagnosticsConfiguration == null))
                {
                    _hasDiagnosticsConfiguration = new DiagnosticsOpcUaConfiguration();
                }
                return _hasDiagnosticsConfiguration;
            }
            set
            {
                _hasDiagnosticsConfiguration = value;
            }
        }
        
        /// <summary>
        /// A lower level collector serves diagnostics data to a collector that aggregates data.
        /// </summary>
        [XmlElement("servesDiagDataToCollector", Order=1)]
        public tElementWithIDref[] servesDiagDataToCollector
        {
            get
            {
                return _servesDiagDataToCollector;
            }
            set
            {
                _servesDiagDataToCollector = value;
            }
        }
    }
    
    /// <summary>
    /// A virtualised MDM, e.g. running as a docker.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("virtualisedMDM", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class VirtualisedMDM : MaintenanceDataManagement
    {
    }
    
    /// <summary>
    /// A physical MDM device that hosts any number of diagnostics collectors.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("physicalMDM", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class PhysicalMDM : MaintenanceDataManagement
    {
        #region Private fields
        private tElementWithIDref _isHousedIn;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref isHousedIn
        {
            get
            {
                if ((_isHousedIn == null))
                {
                    _isHousedIn = new tElementWithIDref();
                }
                return _isHousedIn;
            }
            set
            {
                _isHousedIn = value;
            }
        }
    }
    
    /// <summary>
    /// The Movement Authority (MA) section has an entry location and optionally a timer start and/or stop location.
    /// ETCS variable D_SECTIONTIMERSTOPLOC is the distance between start and stop location.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("etcsMaSection", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class EtcsMaSection : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref _hasSectionEntryLocation;
        private tElementWithIDref _hasTimerStartLocation;
        private tElementWithIDref _hasTimerStopLocation;
        private int _t_sectiontimer;
        #endregion
        
        /// <summary>
        /// Entry to the MA section.
        /// </summary>
        [XmlElement(Order=0)]
        public tElementWithIDref hasSectionEntryLocation
        {
            get
            {
                if ((_hasSectionEntryLocation == null))
                {
                    _hasSectionEntryLocation = new tElementWithIDref();
                }
                return _hasSectionEntryLocation;
            }
            set
            {
                _hasSectionEntryLocation = value;
            }
        }
        
        /// <summary>
        /// The designer marks the spot location where the section timer starts counting down.
        /// </summary>
        [XmlElement(Order=1)]
        public tElementWithIDref hasTimerStartLocation
        {
            get
            {
                if ((_hasTimerStartLocation == null))
                {
                    _hasTimerStartLocation = new tElementWithIDref();
                }
                return _hasTimerStartLocation;
            }
            set
            {
                _hasTimerStartLocation = value;
            }
        }
        
        /// <summary>
        /// The spot location where the section timer is stopped (&#167;3.8.4.2.3)
        /// </summary>
        [XmlElement(Order=2)]
        public tElementWithIDref hasTimerStopLocation
        {
            get
            {
                if ((_hasTimerStopLocation == null))
                {
                    _hasTimerStopLocation = new tElementWithIDref();
                }
                return _hasTimerStopLocation;
            }
            set
            {
                _hasTimerStopLocation = value;
            }
        }
        
        /// <summary>
        /// maps to T_SECTIONTIMER.
        /// </summary>
        [XmlAttribute]
        public int t_sectiontimer
        {
            get
            {
                return _t_sectiontimer;
            }
            set
            {
                _t_sectiontimer = value;
            }
        }
    }
    
    /// <summary>
    /// The entry signal is associated either with
    /// <ul>
    /// <li>a light signal informing train staff to prepare for imminent departure (de-DE: Fahrtank&#252;nder - wei&#223;es Dreieck)</li>
    /// <li>a counter indicating the remaining time to planned departure (ProRail)</li>
    /// </ul>
    /// <ul>
    /// <li>a system that messages the train staff mobile device (de-DE: dann entf&#228;llt der physische Fahrtank&#252;nder).</li>
    /// </ul>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("dispatchAnnouncerAssignment", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class DispatchAnnouncerAssignment : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref[] _appliesToDispatchAnnouncer;
        private tElementWithIDref[] _appliesToEntrySignal;
        #endregion
        
        /// <summary>
        /// A special light signal that announces imminent clearing of the entry signal. If not provided, the announcement can be messaged to the train staff's mobile device.
        /// </summary>
        [XmlElement("appliesToDispatchAnnouncer", Order=0)]
        public tElementWithIDref[] appliesToDispatchAnnouncer
        {
            get
            {
                return _appliesToDispatchAnnouncer;
            }
            set
            {
                _appliesToDispatchAnnouncer = value;
            }
        }
        
        /// <summary>
        /// The signal(s) at the entry of routes that the train is due to use.
        /// </summary>
        [XmlElement("appliesToEntrySignal", Order=1)]
        public tElementWithIDref[] appliesToEntrySignal
        {
            get
            {
                return _appliesToEntrySignal;
            }
            set
            {
                _appliesToEntrySignal = value;
            }
        }
    }
    
    /// <summary>
    /// Assets may need grouping. Typically, a group will be used to hide the underlying members. For instance, a signalman may dim a group of signals.
    /// Given the wide variety of uses, this element is abstract and the end-user, i.e. the IM must specialise this element.
    /// Examples:
    /// <ul>
    /// <li>Points grouping for purposes of point heating</li>
    /// <li>Cascaded points</li>
    /// <li>Driver information. de-DE: Weichenbereich. nl-NL: wisselstraat. fr-FR: Reprise info</li>
    /// <li>Power supply</li>
    /// <li>Day-night signal intensity (de-DE: Nachtschaltung)</li>
    /// </ul>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("assetGroup", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public abstract partial class AssetGroup : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref[] _containsTrackAsset;
        #endregion
        
        [XmlElement("containsTrackAsset", Order=0)]
        public tElementWithIDref[] containsTrackAsset
        {
            get
            {
                return _containsTrackAsset;
            }
            set
            {
                _containsTrackAsset = value;
            }
        }
    }
    
    /// <summary>
    /// Flank protection prevents rolling stock from unintentionally entering the train's route body.
    /// Flank protection is given when selected elements, notably points, prove a given state.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("flankProtection", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class FlankProtection : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref[] _isProvidedByDerailerInPosition;
        private tElementWithIDref[] _isProvidedByPointElementInPosition;
        private tElementWithIDref[] _isProvidedBySignal;
        private tElementWithIDref[] _isRequestedByCrossingElementInPosition;
        private tElementWithIDref _isRequestedByLocalOperatingZoneLimit;
        private tElementWithIDref _isRequestedByLoz;
        private tElementWithIDref _isRequestedByPointElementInPosition;
        private tElementWithIDref _isRequestedByToeOfPointElement;
        private tElementWithIDref[] _requiresSectionVacant;
        #endregion
        
        /// <summary>
        /// Flank protection is provided by derailers in position engaged.
        /// Software should check that the data don't wrongfully state that flank protection is provided by non-engaged derailers.
        /// </summary>
        [XmlElement("isProvidedByDerailerInPosition", Order=0)]
        public tElementWithIDref[] isProvidedByDerailerInPosition
        {
            get
            {
                return _isProvidedByDerailerInPosition;
            }
            set
            {
                _isProvidedByDerailerInPosition = value;
            }
        }
        
        /// <summary>
        /// Flank protection is provided by points in a given position.
        /// This can include trap points.
        /// </summary>
        [XmlElement("isProvidedByPointElementInPosition", Order=1)]
        public tElementWithIDref[] isProvidedByPointElementInPosition
        {
            get
            {
                return _isProvidedByPointElementInPosition;
            }
            set
            {
                _isProvidedByPointElementInPosition = value;
            }
        }
        
        [XmlElement("isProvidedBySignal", Order=2)]
        public tElementWithIDref[] isProvidedBySignal
        {
            get
            {
                return _isProvidedBySignal;
            }
            set
            {
                _isProvidedBySignal = value;
            }
        }
        
        [XmlElement("isRequestedByCrossingElementInPosition", Order=3)]
        public tElementWithIDref[] isRequestedByCrossingElementInPosition
        {
            get
            {
                return _isRequestedByCrossingElementInPosition;
            }
            set
            {
                _isRequestedByCrossingElementInPosition = value;
            }
        }
        
        /// <summary>
        /// The limit of a local operating zone requests flank protection.
        /// </summary>
        [XmlElement(Order=4)]
        public tElementWithIDref isRequestedByLocalOperatingZoneLimit
        {
            get
            {
                if ((_isRequestedByLocalOperatingZoneLimit == null))
                {
                    _isRequestedByLocalOperatingZoneLimit = new tElementWithIDref();
                }
                return _isRequestedByLocalOperatingZoneLimit;
            }
            set
            {
                _isRequestedByLocalOperatingZoneLimit = value;
            }
        }
        
        /// <summary>
        /// Flank protection is requested by the given local operating zone.
        /// </summary>
        [XmlElement(Order=5)]
        public tElementWithIDref isRequestedByLoz
        {
            get
            {
                if ((_isRequestedByLoz == null))
                {
                    _isRequestedByLoz = new tElementWithIDref();
                }
                return _isRequestedByLoz;
            }
            set
            {
                _isRequestedByLoz = value;
            }
        }
        
        [XmlElement(Order=6)]
        public tElementWithIDref isRequestedByPointElementInPosition
        {
            get
            {
                if ((_isRequestedByPointElementInPosition == null))
                {
                    _isRequestedByPointElementInPosition = new tElementWithIDref();
                }
                return _isRequestedByPointElementInPosition;
            }
            set
            {
                _isRequestedByPointElementInPosition = value;
            }
        }
        
        /// <summary>
        /// Defines a flank protection case where the toe of a point is the requestor.
        /// DB: used when flank protection request is transmitted via the toe of a point.
        /// 
        /// de-DE: Anforderung von der Weichenspitze
        /// </summary>
        [XmlElement(Order=7)]
        public tElementWithIDref isRequestedByToeOfPointElement
        {
            get
            {
                if ((_isRequestedByToeOfPointElement == null))
                {
                    _isRequestedByToeOfPointElement = new tElementWithIDref();
                }
                return _isRequestedByToeOfPointElement;
            }
            set
            {
                _isRequestedByToeOfPointElement = value;
            }
        }
        
        [XmlElement("requiresSectionVacant", Order=8)]
        public tElementWithIDref[] requiresSectionVacant
        {
            get
            {
                return _requiresSectionVacant;
            }
            set
            {
                _requiresSectionVacant = value;
            }
        }
    }
    
    /// <summary>
    /// Indicates that a signal from a terminal track can be cleared even when the section in advance of that signal is occupied.
    /// de-DE: Besetzte Ausfahrt
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("standOutControl", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class StandOutControl : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref _appliesToSignal;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref appliesToSignal
        {
            get
            {
                if ((_appliesToSignal == null))
                {
                    _appliesToSignal = new tElementWithIDref();
                }
                return _appliesToSignal;
            }
            set
            {
                _appliesToSignal = value;
            }
        }
    }
    
    /// <summary>
    /// Properties of a TPS device.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("tpsDeviceProperties", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class TpsDeviceProperties : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref _appliesToTpsDevice;
        private Length _hasLength;
        private TpsPowerSupplyTypes _hasPowerSupplyType;
        #endregion
        
        /// <summary>
        /// the properties apply to this TPS device
        /// </summary>
        [XmlElement(Order=0)]
        public tElementWithIDref appliesToTpsDevice
        {
            get
            {
                if ((_appliesToTpsDevice == null))
                {
                    _appliesToTpsDevice = new tElementWithIDref();
                }
                return _appliesToTpsDevice;
            }
            set
            {
                _appliesToTpsDevice = value;
            }
        }
        
        /// <summary>
        /// e.g. length of infill loop.
        /// Balises, magnets, crocodiles or TPWS loops are considered point devices without a length.
        /// </summary>
        [XmlElement(Order=1)]
        public Length hasLength
        {
            get
            {
                if ((_hasLength == null))
                {
                    _hasLength = new Length();
                }
                return _hasLength;
            }
            set
            {
                _hasLength = value;
            }
        }
        
        /// <summary>
        /// allows defining the power source of TPS device, <i>even</i> <i>not-controlled ones. </i>
        /// </summary>
        [XmlElement(Order=2)]
        public TpsPowerSupplyTypes hasPowerSupplyType
        {
            get
            {
                return _hasPowerSupplyType;
            }
            set
            {
                _hasPowerSupplyType = value;
            }
        }
    }
    
    /// <summary>
    /// Set of general attributes for the block line, viewed from a station.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("lineBlockInformation", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class LineBlockInformation : ConfiguredBaseObject
    {
        #region Private fields
        private Length _isDesignedForBrakingDistance;
        private Speed _isDesignedForSpeed;
        private tElementWithIDref _leadsToNextMainOperationalLocality;
        private tElementWithIDref _leadsToNextOperationalLocality;
        #endregion
        
        /// <summary>
        /// The block line is designed for the given braking distance.
        /// Only used by DB for validation purposes.
        /// de-DE: Bremsweg als Grundlage f&#252;r die Dimensionierung der zugeh&#246;rigen Strecke.
        /// SNCF documents show the signals and the distances between signals, ergo no need for braking distance parameter.
        /// </summary>
        [XmlElement(Order=0)]
        public Length isDesignedForBrakingDistance
        {
            get
            {
                if ((_isDesignedForBrakingDistance == null))
                {
                    _isDesignedForBrakingDistance = new Length();
                }
                return _isDesignedForBrakingDistance;
            }
            set
            {
                _isDesignedForBrakingDistance = value;
            }
        }
        
        /// <summary>
        /// The speed for which the line is designed.
        /// Only used by DB for validation purposes.
        /// </summary>
        [XmlElement(Order=1)]
        public Speed isDesignedForSpeed
        {
            get
            {
                if ((_isDesignedForSpeed == null))
                {
                    _isDesignedForSpeed = new Speed();
                }
                return _isDesignedForSpeed;
            }
            set
            {
                _isDesignedForSpeed = value;
            }
        }
        
        /// <summary>
        /// Indicates the next (major) junction that can be reached when travelling down the block line.
        /// </summary>
        [XmlElement(Order=2)]
        public tElementWithIDref leadsToNextMainOperationalLocality
        {
            get
            {
                if ((_leadsToNextMainOperationalLocality == null))
                {
                    _leadsToNextMainOperationalLocality = new tElementWithIDref();
                }
                return _leadsToNextMainOperationalLocality;
            }
            set
            {
                _leadsToNextMainOperationalLocality = value;
            }
        }
        
        /// <summary>
        /// Indicates the next operational locality that is reached when travelling <i>from </i>the block element down the block line.
        /// </summary>
        [XmlElement(Order=3)]
        public tElementWithIDref leadsToNextOperationalLocality
        {
            get
            {
                if ((_leadsToNextOperationalLocality == null))
                {
                    _leadsToNextOperationalLocality = new tElementWithIDref();
                }
                return _leadsToNextOperationalLocality;
            }
            set
            {
                _leadsToNextOperationalLocality = value;
            }
        }
    }
    
    /// <summary>
    /// The overlap can only be activated when the block accepts the direction in which the route and thus the overlap are set.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("directionAuthorityDependentOverlap", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class DirectionAuthorityDependentOverlap : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref _appliesToOverlap;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref appliesToOverlap
        {
            get
            {
                if ((_appliesToOverlap == null))
                {
                    _appliesToOverlap = new tElementWithIDref();
                }
                return _appliesToOverlap;
            }
            set
            {
                _appliesToOverlap = value;
            }
        }
    }
    
    /// <summary>
    /// Hardware module for controlling Eurobalises.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("leuModule", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class LeuModule : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref[] _getsInputFromLeuModule;
        private tElementWithIDref[] _getsInputFromLeuSystem;
        private tElementWithIDref[] _getsInputFromTrackAsset;
        private tElementWithIDref[] _hasLeuPort;
        private LeuModuleClassificationTypes _isClassifiedAs;
        private tElementWithIDref _isHousedInLeuCabinet;
        private tElementWithIDref _isPartOfLeuSystem;
        #endregion
        
        /// <summary>
        /// An LEU can get input from another LEU module.
        /// </summary>
        [XmlElement("getsInputFromLeuModule", Order=0)]
        public tElementWithIDref[] getsInputFromLeuModule
        {
            get
            {
                return _getsInputFromLeuModule;
            }
            set
            {
                _getsInputFromLeuModule = value;
            }
        }
        
        /// <summary>
        /// The LEU module gets input from a LEU system, <i>other than </i>the LEU system of which it is part.
        /// </summary>
        [XmlElement("getsInputFromLeuSystem", Order=1)]
        public tElementWithIDref[] getsInputFromLeuSystem
        {
            get
            {
                return _getsInputFromLeuSystem;
            }
            set
            {
                _getsInputFromLeuSystem = value;
            }
        }
        
        /// <summary>
        /// The LEU module gets input from a track asset, one <i>or more </i>of
        /// <ul>
        /// <li>signal</li>
        /// <li>turnout</li>
        /// <li>TPS device</li>
        /// <li>controller</li>
        /// <li>level crossing system</li>
        /// </ul>
        /// </summary>
        [XmlElement("getsInputFromTrackAsset", Order=2)]
        public tElementWithIDref[] getsInputFromTrackAsset
        {
            get
            {
                return _getsInputFromTrackAsset;
            }
            set
            {
                _getsInputFromTrackAsset = value;
            }
        }
        
        [XmlElement("hasLeuPort", Order=3)]
        public tElementWithIDref[] hasLeuPort
        {
            get
            {
                return _hasLeuPort;
            }
            set
            {
                _hasLeuPort = value;
            }
        }
        
        /// <summary>
        /// The LEU has a functional classification.
        /// </summary>
        [XmlElement(Order=4)]
        public LeuModuleClassificationTypes isClassifiedAs
        {
            get
            {
                return _isClassifiedAs;
            }
            set
            {
                _isClassifiedAs = value;
            }
        }
        
        /// <summary>
        /// The LEU module is housed in a cabinet
        /// </summary>
        [XmlElement(Order=5)]
        public tElementWithIDref isHousedInLeuCabinet
        {
            get
            {
                if ((_isHousedInLeuCabinet == null))
                {
                    _isHousedInLeuCabinet = new tElementWithIDref();
                }
                return _isHousedInLeuCabinet;
            }
            set
            {
                _isHousedInLeuCabinet = value;
            }
        }
        
        /// <summary>
        /// The LEU module plugs into a LEU system.
        /// </summary>
        [XmlElement(Order=6)]
        public tElementWithIDref isPartOfLeuSystem
        {
            get
            {
                if ((_isPartOfLeuSystem == null))
                {
                    _isPartOfLeuSystem = new tElementWithIDref();
                }
                return _isPartOfLeuSystem;
            }
            set
            {
                _isPartOfLeuSystem = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum LeuModuleClassificationTypes
    {
        /// <summary>
        /// Parallel use with legacy systems like PZB. The LEU converts contacts into balise telegrams.
        /// </summary>
        parallel,
        /// <summary>
        /// Full standard LEU functionality.
        /// de-DE: voll
        /// </summary>
        standard,
    }
    
    /// <summary>
    /// Relates a set of telegrams that is sent when a given set of conditions applies.
    /// Used for switchable balises.
    /// 
    /// The SRS versions allows selecting telegrams of a given version.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("etcsTelegramConditionRelation", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class EtcsTelegramConditionRelation : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref[] _appliesToEtcsTelegram;
        private EtcsCondition[] _sentConditionally;
        private string _srsSubversion;
        private string _srsVersion;
        #endregion
        
        [XmlElement("appliesToEtcsTelegram", Order=0)]
        public tElementWithIDref[] appliesToEtcsTelegram
        {
            get
            {
                return _appliesToEtcsTelegram;
            }
            set
            {
                _appliesToEtcsTelegram = value;
            }
        }
        
        /// <summary>
        /// Stipulates a condition under which an ETCS telegram is set.
        /// </summary>
        [XmlElement("sentConditionally", Order=1)]
        public EtcsCondition[] sentConditionally
        {
            get
            {
                return _sentConditionally;
            }
            set
            {
                _sentConditionally = value;
            }
        }
        
        /// <summary>
        /// The subversion of subset-026-7
        /// E.g. Maintenance Release 1
        /// </summary>
        [XmlAttribute]
        public string srsSubversion
        {
            get
            {
                return _srsSubversion;
            }
            set
            {
                _srsSubversion = value;
            }
        }
        
        /// <summary>
        /// The version of Subset-026-7
        /// </summary>
        [XmlAttribute]
        public string srsVersion
        {
            get
            {
                return _srsVersion;
            }
            set
            {
                _srsVersion = value;
            }
        }
    }
    
    /// <summary>
    /// Condition under which an ETCS telegram is sent.
    /// </summary>
    [XmlIncludeAttribute(typeof(SpecialCondition))]
    [XmlIncludeAttribute(typeof(WorkZoneCondition))]
    [XmlIncludeAttribute(typeof(SignalAspectCondition))]
    [XmlIncludeAttribute(typeof(PointCondition))]
    [XmlIncludeAttribute(typeof(TpsCondition))]
    [XmlIncludeAttribute(typeof(OtherCondition))]
    [XmlIncludeAttribute(typeof(TempShuntingCondition))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("etcsCondition", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public abstract partial class EtcsCondition
    {
    }
    
    /// <summary>
    /// Allows defining a set of special conditions for sending an ETCS telegram.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("specialCondition", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class SpecialCondition : EtcsCondition
    {
        #region Private fields
        private SpecialConditionTypes _hasSpecialConditions;
        #endregion
        
        [XmlElement(Order=0)]
        public SpecialConditionTypes hasSpecialConditions
        {
            get
            {
                return _hasSpecialConditions;
            }
            set
            {
                _hasSpecialConditions = value;
            }
        }
    }
    
    /// <summary>
    /// A set of special conditions that trigger the sending of an ETCS telegram.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum SpecialConditionTypes
    {
        /// <summary>
        /// Default telegram is sent when the switchable balise is disconnected.
        /// </summary>
        @default,
        /// <summary>
        /// For fixed data balises.
        /// de-DE: Festdatenbalise
        /// </summary>
        @fixed,
        /// <summary>
        /// Failure telegram sent by the LEU.
        /// </summary>
        failure,
        other,
    }
    
    /// <summary>
    /// The ETCS telegram is sent when the workzone is taken by local staff.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("workZoneCondition", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class WorkZoneCondition : EtcsCondition
    {
        #region Private fields
        private tElementWithIDref _activeWhenWorkZoneTaken;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref activeWhenWorkZoneTaken
        {
            get
            {
                if ((_activeWhenWorkZoneTaken == null))
                {
                    _activeWhenWorkZoneTaken = new tElementWithIDref();
                }
                return _activeWhenWorkZoneTaken;
            }
            set
            {
                _activeWhenWorkZoneTaken = value;
            }
        }
    }
    
    /// <summary>
    /// The ETCS telegram is sent when a signal sends a given message, or shows a given aspect.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("signalAspectCondition", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class SignalAspectCondition : EtcsCondition
    {
        #region Private fields
        private tElementWithIDref _activeWhenShowingAspect;
        private tElementWithIDref _activeWhenShowingMessage;
        private SignalFallbackTypes _withExtraSignalCondition;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref activeWhenShowingAspect
        {
            get
            {
                if ((_activeWhenShowingAspect == null))
                {
                    _activeWhenShowingAspect = new tElementWithIDref();
                }
                return _activeWhenShowingAspect;
            }
            set
            {
                _activeWhenShowingAspect = value;
            }
        }
        
        [XmlElement(Order=1)]
        public tElementWithIDref activeWhenShowingMessage
        {
            get
            {
                if ((_activeWhenShowingMessage == null))
                {
                    _activeWhenShowingMessage = new tElementWithIDref();
                }
                return _activeWhenShowingMessage;
            }
            set
            {
                _activeWhenShowingMessage = value;
            }
        }
        
        [XmlElement(Order=2)]
        public SignalFallbackTypes withExtraSignalCondition
        {
            get
            {
                return _withExtraSignalCondition;
            }
            set
            {
                _withExtraSignalCondition = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum SignalFallbackTypes
    {
        /// <summary>
        /// The signal aspect is a fall-back aspect.
        /// de-DE: Rueckfall
        /// </summary>
        fallback,
        /// <summary>
        /// The aspect is only shown as fall-back, i.e. not in normal operation.
        /// </summary>
        fallbackOnly,
        other,
    }
    
    /// <summary>
    /// The ETCS telegram is sent when the point is in a given position.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("pointCondition", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class PointCondition : EtcsCondition
    {
        #region Private fields
        private tElementWithIDref _activeWhenPointElementInPosition;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref activeWhenPointElementInPosition
        {
            get
            {
                if ((_activeWhenPointElementInPosition == null))
                {
                    _activeWhenPointElementInPosition = new tElementWithIDref();
                }
                return _activeWhenPointElementInPosition;
            }
            set
            {
                _activeWhenPointElementInPosition = value;
            }
        }
    }
    
    /// <summary>
    /// The TPS condition is active when the given TPS device <i>or </i>TPS data transmission system is in the state indicated by the attribute <i>TpsActive.</i>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("tpsCondition", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class TpsCondition : EtcsCondition
    {
        #region Private fields
        private tElementWithIDref _refersToTpsDevice;
        private tElementWithIDref _refersToTpsTransmissionSystem;
        private bool _tpsActive;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref refersToTpsDevice
        {
            get
            {
                if ((_refersToTpsDevice == null))
                {
                    _refersToTpsDevice = new tElementWithIDref();
                }
                return _refersToTpsDevice;
            }
            set
            {
                _refersToTpsDevice = value;
            }
        }
        
        [XmlElement(Order=1)]
        public tElementWithIDref refersToTpsTransmissionSystem
        {
            get
            {
                if ((_refersToTpsTransmissionSystem == null))
                {
                    _refersToTpsTransmissionSystem = new tElementWithIDref();
                }
                return _refersToTpsTransmissionSystem;
            }
            set
            {
                _refersToTpsTransmissionSystem = value;
            }
        }
        
        /// <summary>
        /// True: send the telegram when TPS device or system is active.
        /// False: send the telegram when TPS device or system is not active.
        /// </summary>
        [XmlAttribute]
        public bool TpsActive
        {
            get
            {
                return _tpsActive;
            }
            set
            {
                _tpsActive = value;
            }
        }
    }
    
    /// <summary>
    /// The ETCS telegram is sent when the given track asset is in the given state.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("otherCondition", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class OtherCondition : EtcsCondition
    {
        #region Private fields
        private tElementWithIDref _activeWhenAssetInState;
        private string _assetDescription;
        private string _conditionDescription;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref activeWhenAssetInState
        {
            get
            {
                if ((_activeWhenAssetInState == null))
                {
                    _activeWhenAssetInState = new tElementWithIDref();
                }
                return _activeWhenAssetInState;
            }
            set
            {
                _activeWhenAssetInState = value;
            }
        }
        
        /// <summary>
        /// describes the asset that must be in the given state for the condition to be active.
        /// </summary>
        [XmlAttribute]
        public string assetDescription
        {
            get
            {
                return _assetDescription;
            }
            set
            {
                _assetDescription = value;
            }
        }
        
        /// <summary>
        /// describes the state of the given asset for the condition to be active.
        /// </summary>
        [XmlAttribute]
        public string conditionDescription
        {
            get
            {
                return _conditionDescription;
            }
            set
            {
                _conditionDescription = value;
            }
        }
    }
    
    /// <summary>
    /// The ETCS telegram is sent when the temporary shunting zone is taken by local staff.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("tempShuntingCondition", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class TempShuntingCondition : EtcsCondition
    {
        #region Private fields
        private tElementWithIDref _activeWhenTempShuntingAreaTaken;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref activeWhenTempShuntingAreaTaken
        {
            get
            {
                if ((_activeWhenTempShuntingAreaTaken == null))
                {
                    _activeWhenTempShuntingAreaTaken = new tElementWithIDref();
                }
                return _activeWhenTempShuntingAreaTaken;
            }
            set
            {
                _activeWhenTempShuntingAreaTaken = value;
            }
        }
    }
    
    /// <summary>
    /// Associates a button, switch or pull cord with a given function allowing local staff to interact with a local operating zone.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("localOperatingAreaUiElement", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class LocalOperatingAreaUiElement : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref _affectsLocalOperatingZone;
        private tElementWithIDref _appliesToLocalOperationUiElement;
        private UiElementFunctionTypes _hasFunctionType;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref affectsLocalOperatingZone
        {
            get
            {
                if ((_affectsLocalOperatingZone == null))
                {
                    _affectsLocalOperatingZone = new tElementWithIDref();
                }
                return _affectsLocalOperatingZone;
            }
            set
            {
                _affectsLocalOperatingZone = value;
            }
        }
        
        [XmlElement(Order=1)]
        public tElementWithIDref appliesToLocalOperationUiElement
        {
            get
            {
                if ((_appliesToLocalOperationUiElement == null))
                {
                    _appliesToLocalOperationUiElement = new tElementWithIDref();
                }
                return _appliesToLocalOperationUiElement;
            }
            set
            {
                _appliesToLocalOperationUiElement = value;
            }
        }
        
        /// <summary>
        /// The button has a function given by this enumeration.
        /// </summary>
        [XmlElement(Order=2)]
        public UiElementFunctionTypes hasFunctionType
        {
            get
            {
                return _hasFunctionType;
            }
            set
            {
                _hasFunctionType = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum UiElementFunctionTypes
    {
        /// <summary>
        /// Request local control. When the signalman grants local control and safety conditions are met, the interlocking hands over local control of the local operating zone.
        /// </summary>
        request,
        /// <summary>
        /// Hand back local control to interlocking.
        /// Once pressed, the signalman and interlocking can take back control of the local area.
        /// de-DE: Fertigmeldetaste.
        /// </summary>
        finished,
        /// <summary>
        /// Request local control over (group of) point(s).
        /// Another button or switch is foreseen for throwing the point(s).
        /// de-DE: Weichengruppentaste, notwendig um Weiche um zu stellen innerhalb NB welche sonnst von Stw bedient wird.
        /// </summary>
        localPointOperation,
    }
    
    /// <summary>
    /// Description of the area where the signal is located, to help maintenance workers to find the signal in the field.
    /// Can be an informal description (e.g. near junction x) or depend on national regulations (e.g. DE Bezeichnung nach Ril 100).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("signalLocation", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class SignalLocation : ConfiguredBaseObject
    {
        #region Private fields
        private string _description;
        #endregion
        
        /// <summary>
        /// Textual description of the location. Not to be confounded with geo-localisation.
        /// </summary>
        [XmlAttribute]
        public string description
        {
            get
            {
                return _description;
            }
            set
            {
                _description = value;
            }
        }
    }
    
    /// <summary>
    /// Device where one set of <i>n</i> cables/wires terminates and connects to another set of <i>m</i> cables/wires.
    /// Number <i>n</i> is not necessarily equal to <i>m</i>.
    /// </summary>
    [XmlIncludeAttribute(typeof(CableDistributorDisconnector))]
    [XmlIncludeAttribute(typeof(CableTerminationRack))]
    [XmlIncludeAttribute(typeof(CableJointRack))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("cableJointInstallation", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class CableJointInstallation : ConfiguredBaseObject
    {
        #region Private fields
        private CableJointRelation[] _containsCableJoint;
        private tElementWithIDref _isHousedIn;
        #endregion
        
        [XmlElement("containsCableJoint", Order=0)]
        public CableJointRelation[] containsCableJoint
        {
            get
            {
                return _containsCableJoint;
            }
            set
            {
                _containsCableJoint = value;
            }
        }
        
        /// <summary>
        /// The housing of the cable joint installation tends to dictate which class to use. The function is always the same, i.e. joining, terminating cables and wires.
        /// A cable termination rack is housed in the IL room or in a cabinet in the IL room.
        /// </summary>
        [XmlElement(Order=1)]
        public tElementWithIDref isHousedIn
        {
            get
            {
                if ((_isHousedIn == null))
                {
                    _isHousedIn = new tElementWithIDref();
                }
                return _isHousedIn;
            }
            set
            {
                _isHousedIn = value;
            }
        }
    }
    
    /// <summary>
    /// Individual relation between two cables. Describes a logical tie between cable A and B.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("cableJointRelation", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class CableJointRelation
    {
        #region Private fields
        private tElementWithIDref _joinsCableA;
        private tElementWithIDref _joinsCableB;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref joinsCableA
        {
            get
            {
                if ((_joinsCableA == null))
                {
                    _joinsCableA = new tElementWithIDref();
                }
                return _joinsCableA;
            }
            set
            {
                _joinsCableA = value;
            }
        }
        
        [XmlElement(Order=1)]
        public tElementWithIDref joinsCableB
        {
            get
            {
                if ((_joinsCableB == null))
                {
                    _joinsCableB = new tElementWithIDref();
                }
                return _joinsCableB;
            }
            set
            {
                _joinsCableB = value;
            }
        }
    }
    
    /// <summary>
    /// Cable distributor is a device where one set of cables terminates and (mostly) connect to another greater set of cables that lead to other terminators.
    /// Typically <u>housed </u>in a track side cable disconnection box (lineside "mushroom" disconnection box).
    /// Often contains a disconnector.
    /// <ul>
    /// <li>en-UK: Cable disconnector</li>
    /// <li>it-IT: sezionamento cavi</li>
    /// <li>nl-NL: aansluitkastje, wisselaansluitkast</li>
    /// <li>de-DE: Kabelverteiler</li>
    /// <li>fr-FR: r&#233;partiteur de cables</li>
    /// <li>se-SE: kopplingsplint</li>
    /// </ul>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("cableDistributorDisconnector", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class CableDistributorDisconnector : CableJointInstallation
    {
    }
    
    /// <summary>
    /// A rack in the relay room/signal box where field cables arrive and cores are dispatched to the interlocking or other systems.
    /// de-DE: Kabelabschlussgestell im Stw Gebaeude
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("cableTerminationRack", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class CableTerminationRack : CableJointInstallation
    {
    }
    
    /// <summary>
    /// A rack in the field where cables arrive and cores are dispatched to endpoints.
    /// DE: Kabelverbindungsgestell, streckenseitiger Kabelverteiler, d.h. nicht im Stw-Gebaeude.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("cableJointRack", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class CableJointRack : CableJointInstallation
    {
    }
    
    /// <summary>
    /// E.g. Lamp, light spot, or indicator that is part of a signal frame.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("signalFrameComponent", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class SignalFrameComponent : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref[] _hasAspect;
        #endregion
        
        [XmlElement("hasAspect", Order=0)]
        public tElementWithIDref[] hasAspect
        {
            get
            {
                return _hasAspect;
            }
            set
            {
                _hasAspect = value;
            }
        }
    }
    
    /// <summary>
    /// Provides signal aspect degradation information that is associated with a given light signal.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("signalAspectDegradation", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class SignalAspectDegradation : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref _appliesToActiveAspectSet;
        private tElementWithIDref _appliesToLightSignal;
        private tElementWithIDref _degradesToActiveAspectSet;
        private bool _isMostRestrictive;
        #endregion
        
        /// <summary>
        /// Applies to this set of active aspects.
        /// </summary>
        [XmlElement(Order=0)]
        public tElementWithIDref appliesToActiveAspectSet
        {
            get
            {
                if ((_appliesToActiveAspectSet == null))
                {
                    _appliesToActiveAspectSet = new tElementWithIDref();
                }
                return _appliesToActiveAspectSet;
            }
            set
            {
                _appliesToActiveAspectSet = value;
            }
        }
        
        [XmlElement(Order=1)]
        public tElementWithIDref appliesToLightSignal
        {
            get
            {
                if ((_appliesToLightSignal == null))
                {
                    _appliesToLightSignal = new tElementWithIDref();
                }
                return _appliesToLightSignal;
            }
            set
            {
                _appliesToLightSignal = value;
            }
        }
        
        /// <summary>
        /// The active aspect set shown when the commanded set of active aspects can't be shown.
        /// </summary>
        [XmlElement(Order=2)]
        public tElementWithIDref degradesToActiveAspectSet
        {
            get
            {
                if ((_degradesToActiveAspectSet == null))
                {
                    _degradesToActiveAspectSet = new tElementWithIDref();
                }
                return _degradesToActiveAspectSet;
            }
            set
            {
                _degradesToActiveAspectSet = value;
            }
        }
        
        /// <summary>
        /// True: the active aspect set is the most restrictive that the signal shows:
        /// <ul>
        /// <li>when not controlled by the interlocking, e.g. in case of failed communication between interlocking and signal controller.</li>
        /// <li>during system start.</li>
        /// </ul>
        /// False: degrade to the given set of active aspects.
        /// </summary>
        [XmlAttribute]
        public bool isMostRestrictive
        {
            get
            {
                return _isMostRestrictive;
            }
            set
            {
                _isMostRestrictive = value;
            }
        }
    }
    
    /// <summary>
    /// A signal-message relation is composed of two pairs master(signal,message) and dependent(signal,message).
    /// The message of the master signal dictates the message of the dependent signal.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("signalMessageRelation", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class SignalMessageRelation : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref[] _appliesToRoute;
        private Speed _entrySpeed;
        private Speed _exitSpeed;
        private tElementWithIDref _hasDependentMessage;
        private Duration _hasEndSectionTimer;
        private tElementWithIDref _hasMasterMessage;
        private tElementWithIDref _representsSpeedProfile;
        #endregion
        
        /// <summary>
        /// The route body to which the signal-message relation applies.
        /// The route body from dependent signal to master signal may contain points.
        /// </summary>
        [XmlElement("appliesToRoute", Order=0)]
        public tElementWithIDref[] appliesToRoute
        {
            get
            {
                return _appliesToRoute;
            }
            set
            {
                _appliesToRoute = value;
            }
        }
        
        /// <summary>
        /// The speed signalled by the entry signal, aka slave signal. I.e. the speed that the train must respect when passing the entry signal. Also known as passing speed.
        /// This signalled speed can be supervised by an ATP system.
        /// </summary>
        [XmlElement(Order=1)]
        public Speed entrySpeed
        {
            get
            {
                if ((_entrySpeed == null))
                {
                    _entrySpeed = new Speed();
                }
                return _entrySpeed;
            }
            set
            {
                _entrySpeed = value;
            }
        }
        
        /// <summary>
        /// Signalled maximum speed at exit signal (aka target or master signal)
        /// </summary>
        [XmlElement(Order=2)]
        public Speed exitSpeed
        {
            get
            {
                if ((_exitSpeed == null))
                {
                    _exitSpeed = new Speed();
                }
                return _exitSpeed;
            }
            set
            {
                _exitSpeed = value;
            }
        }
        
        /// <summary>
        /// The aspects of the dependent signal follow the master.
        /// For instance: when the master indicates  "At Danger" the dependent signal indicates "Caution".
        /// </summary>
        [XmlElement(Order=3)]
        public tElementWithIDref hasDependentMessage
        {
            get
            {
                if ((_hasDependentMessage == null))
                {
                    _hasDependentMessage = new tElementWithIDref();
                }
                return _hasDependentMessage;
            }
            set
            {
                _hasDependentMessage = value;
            }
        }
        
        /// <summary>
        /// The end-section of a route is the section between the closed route exit signal and the previous worker signal.
        /// The interlocking revokes (part of) the route when this timer expires.
        /// </summary>
        [XmlElement(Order=4)]
        public Duration hasEndSectionTimer
        {
            get
            {
                if ((_hasEndSectionTimer == null))
                {
                    _hasEndSectionTimer = new Duration();
                }
                return _hasEndSectionTimer;
            }
            set
            {
                _hasEndSectionTimer = value;
            }
        }
        
        /// <summary>
        /// The master signal dictates the message that a dependent signal can show.
        /// </summary>
        [XmlElement(Order=5)]
        public tElementWithIDref hasMasterMessage
        {
            get
            {
                if ((_hasMasterMessage == null))
                {
                    _hasMasterMessage = new tElementWithIDref();
                }
                return _hasMasterMessage;
            }
            set
            {
                _hasMasterMessage = value;
            }
        }
        
        /// <summary>
        /// In speed signalling systems, the aspect relation between signals represents a speed profile that the train must respect. Note that the speed profile is attached to a master and worker signal.
        /// </summary>
        [XmlElement(Order=6)]
        public tElementWithIDref representsSpeedProfile
        {
            get
            {
                if ((_representsSpeedProfile == null))
                {
                    _representsSpeedProfile = new tElementWithIDref();
                }
                return _representsSpeedProfile;
            }
            set
            {
                _representsSpeedProfile = value;
            }
        }
    }
    
    /// <summary>
    /// Generalization of fixings and housings, defined as civil structures that can support (or house) signalling equipment.
    /// </summary>
    [XmlIncludeAttribute(typeof(Housing))]
    [XmlIncludeAttribute(typeof(Panel))]
    [XmlIncludeAttribute(typeof(Cabinet))]
    [XmlIncludeAttribute(typeof(LeuCabinet))]
    [XmlIncludeAttribute(typeof(CabinetGroup))]
    [XmlIncludeAttribute(typeof(EquipmentRoom))]
    [XmlIncludeAttribute(typeof(ControlRoom))]
    [XmlIncludeAttribute(typeof(Container))]
    [XmlIncludeAttribute(typeof(Building))]
    [XmlIncludeAttribute(typeof(EquipmentHouse))]
    [XmlIncludeAttribute(typeof(Fixing))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("equipmentSupport", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class EquipmentSupport : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref[] _isCivilStructure;
        private tElementWithIDref[] _isLocatedAt;
        private tElementWithIDref[] _supports;
        #endregion
        
        /// <summary>
        /// Reference to a civil structure defined in a different register of preexisting civil assets. E.g. a database of bridges, gantries, posts etc.
        /// </summary>
        [XmlElement("isCivilStructure", Order=0)]
        public tElementWithIDref[] isCivilStructure
        {
            get
            {
                return _isCivilStructure;
            }
            set
            {
                _isCivilStructure = value;
            }
        }
        
        /// <summary>
        /// Complex equipment supports may have multiple spot locations, e.g. a gantry with two foundations on each side of the track. The gantry can also support multiple signals, each with its own spot location.
        /// </summary>
        [XmlElement("isLocatedAt", Order=1)]
        public tElementWithIDref[] isLocatedAt
        {
            get
            {
                return _isLocatedAt;
            }
            set
            {
                _isLocatedAt = value;
            }
        }
        
        /// <summary>
        /// Recursive relation expressing the fact that one type of equipment support can support/carry/house another type of equipment support. For instance: "a foundation supports a control room that houses a cabinet".
        /// </summary>
        [XmlElement("supports", Order=2)]
        public tElementWithIDref[] supports
        {
            get
            {
                return _supports;
            }
            set
            {
                _supports = value;
            }
        }
    }
    
    /// <summary>
    /// Describes the housing, ranging from a control centre building to a keybox mounted on a trackside post.
    /// Can be used if the type of housing is (yet) unknown, e.g. during an early design phase. Can also be used if the type of housing does not fit any of the available subtypes.
    /// de-DE: Unterbringung
    /// fr-FR: logement
    /// nl-NL: behuizing
    /// </summary>
    [XmlIncludeAttribute(typeof(Panel))]
    [XmlIncludeAttribute(typeof(Cabinet))]
    [XmlIncludeAttribute(typeof(LeuCabinet))]
    [XmlIncludeAttribute(typeof(CabinetGroup))]
    [XmlIncludeAttribute(typeof(EquipmentRoom))]
    [XmlIncludeAttribute(typeof(ControlRoom))]
    [XmlIncludeAttribute(typeof(Container))]
    [XmlIncludeAttribute(typeof(Building))]
    [XmlIncludeAttribute(typeof(EquipmentHouse))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("housing", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class Housing : EquipmentSupport
    {
        #region Private fields
        private FixingTypes[] _isSupportedByFixingType;
        private string _positionDescription;
        #endregion
        
        [XmlElement("isSupportedByFixingType", Order=0)]
        public FixingTypes[] isSupportedByFixingType
        {
            get
            {
                return _isSupportedByFixingType;
            }
            set
            {
                _isSupportedByFixingType = value;
            }
        }
        
        /// <summary>
        /// Textual description of the position of the housing. Used when the spot location is unknown, irrelevant, or too far away from the track side, e.g. when the housing is situated outside the project area.
        /// </summary>
        [XmlAttribute]
        public string positionDescription
        {
            get
            {
                return _positionDescription;
            }
            set
            {
                _positionDescription = value;
            }
        }
    }
    
    /// <summary>
    /// A panel to which switching equipment such as key release instruments or other control equipment can be affixed.
    /// May be mounted indoors. When outdoors, it is typically fixed to a post and covered by a simple roof.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("panel", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class Panel : Housing
    {
    }
    
    /// <summary>
    /// A casing for active electronic components and wiring. Size can vary from cupboard to shoebox size.
    /// Indoor cabinets are typically housed within a container or a building. Outdoor cabinets are mounted on a post or on the ground.
    /// As opposed to an equipment room, a person cannot enter into a cabinet.
    /// en-UK: (location) cabinet or case
    /// fr-FR: armoire &#233;lectrique
    /// nl-NL: schakelkast
    /// de-DE: Schaltkasten/-schrank
    /// </summary>
    [XmlIncludeAttribute(typeof(LeuCabinet))]
    [XmlIncludeAttribute(typeof(CabinetGroup))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("cabinet", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class Cabinet : Housing
    {
        #region Private fields
        private OperatorPosition _hasOperatorPosition;
        private string _type;
        #endregion
        
        /// <summary>
        /// used by RFI and NR.
        /// Position where you can access to the LocationCase (where you can work on it); position is given with the look from the track to the Location Case (near, far, left, right)
        /// </summary>
        [XmlElement(Order=0)]
        public OperatorPosition hasOperatorPosition
        {
            get
            {
                return _hasOperatorPosition;
            }
            set
            {
                _hasOperatorPosition = value;
            }
        }
        
        /// <summary>
        /// For describing the type, e.g. material (metal, fibre glass).
        /// Supplier and OEM can be given as a configuration item.
        /// Lightly used by NR.
        /// </summary>
        [XmlAttribute]
        public string type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }
    }
    
    /// <summary>
    /// A cabinet for housing an LEU
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("leuCabinet", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class LeuCabinet : Cabinet
    {
        #region Private fields
        private LeuElectricProperties _hasElectricProperties;
        private LeuCabinetLocation _isAtLocation;
        #endregion
        
        /// <summary>
        /// The LEU cabinet is dimensioned for these energy properties.
        /// </summary>
        [XmlElement(Order=0)]
        public LeuElectricProperties hasElectricProperties
        {
            get
            {
                if ((_hasElectricProperties == null))
                {
                    _hasElectricProperties = new LeuElectricProperties();
                }
                return _hasElectricProperties;
            }
            set
            {
                _hasElectricProperties = value;
            }
        }
        
        /// <summary>
        /// The LEU cabinet can have a spot location.
        /// This class refers to the where the LEU cabinet is placed, e.g. an overhead line mast or a signal post.
        /// </summary>
        [XmlElement(Order=1)]
        public LeuCabinetLocation isAtLocation
        {
            get
            {
                if ((_isAtLocation == null))
                {
                    _isAtLocation = new LeuCabinetLocation();
                }
                return _isAtLocation;
            }
            set
            {
                _isAtLocation = value;
            }
        }
    }
    
    /// <summary>
    /// The electric properties of a LEU cabinet.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("leuElectricProperties", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class LeuElectricProperties
    {
        #region Private fields
        private tElementWithIDref _getsPowerFromPS;
        private int _maxPowerConsumption;
        private double _maxPowerInterruptDuration;
        private int _numberOfLeuSystems;
        private NominalVoltageTypes _usesNominalVoltage;
        #endregion
        
        /// <summary>
        /// Reference to the source of electric power.
        /// </summary>
        [XmlElement(Order=0)]
        public tElementWithIDref getsPowerFromPS
        {
            get
            {
                if ((_getsPowerFromPS == null))
                {
                    _getsPowerFromPS = new tElementWithIDref();
                }
                return _getsPowerFromPS;
            }
            set
            {
                _getsPowerFromPS = value;
            }
        }
        
        /// <summary>
        /// The maximal power in Watt that the equipment in this cabinet can consume.
        /// </summary>
        [XmlElement(Order=1)]
        public int maxPowerConsumption
        {
            get
            {
                return _maxPowerConsumption;
            }
            set
            {
                _maxPowerConsumption = value;
            }
        }
        
        /// <summary>
        /// The maximum number of seconds during which a loss of external power has to be bridged.
        /// </summary>
        [XmlElement(Order=2)]
        public double maxPowerInterruptDuration
        {
            get
            {
                return _maxPowerInterruptDuration;
            }
            set
            {
                _maxPowerInterruptDuration = value;
            }
        }
        
        /// <summary>
        /// The calculated number of fully stocked LEU systems. This dictates the power consumption calculations.
        /// de-DE: Anzahl voll-LEU
        /// </summary>
        [XmlElement(Order=3)]
        public int numberOfLeuSystems
        {
            get
            {
                return _numberOfLeuSystems;
            }
            set
            {
                _numberOfLeuSystems = value;
            }
        }
        
        /// <summary>
        /// The LEU cabinet consumes nominal voltage.
        /// </summary>
        [XmlElement(Order=4)]
        public NominalVoltageTypes usesNominalVoltage
        {
            get
            {
                return _usesNominalVoltage;
            }
            set
            {
                _usesNominalVoltage = value;
            }
        }
    }
    
    /// <summary>
    /// Rated voltage types (AC/DC and voltage).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum NominalVoltageTypes
    {
        AC110,
        AC230,
        AC400,
        DC110,
        DC136,
        DC24,
        DC36,
        DC48,
        DC60,
        other,
    }
    
    /// <summary>
    /// The location where a LEU is placed.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("leuCabinetLocation", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class LeuCabinetLocation
    {
        #region Private fields
        private LeuRelativePositionTypes _hasRelativePosition;
        private tElementWithIDref _refersToEquipmentSupport;
        private tElementWithIDref _refersToSignal;
        #endregion
        
        /// <summary>
        /// Indicates the cabinet's position relative to the given equipment support or signal.
        /// </summary>
        [XmlElement(Order=0)]
        public LeuRelativePositionTypes hasRelativePosition
        {
            get
            {
                return _hasRelativePosition;
            }
            set
            {
                _hasRelativePosition = value;
            }
        }
        
        /// <summary>
        /// Reference to the post, mast or other line side infrastructure where the LEU cabinet is placed.
        /// </summary>
        [XmlElement(Order=1)]
        public tElementWithIDref refersToEquipmentSupport
        {
            get
            {
                if ((_refersToEquipmentSupport == null))
                {
                    _refersToEquipmentSupport = new tElementWithIDref();
                }
                return _refersToEquipmentSupport;
            }
            set
            {
                _refersToEquipmentSupport = value;
            }
        }
        
        /// <summary>
        /// Reference to the signal where the LEU cabinet is placed.
        /// </summary>
        [XmlElement(Order=2)]
        public tElementWithIDref refersToSignal
        {
            get
            {
                if ((_refersToSignal == null))
                {
                    _refersToSignal = new tElementWithIDref();
                }
                return _refersToSignal;
            }
            set
            {
                _refersToSignal = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum LeuRelativePositionTypes
    {
        /// <summary>
        /// The cabinet is placed at or attached to the signal post.
        /// </summary>
        at,
        /// <summary>
        /// The cabinet is behind the signal, viewed from the signal's application direction.
        /// </summary>
        behind,
        /// <summary>
        /// The cabinet is in front of the signal, viewed from the signal's application direction.
        /// </summary>
        inFront,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("cabinetGroup", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class CabinetGroup : Cabinet
    {
        #region Private fields
        private int _numberOfCabinets;
        #endregion
        
        /// <summary>
        /// The number of cabinets (aka cases for NR) that are logically grouped together. Typically close together.
        /// </summary>
        [XmlAttribute]
        public int numberOfCabinets
        {
            get
            {
                return _numberOfCabinets;
            }
            set
            {
                _numberOfCabinets = value;
            }
        }
    }
    
    /// <summary>
    /// Room inside a building or a purpose-built trackside housing.
    /// <ul>
    /// <li>nl-NL: relaisruimte of relaishuis</li>
    /// </ul>
    /// <ul>
    /// <li>fr-FR: salle d'appareillage</li>
    /// </ul>
    /// </summary>
    [XmlIncludeAttribute(typeof(ControlRoom))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("equipmentRoom", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class EquipmentRoom : Housing
    {
    }
    
    /// <summary>
    /// Room in a building housing operational control and command equipment.
    /// 
    /// DE: Leitstelle
    /// NL: VL-ruimte
    /// FR: Poste de controle
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("controlRoom", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class ControlRoom : EquipmentRoom
    {
    }
    
    /// <summary>
    /// A large shippable box. Typically prefabricated and wired in a factory and shipped to site.
    /// de-DE: Modulgeb&#228;ude
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("container", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class Container : Housing
    {
    }
    
    /// <summary>
    /// A larger building, not necessarily purpose-built for signalling, that can house cabinets or equipment rooms
    /// <ul>
    /// <li>NR: a signal box maps to a building.</li>
    /// </ul>
    /// <ul>
    /// <li>de-DE: Geb&#228;ude</li>
    /// </ul>
    /// </summary>
    [XmlIncludeAttribute(typeof(EquipmentHouse))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("building", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class Building : Housing
    {
    }
    
    /// <summary>
    /// A purpose-built trackside building housing signalling equipment.
    /// de-DE: Schalthaus
    /// nl-NL: relaishuis
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("equipmentHouse", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class EquipmentHouse : Building
    {
    }
    
    /// <summary>
    /// Generic term for a line-side structure that supports signalling equipment or another fixing. For instance:
    /// - Fixing Post supports frame Sign.
    /// - Fixing Foundation supports fixing Post.
    /// - Fixing Rail supports fixing Cantilever.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("fixing", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class Fixing : EquipmentSupport
    {
        #region Private fields
        private FixingTypes _isOfFixingType;
        private tElementWithIDref[] _refersToReferenceDrawing;
        private tElementWithIDref _refersToReferenceDrawingForMarkerBoard;
        private tElementWithIDref[] _supportsSignalFrame;
        #endregion
        
        [XmlElement(Order=0)]
        public FixingTypes isOfFixingType
        {
            get
            {
                return _isOfFixingType;
            }
            set
            {
                _isOfFixingType = value;
            }
        }
        
        /// <summary>
        /// Also known as norm drawings. Typically CAD drawing.
        /// </summary>
        [XmlElement("refersToReferenceDrawing", Order=1)]
        public tElementWithIDref[] refersToReferenceDrawing
        {
            get
            {
                return _refersToReferenceDrawing;
            }
            set
            {
                _refersToReferenceDrawing = value;
            }
        }
        
        [XmlElement(Order=2)]
        public tElementWithIDref refersToReferenceDrawingForMarkerBoard
        {
            get
            {
                if ((_refersToReferenceDrawingForMarkerBoard == null))
                {
                    _refersToReferenceDrawingForMarkerBoard = new tElementWithIDref();
                }
                return _refersToReferenceDrawingForMarkerBoard;
            }
            set
            {
                _refersToReferenceDrawingForMarkerBoard = value;
            }
        }
        
        /// <summary>
        /// Multiplicity 0..* : a fixing that is a gantry or foundation has no frame.
        /// </summary>
        [XmlElement("supportsSignalFrame", Order=3)]
        public tElementWithIDref[] supportsSignalFrame
        {
            get
            {
                return _supportsSignalFrame;
            }
            set
            {
                _supportsSignalFrame = value;
            }
        }
    }
    
    /// <summary>
    /// List of sections included in the route body, ordered from entry to exit.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("sectionList", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class SectionList : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref _appliesToRouteBody;
        private tElementWithIDref[] _hasSection;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref appliesToRouteBody
        {
            get
            {
                if ((_appliesToRouteBody == null))
                {
                    _appliesToRouteBody = new tElementWithIDref();
                }
                return _appliesToRouteBody;
            }
            set
            {
                _appliesToRouteBody = value;
            }
        }
        
        [XmlElement("hasSection", Order=1)]
        public tElementWithIDref[] hasSection
        {
            get
            {
                return _hasSection;
            }
            set
            {
                _hasSection = value;
            }
        }
    }
    
    /// <summary>
    /// Controlled track assets is the subset of track assets that
    /// <ul>
    /// <li>are <b>controlled </b>by, and/or</li>
    /// <li>are <b>powered </b>by, and/or</li>
    /// <li><b>exchange </b>information with a controller.</li>
    /// </ul>
    /// There has to be one instance of this class for each associated track asset instance.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("controlledTrackAsset", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class ControlledTrackAsset : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref _appliesToActiveSignal;
        private tElementWithIDref _appliesToCompoundLogicalObject;
        private tElementWithIDref _appliesToILIntegratedLevelCrossing;
        private tElementWithIDref _appliesToMovableElement;
        private tElementWithIDref _appliesToReleaseInstrument;
        private tElementWithIDref _appliesToTpsDevice;
        private tElementWithIDref _appliesToTrainDetectionSection;
        private tElementWithIDref _appliesToVehiclePassageDetector;
        private PowerSupplyTypes[] _getsBackupPowerFrom;
        private PowerSupplyTypes _isPoweredBy;
        private tElementWithIDref[] _reportsToDiagnosticsCollector;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref appliesToActiveSignal
        {
            get
            {
                if ((_appliesToActiveSignal == null))
                {
                    _appliesToActiveSignal = new tElementWithIDref();
                }
                return _appliesToActiveSignal;
            }
            set
            {
                _appliesToActiveSignal = value;
            }
        }
        
        /// <summary>
        /// this compound logical object is an active track asset
        /// </summary>
        [XmlElement(Order=1)]
        public tElementWithIDref appliesToCompoundLogicalObject
        {
            get
            {
                if ((_appliesToCompoundLogicalObject == null))
                {
                    _appliesToCompoundLogicalObject = new tElementWithIDref();
                }
                return _appliesToCompoundLogicalObject;
            }
            set
            {
                _appliesToCompoundLogicalObject = value;
            }
        }
        
        /// <summary>
        /// Dictates the control relation between the controlling interlocking and the level crossing system.
        /// The level crossing is a controlled track asset and exchanges information/energy with the IL.
        /// </summary>
        [XmlElement(Order=2)]
        public tElementWithIDref appliesToILIntegratedLevelCrossing
        {
            get
            {
                if ((_appliesToILIntegratedLevelCrossing == null))
                {
                    _appliesToILIntegratedLevelCrossing = new tElementWithIDref();
                }
                return _appliesToILIntegratedLevelCrossing;
            }
            set
            {
                _appliesToILIntegratedLevelCrossing = value;
            }
        }
        
        /// <summary>
        /// This movable element is a controlled track asset.
        /// </summary>
        [XmlElement(Order=3)]
        public tElementWithIDref appliesToMovableElement
        {
            get
            {
                if ((_appliesToMovableElement == null))
                {
                    _appliesToMovableElement = new tElementWithIDref();
                }
                return _appliesToMovableElement;
            }
            set
            {
                _appliesToMovableElement = value;
            }
        }
        
        /// <summary>
        /// The release instrument is a controlled track asset. In very rare cases, a release instrument doesn't feed back information to the interlocking; the key can only be released when a local condition is satisfied.
        /// </summary>
        [XmlElement(Order=4)]
        public tElementWithIDref appliesToReleaseInstrument
        {
            get
            {
                if ((_appliesToReleaseInstrument == null))
                {
                    _appliesToReleaseInstrument = new tElementWithIDref();
                }
                return _appliesToReleaseInstrument;
            }
            set
            {
                _appliesToReleaseInstrument = value;
            }
        }
        
        /// <summary>
        /// Stand-alone TP devices are not referred to by the controlled track asset class.
        /// A self-powered TP device is not a controlled track asset but if the device has some control relation with a controller, for instance reporting health status, it is a controlled track asset.
        /// </summary>
        [XmlElement(Order=5)]
        public tElementWithIDref appliesToTpsDevice
        {
            get
            {
                if ((_appliesToTpsDevice == null))
                {
                    _appliesToTpsDevice = new tElementWithIDref();
                }
                return _appliesToTpsDevice;
            }
            set
            {
                _appliesToTpsDevice = value;
            }
        }
        
        [XmlElement(Order=6)]
        public tElementWithIDref appliesToTrainDetectionSection
        {
            get
            {
                if ((_appliesToTrainDetectionSection == null))
                {
                    _appliesToTrainDetectionSection = new tElementWithIDref();
                }
                return _appliesToTrainDetectionSection;
            }
            set
            {
                _appliesToTrainDetectionSection = value;
            }
        }
        
        /// <summary>
        /// this vehicle passage detector is an active track asset
        /// </summary>
        [XmlElement(Order=7)]
        public tElementWithIDref appliesToVehiclePassageDetector
        {
            get
            {
                if ((_appliesToVehiclePassageDetector == null))
                {
                    _appliesToVehiclePassageDetector = new tElementWithIDref();
                }
                return _appliesToVehiclePassageDetector;
            }
            set
            {
                _appliesToVehiclePassageDetector = value;
            }
        }
        
        /// <summary>
        /// in rare cases, controlled track assets could have a back up power supply
        /// </summary>
        [XmlElement("getsBackupPowerFrom", Order=8)]
        public PowerSupplyTypes[] getsBackupPowerFrom
        {
            get
            {
                return _getsBackupPowerFrom;
            }
            set
            {
                _getsBackupPowerFrom = value;
            }
        }
        
        [XmlElement(Order=9)]
        public PowerSupplyTypes isPoweredBy
        {
            get
            {
                return _isPoweredBy;
            }
            set
            {
                _isPoweredBy = value;
            }
        }
        
        /// <summary>
        /// Diagnostic data from the controlled track asset are channeled to this diagnostics collector.
        /// </summary>
        [XmlElement("reportsToDiagnosticsCollector", Order=10)]
        public tElementWithIDref[] reportsToDiagnosticsCollector
        {
            get
            {
                return _reportsToDiagnosticsCollector;
            }
            set
            {
                _reportsToDiagnosticsCollector = value;
            }
        }
    }
    
    /// <summary>
    /// Signal is part of an autoworking route.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("automatic", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class Automatic : BaseObject1
    {
        #region Private fields
        private tElementWithIDref _appliesToSignal;
        private AutomaticTypes _isOfAutomaticType;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref appliesToSignal
        {
            get
            {
                if ((_appliesToSignal == null))
                {
                    _appliesToSignal = new tElementWithIDref();
                }
                return _appliesToSignal;
            }
            set
            {
                _appliesToSignal = value;
            }
        }
        
        [XmlElement(Order=1)]
        public AutomaticTypes isOfAutomaticType
        {
            get
            {
                return _isOfAutomaticType;
            }
            set
            {
                _isOfAutomaticType = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum AutomaticTypes
    {
        /// <summary>
        /// de-DE: Signalselbststellbetrieb
        /// </summary>
        autoworking,
        /// <summary>
        /// Controlled by automatic route setting system
        /// de-DE: Zuglenkung).
        /// </summary>
        subjectToARS,
        other,
    }
    
    /// <summary>
    /// Two light aspects that flash in synch.
    /// The frequency and phase difference of flashing are given by national rules.
    /// </summary>
    [XmlIncludeAttribute(typeof(FlashInPhase))]
    [XmlIncludeAttribute(typeof(AlternateFlash))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("synchedFlashing", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public abstract partial class SynchedFlashing : BaseObject1
    {
        #region Private fields
        private tElementWithIDref[] _appliesToAspect;
        #endregion
        
        [XmlElement("appliesToAspect", Order=0)]
        public tElementWithIDref[] appliesToAspect
        {
            get
            {
                return _appliesToAspect;
            }
            set
            {
                _appliesToAspect = value;
            }
        }
    }
    
    /// <summary>
    /// Aspects flash in phase.
    /// Note: RFI uses flashing in phase or counter-phase to distinguish signal messages.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("flashInPhase", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class FlashInPhase : SynchedFlashing
    {
    }
    
    /// <summary>
    /// Aspects flash alternately, i.e. in counter-phase.
    /// Note: RFI uses flashing in phase or counter-phase to distinguish signal messages.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("alternateFlash", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class AlternateFlash : SynchedFlashing
    {
    }
    
    /// <summary>
    /// A set of (asset,state) pairs that describes the state of the signalling system.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("systemState", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public abstract partial class SystemState : BaseObject1
    {
        #region Private fields
        private tElementWithIDref[] _definedByAssetAndState;
        #endregion
        
        /// <summary>
        /// Reference to a set of (asset, state) tuples.
        /// </summary>
        [XmlElement("definedByAssetAndState", Order=0)]
        public tElementWithIDref[] definedByAssetAndState
        {
            get
            {
                return _definedByAssetAndState;
            }
            set
            {
                _definedByAssetAndState = value;
            }
        }
    }
    
    /// <summary>
    /// Area without train protection system.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("areaWithoutTps", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class AreaWithoutTps : TpArea
    {
    }
    
    /// <summary>
    /// Area with ETCS supervision.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("etcsArea", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class EtcsArea : TpArea
    {
        #region Private fields
        private tElementWithIDref[] _allowsTrainsWithEtcsVersion;
        private tElementWithIDref[] _hasEntryLtMarker;
        private EtcsLevelTypes _hasEtcsLevel;
        private tElementWithIDref _isFittedWithEtcsVersion;
        #endregion
        
        /// <summary>
        /// The area allows trains equipped with this ETCS system version.
        /// </summary>
        [XmlElement("allowsTrainsWithEtcsVersion", Order=0)]
        public tElementWithIDref[] allowsTrainsWithEtcsVersion
        {
            get
            {
                return _allowsTrainsWithEtcsVersion;
            }
            set
            {
                _allowsTrainsWithEtcsVersion = value;
            }
        }
        
        /// <summary>
        /// The transition markers are located near, not necessarily exactly on this border because in- and outgoing transitions can differ. Markers help define the functional transitions from one area to another.
        /// Reference to marker where a Level Transition occurs into the area.
        /// </summary>
        [XmlElement("hasEntryLtMarker", Order=1)]
        public tElementWithIDref[] hasEntryLtMarker
        {
            get
            {
                return _hasEntryLtMarker;
            }
            set
            {
                _hasEntryLtMarker = value;
            }
        }
        
        /// <summary>
        /// The ETCS level of the area.
        /// One area per level. Areas can overlap, i.e. a fall-back level 1 would largely overlap the level 2.
        /// </summary>
        [XmlElement(Order=2)]
        public EtcsLevelTypes hasEtcsLevel
        {
            get
            {
                return _hasEtcsLevel;
            }
            set
            {
                _hasEtcsLevel = value;
            }
        }
        
        /// <summary>
        /// The ETCS area is fitted with the given version. May be empty in an early engineering stage.
        /// </summary>
        [XmlElement(Order=3)]
        public tElementWithIDref isFittedWithEtcsVersion
        {
            get
            {
                if ((_isFittedWithEtcsVersion == null))
                {
                    _isFittedWithEtcsVersion = new tElementWithIDref();
                }
                return _isFittedWithEtcsVersion;
            }
            set
            {
                _isFittedWithEtcsVersion = value;
            }
        }
    }
    
    /// <summary>
    /// An area where a given set of position report parameters applies.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("etcsPositionReportParametersArea", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class EtcsPositionReportParametersArea
    {
        #region Private fields
        private tElementWithIDref _isLocatedAt;
        private int _t_cycloc;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref isLocatedAt
        {
            get
            {
                if ((_isLocatedAt == null))
                {
                    _isLocatedAt = new tElementWithIDref();
                }
                return _isLocatedAt;
            }
            set
            {
                _isLocatedAt = value;
            }
        }
        
        /// <summary>
        /// ETCS variable T_CYCLOC
        /// </summary>
        [XmlElement(Order=1)]
        public int t_cycloc
        {
            get
            {
                return _t_cycloc;
            }
            set
            {
                _t_cycloc = value;
            }
        }
    }
    
    /// <summary>
    /// If a signal fails to show a given aspect, then another signal is forced to show another, typically more restrictive, aspect.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("aspectProving", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class AspectProving
    {
        #region Private fields
        private tElementWithIDref _bestAllowedAspect;
        private tElementWithIDref _checksAspect;
        #endregion
        
        [XmlElement("bestAllowedAspect.", Order=0)]
        public tElementWithIDref bestAllowedAspect
        {
            get
            {
                if ((_bestAllowedAspect == null))
                {
                    _bestAllowedAspect = new tElementWithIDref();
                }
                return _bestAllowedAspect;
            }
            set
            {
                _bestAllowedAspect = value;
            }
        }
        
        /// <summary>
        /// The aspect proving relation checks this signal/message combination.
        /// </summary>
        [XmlElement(Order=1)]
        public tElementWithIDref checksAspect
        {
            get
            {
                if ((_checksAspect == null))
                {
                    _checksAspect = new tElementWithIDref();
                }
                return _checksAspect;
            }
            set
            {
                _checksAspect = value;
            }
        }
    }
    
    /// <summary>
    /// The configuration of the line block working.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("blockElementConfiguration", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class BlockElementConfiguration
    {
        #region Private fields
        private tElementWithIDref _appliesToLineBlockElement;
        private bool _hasBlockNormalisingWarning;
        private BlockSettingTypes[] _hasBlockSettingType;
        private bool _hasTrainOnLineWarning;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref appliesToLineBlockElement
        {
            get
            {
                if ((_appliesToLineBlockElement == null))
                {
                    _appliesToLineBlockElement = new tElementWithIDref();
                }
                return _appliesToLineBlockElement;
            }
            set
            {
                _appliesToLineBlockElement = value;
            }
        }
        
        /// <summary>
        /// True if an acoustic warning sounds when the block is normalised.
        /// </summary>
        [XmlElement(Order=1)]
        public bool hasBlockNormalisingWarning
        {
            get
            {
                return _hasBlockNormalisingWarning;
            }
            set
            {
                _hasBlockNormalisingWarning = value;
            }
        }
        
        /// <summary>
        /// A block element sets the block in one or more of these ways.
        /// </summary>
        [XmlElement("hasBlockSettingType", Order=2)]
        public BlockSettingTypes[] hasBlockSettingType
        {
            get
            {
                return _hasBlockSettingType;
            }
            set
            {
                _hasBlockSettingType = value;
            }
        }
        
        /// <summary>
        /// True if an acoustic warning sounds when a train approaches on the block.
        /// </summary>
        [XmlElement(Order=3)]
        public bool hasTrainOnLineWarning
        {
            get
            {
                return _hasTrainOnLineWarning;
            }
            set
            {
                _hasTrainOnLineWarning = value;
            }
        }
    }
    
    /// <summary>
    /// The types of block setting. The setting type on block A/B must be mutually compatible.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum BlockSettingTypes
    {
        /// <summary>
        /// The block element automatically sets the block when the next train needs to be sent and the block is normalised.
        /// </summary>
        automatic,
        /// <summary>
        /// When the block normalises, the block element that received the train automatically reverts the setting to the sending block element.
        /// 
        /// SNCF: there's a normal, preferred direction setting. If a train in the opposite direction has cleared the block, the setting automatically reverts to the preferred direction. fr-FR: installation permanente de contresens. (IPCS)
        /// </summary>
        automaticReversal,
        /// <summary>
        /// The system requests the claim whilst the block is still occupied. As soon as the block is normalised the block element gets the block. E.g. preselection of setting.
        /// </summary>
        storesRequest,
        /// <summary>
        /// The block element permanently claims the block. This disallows bidirectional traffic.
        /// </summary>
        permanent,
        /// <summary>
        /// The signaller at one block element must explicitly set the block.
        /// </summary>
        manual,
    }
    
    /// <summary>
    /// Technical line-side construction relevant to, but not planned by, signalling.
    /// Facade for devices like
    /// <ul>
    /// <li>Bridge</li>
    /// <li>Tunnel</li>
    /// <li>Noise protection barrier</li>
    /// </ul>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("lineSideLinearConstruction", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class LineSideLinearConstruction
    {
        #region Private fields
        private tElementWithIDref _isLocatedAt;
        private tElementWithIDref _refersToCivilStructure;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref isLocatedAt
        {
            get
            {
                if ((_isLocatedAt == null))
                {
                    _isLocatedAt = new tElementWithIDref();
                }
                return _isLocatedAt;
            }
            set
            {
                _isLocatedAt = value;
            }
        }
        
        /// <summary>
        /// The line-side device, e.g. a bridge, may be registered as a civil structure.
        /// </summary>
        [XmlElement(Order=1)]
        public tElementWithIDref refersToCivilStructure
        {
            get
            {
                if ((_refersToCivilStructure == null))
                {
                    _refersToCivilStructure = new tElementWithIDref();
                }
                return _refersToCivilStructure;
            }
            set
            {
                _refersToCivilStructure = value;
            }
        }
    }
    
    /// <summary>
    /// Where cable can exit or enter the duct, typically a simple hole.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("cableRouteExit", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class CableRouteExit : CableRouteJunction
    {
    }
    
    /// <summary>
    /// A physical node in the cable route network where cables can enter/exit a cable route. From this hub the cable route goes to controller, controlled track asset, cable distributor or housing.
    /// This class can be instantiated if no appropriate specialised class is available, for instance at an early planning stage.
    /// </summary>
    [XmlIncludeAttribute(typeof(CableRouteJoin))]
    [XmlIncludeAttribute(typeof(CablePit))]
    [XmlIncludeAttribute(typeof(CableRouteExit))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("cableRouteJunction", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class CableRouteJunction
    {
        #region Private fields
        private tElementWithIDref[] _isLocatedAt;
        private tElementWithIDref[] _joinsCableDistributor;
        private tElementWithIDref[] _joinsControlledTrackAsset;
        private tElementWithIDref[] _joinsController;
        private tElementWithIDref[] _joinsHousing;
        #endregion
        
        /// <summary>
        /// Can be located on <i>1..* </i>spot locations because the route junction is typically situated at the end or start of 1..* net elements.
        /// </summary>
        [XmlElement("isLocatedAt", Order=0)]
        public tElementWithIDref[] isLocatedAt
        {
            get
            {
                return _isLocatedAt;
            }
            set
            {
                _isLocatedAt = value;
            }
        }
        
        [XmlElement("joinsCableDistributor", Order=1)]
        public tElementWithIDref[] joinsCableDistributor
        {
            get
            {
                return _joinsCableDistributor;
            }
            set
            {
                _joinsCableDistributor = value;
            }
        }
        
        /// <summary>
        /// References a ControlledTrackAsset to which the cable is connected.
        /// </summary>
        [XmlElement("joinsControlledTrackAsset", Order=2)]
        public tElementWithIDref[] joinsControlledTrackAsset
        {
            get
            {
                return _joinsControlledTrackAsset;
            }
            set
            {
                _joinsControlledTrackAsset = value;
            }
        }
        
        /// <summary>
        /// References a controller to which the cable is connected.
        /// </summary>
        [XmlElement("joinsController", Order=3)]
        public tElementWithIDref[] joinsController
        {
            get
            {
                return _joinsController;
            }
            set
            {
                _joinsController = value;
            }
        }
        
        /// <summary>
        /// The housing on the cable route or where the cable route terminates.
        /// </summary>
        [XmlElement("joinsHousing", Order=4)]
        public tElementWithIDref[] joinsHousing
        {
            get
            {
                return _joinsHousing;
            }
            set
            {
                _joinsHousing = value;
            }
        }
    }
    
    /// <summary>
    /// Where cable routes join (not being a cable pit).
    /// de-DE: Trassenabzweig
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("cableRouteJoin", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class CableRouteJoin : CableRouteJunction
    {
    }
    
    /// <summary>
    /// Pit adjacent to the track at the end of a UTX.
    /// A UTX joins two cable pits, as per the cable duct topology.
    /// 
    /// de-DE: Kabelschacht
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("cablePit", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class CablePit : CableRouteJunction
    {
    }
    
    /// <summary>
    /// The parameters of a power output channel.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("powerOutputChannelProperties", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class PowerOutputChannelProperties
    {
        #region Private fields
        private tElementWithIDref _appliesToPsModule;
        private int _channelNumber;
        private int _maxPower;
        private float _maxPowerInterruptDuration;
        private int _maxVoltage;
        private int _minVoltage;
        private int _nominalPower;
        private NominalVoltageTypes _providesNominalVoltage;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref appliesToPsModule
        {
            get
            {
                if ((_appliesToPsModule == null))
                {
                    _appliesToPsModule = new tElementWithIDref();
                }
                return _appliesToPsModule;
            }
            set
            {
                _appliesToPsModule = value;
            }
        }
        
        /// <summary>
        /// The channel of the output on the power supply. Only given if the power supply has mutliple channels.
        /// </summary>
        [XmlElement(Order=1)]
        public int channelNumber
        {
            get
            {
                return _channelNumber;
            }
            set
            {
                _channelNumber = value;
            }
        }
        
        /// <summary>
        /// Maximum power in Watts that the channel can constantly supply.
        /// </summary>
        [XmlElement(Order=2)]
        public int maxPower
        {
            get
            {
                return _maxPower;
            }
            set
            {
                _maxPower = value;
            }
        }
        
        /// <summary>
        /// The maximum duration during which this channel may not provide power.
        /// </summary>
        [XmlElement(Order=3)]
        public float maxPowerInterruptDuration
        {
            get
            {
                return _maxPowerInterruptDuration;
            }
            set
            {
                _maxPowerInterruptDuration = value;
            }
        }
        
        /// <summary>
        /// Upper limit of the tolerance, i.e. maximum voltage that is supplied by the channel.
        /// </summary>
        [XmlElement(Order=4)]
        public int maxVoltage
        {
            get
            {
                return _maxVoltage;
            }
            set
            {
                _maxVoltage = value;
            }
        }
        
        /// <summary>
        /// Lower limit of the tolerance, i.e. minimum voltage that is supplied by the channel.
        /// </summary>
        [XmlElement(Order=5)]
        public int minVoltage
        {
            get
            {
                return _minVoltage;
            }
            set
            {
                _minVoltage = value;
            }
        }
        
        /// <summary>
        /// Nominal power in Watts that the channel supplies.
        /// de-DE: Nennleistung
        /// </summary>
        [XmlElement(Order=6)]
        public int nominalPower
        {
            get
            {
                return _nominalPower;
            }
            set
            {
                _nominalPower = value;
            }
        }
        
        [XmlElement(Order=7)]
        public NominalVoltageTypes providesNominalVoltage
        {
            get
            {
                return _providesNominalVoltage;
            }
            set
            {
                _providesNominalVoltage = value;
            }
        }
    }
    
    /// <summary>
    /// A cable joint is where cable terminations are distributed, joined, spliced.
    /// As opposed to the cable joint installation, the cable joint is not housed. The linear location of the cables provide the position inside the cable route.
    /// </summary>
    [XmlIncludeAttribute(typeof(MouldedCableJoint))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("cableJoint", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class CableJoint
    {
        #region Private fields
        private CableJointRelation[] _realisesCableJoints;
        #endregion
        
        [XmlElement("realisesCableJoints", Order=0)]
        public CableJointRelation[] realisesCableJoints
        {
            get
            {
                return _realisesCableJoints;
            }
            set
            {
                _realisesCableJoints = value;
            }
        }
    }
    
    /// <summary>
    /// A cable joint connect two cable ends. It is not housed but lies in the cable route. Typically used when one runs out of cable or to repair sectioned cable. It is often molded in a resin.
    /// <ul>
    /// <li>de-DE: Kabelmuffe</li>
    /// <li>it-IT: muffola</li>
    /// <li>nl-NL: kabelmof</li>
    /// <li>fr-FR: manchon de cable</li>
    /// </ul>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("mouldedCableJoint", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class MouldedCableJoint : CableJoint
    {
    }
    
    /// <summary>
    /// Set of properties that apply to the RBC.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("rbcProperties", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class RbcProperties
    {
        #region Private fields
        private tElementWithIDref _appliesToRbc;
        private Duration _hasAckTimer;
        private Duration _hasGeneralMessageTimer;
        private Duration _hasPermShuntTimer;
        private int _minUserDataRate;
        private int _nid_c;
        private string _nid_radio;
        private string _srsSubversion;
        private string _srsVersion;
        private Duration _stopInShuntingSuppTimer;
        private int _nid_rbc;
        #endregion
        
        /// <summary>
        /// The properties apply to a given RBC.
        /// </summary>
        [XmlElement(Order=0)]
        public tElementWithIDref appliesToRbc
        {
            get
            {
                if ((_appliesToRbc == null))
                {
                    _appliesToRbc = new tElementWithIDref();
                }
                return _appliesToRbc;
            }
            set
            {
                _appliesToRbc = value;
            }
        }
        
        /// <summary>
        /// RBC acknowledgement timer: A configurable timer used to resend application messages in case of communication loss. The timer starts at the moment of sending the application message for which acknowledgement is required.
        /// </summary>
        [XmlElement(Order=1)]
        public Duration hasAckTimer
        {
            get
            {
                if ((_hasAckTimer == null))
                {
                    _hasAckTimer = new Duration();
                }
                return _hasAckTimer;
            }
            set
            {
                _hasAckTimer = value;
            }
        }
        
        /// <summary>
        /// Time interval between general messages from RBC to train. This checks that the train is still communicating with the RBC.
        /// </summary>
        [XmlElement(Order=2)]
        public Duration hasGeneralMessageTimer
        {
            get
            {
                if ((_hasGeneralMessageTimer == null))
                {
                    _hasGeneralMessageTimer = new Duration();
                }
                return _hasGeneralMessageTimer;
            }
            set
            {
                _hasGeneralMessageTimer = value;
            }
        }
        
        /// <summary>
        /// Permission to shunt timer. When the driver hasn't started the shunting process before, the permission to shunt is revoked.
        /// </summary>
        [XmlElement(Order=3)]
        public Duration hasPermShuntTimer
        {
            get
            {
                if ((_hasPermShuntTimer == null))
                {
                    _hasPermShuntTimer = new Duration();
                }
                return _hasPermShuntTimer;
            }
            set
            {
                _hasPermShuntTimer = value;
            }
        }
        
        /// <summary>
        /// The minimal data rate of the train-RBC communication channel in Baud.
        /// </summary>
        [XmlElement(Order=4)]
        public int minUserDataRate
        {
            get
            {
                return _minUserDataRate;
            }
            set
            {
                _minUserDataRate = value;
            }
        }
        
        /// <summary>
        /// NID_C
        /// </summary>
        [XmlElement(Order=5)]
        public int nid_c
        {
            get
            {
                return _nid_c;
            }
            set
            {
                _nid_c = value;
            }
        }
        
        /// <summary>
        /// Radio Subscriber Number. This is the number that the ETCS onboards call.
        /// </summary>
        [XmlElement(Order=6)]
        public string nid_radio
        {
            get
            {
                return _nid_radio;
            }
            set
            {
                _nid_radio = value;
            }
        }
        
        /// <summary>
        /// The subversion of subset-026-7.
        /// E.g. Maintenance Release 1.
        /// </summary>
        [XmlElement(Order=7)]
        public string srsSubversion
        {
            get
            {
                return _srsSubversion;
            }
            set
            {
                _srsSubversion = value;
            }
        }
        
        /// <summary>
        /// The version of Subset-026-7.
        /// </summary>
        [XmlElement(Order=8)]
        public string srsVersion
        {
            get
            {
                return _srsVersion;
            }
            set
            {
                _srsVersion = value;
            }
        }
        
        /// <summary>
        /// Stop if in shunting suppression timer:
        /// as long as the timer is running, the train can ignore  "stop if in shunting" message.
        /// 
        /// This supposes that a CR has been implemented that the RBC and train remain connected during shunting.
        /// </summary>
        [XmlElement(Order=9)]
        public Duration stopInShuntingSuppTimer
        {
            get
            {
                if ((_stopInShuntingSuppTimer == null))
                {
                    _stopInShuntingSuppTimer = new Duration();
                }
                return _stopInShuntingSuppTimer;
            }
            set
            {
                _stopInShuntingSuppTimer = value;
            }
        }
        
        [XmlAttribute]
        public int nid_rbc
        {
            get
            {
                return _nid_rbc;
            }
            set
            {
                _nid_rbc = value;
            }
        }
    }
    
    /// <summary>
    /// Describes the sourcing of power to a power supply.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("powerSourceRelation", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class PowerSourceRelation
    {
        #region Private fields
        private tElementWithIDref _providesPowerTo;
        private tElementWithIDref _getsPowerFromPsModule;
        private tElementWithIDref _getsPowerFromTrackAsset;
        private PowerSourceTypes _hasPowerSourceType;
        private bool _isPrimarySource;
        private bool _isUps;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref ProvidesPowerTo
        {
            get
            {
                if ((_providesPowerTo == null))
                {
                    _providesPowerTo = new tElementWithIDref();
                }
                return _providesPowerTo;
            }
            set
            {
                _providesPowerTo = value;
            }
        }
        
        /// <summary>
        /// Gets power from a physical power supply module.
        /// </summary>
        [XmlElement(Order=1)]
        public tElementWithIDref getsPowerFromPsModule
        {
            get
            {
                if ((_getsPowerFromPsModule == null))
                {
                    _getsPowerFromPsModule = new tElementWithIDref();
                }
                return _getsPowerFromPsModule;
            }
            set
            {
                _getsPowerFromPsModule = value;
            }
        }
        
        /// <summary>
        /// The virtual power supply model gets power from a track asset such as a controller, LX, or TPS device.
        /// </summary>
        [XmlElement(Order=2)]
        public tElementWithIDref getsPowerFromTrackAsset
        {
            get
            {
                if ((_getsPowerFromTrackAsset == null))
                {
                    _getsPowerFromTrackAsset = new tElementWithIDref();
                }
                return _getsPowerFromTrackAsset;
            }
            set
            {
                _getsPowerFromTrackAsset = value;
            }
        }
        
        /// <summary>
        /// The power source type is indicated if no actual object that is the source of power can be indicated.
        /// </summary>
        [XmlElement(Order=3)]
        public PowerSourceTypes hasPowerSourceType
        {
            get
            {
                return _hasPowerSourceType;
            }
            set
            {
                _hasPowerSourceType = value;
            }
        }
        
        /// <summary>
        /// True if the source of the power is the primary power.
        /// False otherwise.
        /// </summary>
        [XmlElement(Order=4)]
        public bool isPrimarySource
        {
            get
            {
                return _isPrimarySource;
            }
            set
            {
                _isPrimarySource = value;
            }
        }
        
        /// <summary>
        /// True if the source of power is buffered (UPS - Uninterruptable Power Supply)
        /// de-DE: USV Unterbrechungsfreie Stromversorgung.
        /// </summary>
        [XmlElement(Order=5)]
        public bool isUps
        {
            get
            {
                return _isUps;
            }
            set
            {
                _isUps = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum PowerSourceTypes
    {
        fuelCell,
        generator,
        solar,
        traction,
        nationalGrid,
        /// <summary>
        /// E.g. a voltage for switching gear
        /// </summary>
        railwayGrid,
        other,
    }
    
    /// <summary>
    /// A group of one RBC and one or more interlocking that need to exchange signalling information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("rbcInterlockingCommGroup", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class RbcInterlockingCommGroup : RbcInterlockingGroup
    {
    }
    
    /// <summary>
    /// An abstract grouping of RBC and interlocking systems.
    /// 
    /// Specialisation shows the purpose of the grouping, i.e. for administrative purposes or communication.
    /// </summary>
    [XmlIncludeAttribute(typeof(CentralSafetySystem))]
    [XmlIncludeAttribute(typeof(RbcInterlockingCommGroup))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("rbcInterlockingGroup", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public abstract partial class RbcInterlockingGroup
    {
        #region Private fields
        private tElementWithIDref[] _includesInterlocking;
        private tElementWithIDref[] _includesRbc;
        #endregion
        
        [XmlElement("includesInterlocking", Order=0)]
        public tElementWithIDref[] includesInterlocking
        {
            get
            {
                return _includesInterlocking;
            }
            set
            {
                _includesInterlocking = value;
            }
        }
        
        [XmlElement("includesRbc", Order=1)]
        public tElementWithIDref[] includesRbc
        {
            get
            {
                return _includesRbc;
            }
            set
            {
                _includesRbc = value;
            }
        }
    }
    
    /// <summary>
    /// The Central Safety System (CSS) groups interlocking and RBC functionality.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("centralSafetySystem", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class CentralSafetySystem : RbcInterlockingGroup
    {
    }
    
    /// <summary>
    /// The train detector within a fouling track dictates which movable element positions must be checked and which section must be clear as a consequence (if any).
    /// Typically used in Germany.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("foulTrackControl", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class FoulTrackControl
    {
        #region Private fields
        private tElementWithIDref _alsoCheckMovableElement;
        private tElementWithIDref _alsoCheckPointElementInPosition;
        private tElementWithIDref _alsoCheckTdsSection;
        private tElementWithIDref _appliesToPointElementInPosition;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref alsoCheckMovableElement
        {
            get
            {
                if ((_alsoCheckMovableElement == null))
                {
                    _alsoCheckMovableElement = new tElementWithIDref();
                }
                return _alsoCheckMovableElement;
            }
            set
            {
                _alsoCheckMovableElement = value;
            }
        }
        
        [XmlElement(Order=1)]
        public tElementWithIDref alsoCheckPointElementInPosition
        {
            get
            {
                if ((_alsoCheckPointElementInPosition == null))
                {
                    _alsoCheckPointElementInPosition = new tElementWithIDref();
                }
                return _alsoCheckPointElementInPosition;
            }
            set
            {
                _alsoCheckPointElementInPosition = value;
            }
        }
        
        /// <summary>
        /// The section that must be proven as extra verification to avoid fouling.
        /// </summary>
        [XmlElement(Order=2)]
        public tElementWithIDref alsoCheckTdsSection
        {
            get
            {
                if ((_alsoCheckTdsSection == null))
                {
                    _alsoCheckTdsSection = new tElementWithIDref();
                }
                return _alsoCheckTdsSection;
            }
            set
            {
                _alsoCheckTdsSection = value;
            }
        }
        
        /// <summary>
        /// The branch of the point that cannot be proven vacant without extra verifications.
        /// </summary>
        [XmlElement(Order=3)]
        public tElementWithIDref appliesToPointElementInPosition
        {
            get
            {
                if ((_appliesToPointElementInPosition == null))
                {
                    _appliesToPointElementInPosition = new tElementWithIDref();
                }
                return _appliesToPointElementInPosition;
            }
            set
            {
                _appliesToPointElementInPosition = value;
            }
        }
    }
    
    /// <summary>
    /// Description of the location where maintenance personnel can gain access to the track asset.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("nearestAccessPoint", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class NearestAccessPoint
    {
        #region Private fields
        private tElementWithIDref _isRelatedToTrackAsset;
        private string _description;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref isRelatedToTrackAsset
        {
            get
            {
                if ((_isRelatedToTrackAsset == null))
                {
                    _isRelatedToTrackAsset = new tElementWithIDref();
                }
                return _isRelatedToTrackAsset;
            }
            set
            {
                _isRelatedToTrackAsset = value;
            }
        }
        
        /// <summary>
        /// Textual description.
        /// </summary>
        [XmlAttribute]
        public string description
        {
            get
            {
                return _description;
            }
            set
            {
                _description = value;
            }
        }
    }
    
    /// <summary>
    /// The signal must be aligned such that the driver can see it. This class describes the position (upstream on the track) of the target of the signal: distance, and optionally height.
    /// This information is typically checked during the installation and testing phases.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("signalAlignment", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class SignalAlignment
    {
        #region Private fields
        private tElementWithIDref _appliesToLightSignal;
        private tElementWithIDref _appliesToSignalFrame;
        private Length _distance;
        private Length _height;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref appliesToLightSignal
        {
            get
            {
                if ((_appliesToLightSignal == null))
                {
                    _appliesToLightSignal = new tElementWithIDref();
                }
                return _appliesToLightSignal;
            }
            set
            {
                _appliesToLightSignal = value;
            }
        }
        
        [XmlElement(Order=1)]
        public tElementWithIDref appliesToSignalFrame
        {
            get
            {
                if ((_appliesToSignalFrame == null))
                {
                    _appliesToSignalFrame = new tElementWithIDref();
                }
                return _appliesToSignalFrame;
            }
            set
            {
                _appliesToSignalFrame = value;
            }
        }
        
        /// <summary>
        /// distance along the track to the alignment target
        /// </summary>
        [XmlElement(Order=2)]
        public Length distance
        {
            get
            {
                if ((_distance == null))
                {
                    _distance = new Length();
                }
                return _distance;
            }
            set
            {
                _distance = value;
            }
        }
        
        /// <summary>
        /// height over the track of the alignment target
        /// </summary>
        [XmlElement(Order=3)]
        public Length height
        {
            get
            {
                if ((_height == null))
                {
                    _height = new Length();
                }
                return _height;
            }
            set
            {
                _height = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("etcsSignalProperties", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class EtcsSignalProperties
    {
        #region Private fields
        private bool _epsReportingPoint;
        private bool _epsTunnelSignal;
        private bool _acceptsRbcDarkModeCommand;
        private EtcsBlockageExitTypes _allowsEtcsBlockageExit;
        private tElementWithIDref _appliesToEtcsSignal;
        private string _groupId;
        private bool _isEtcsEntry;
        private tElementWithIDref[] _isStoppingPointForDetector;
        private Length _protectsTunnelOfLength;
        private Length _shortestOverlap200;
        private Length _shortestOverlap50;
        private Length _shortestOverlap50_200;
        private string _subGroupId;
        #endregion
        
        /// <summary>
        /// Encounter Prohibition System (EPS), signalling function that prevents trains encountering in the tunnel.
        /// True when the signal reports to the system that prohibits train encounters in the tunnel.
        /// The signal may be located outside and in advance of the tunnel.
        /// de-DE: Meldepunkt f&#252;r das Tunnelbegegnungsverbotssystem
        /// </summary>
        [XmlElement(Order=0)]
        public bool EpsReportingPoint
        {
            get
            {
                return _epsReportingPoint;
            }
            set
            {
                _epsReportingPoint = value;
            }
        }
        
        /// <summary>
        /// Encounter Prohibition System (EPS), signalling function that prevents trains encountering in the tunnel.
        /// True when this signal is a tunnel signal referring to the system that prohibits train encounters in the tunnel. False otherwise.
        /// </summary>
        [XmlElement(Order=1)]
        public bool EpsTunnelSignal
        {
            get
            {
                return _epsTunnelSignal;
            }
            set
            {
                _epsTunnelSignal = value;
            }
        }
        
        /// <summary>
        /// True if the RBC can switch this signal to dark mode. Precondition is that the property <a href="$element://{71D5DA4A-81C2-42bb-92F3-4FD0FC35736C}"><font color="#0000ff"><u>intentionally dark allowed</u></font></a> applies to this signal.
        /// de-DE: Angabe, ob f&#252;r dieses Signal von der ETCS-Zentrale Dunkelschaltanst&#246;&#223;e gesendet werden d&#252;rfen (true) oder nicht (false). Vorbedingung ist, dass das Signal stellwerksseitig bereits dunkelschaltbar ist (siehe Dunkelschaltung).
        /// </summary>
        [XmlElement(Order=2)]
        public bool acceptsRbcDarkModeCommand
        {
            get
            {
                return _acceptsRbcDarkModeCommand;
            }
            set
            {
                _acceptsRbcDarkModeCommand = value;
            }
        }
        
        /// <summary>
        /// Indicates whether exit from ETCS is allowed at this signal.
        /// de-DE: Angabe, ob bzw. in welcher Form bei einer ETCS-Sperre ein Ausstieg aus L2 erlaubt ist.
        /// </summary>
        [XmlElement(Order=3)]
        public EtcsBlockageExitTypes allowsEtcsBlockageExit
        {
            get
            {
                return _allowsEtcsBlockageExit;
            }
            set
            {
                _allowsEtcsBlockageExit = value;
            }
        }
        
        [XmlElement(Order=4)]
        public tElementWithIDref appliesToEtcsSignal
        {
            get
            {
                if ((_appliesToEtcsSignal == null))
                {
                    _appliesToEtcsSignal = new tElementWithIDref();
                }
                return _appliesToEtcsSignal;
            }
            set
            {
                _appliesToEtcsSignal = value;
            }
        }
        
        /// <summary>
        /// ID used to group the signal and to facilitate communicating to the RBC that in case of a IL failure, a given group of signals has failed.
        /// de-DE: Zuordnung zu einer Gruppe, um im Falle einer Rechnerst&#246;rung im ESTW dem RBC die gest&#246;rten Elemente einfach &#252;bertragen zu k&#246;nnen. Siehe Ril 819.1344 4 (36). Die Angabe entf&#228;llt ggf. zu einem sp&#228;teren Zeitpunkt.
        /// </summary>
        [XmlElement(Order=5)]
        public string groupId
        {
            get
            {
                return _groupId;
            }
            set
            {
                _groupId = value;
            }
        }
        
        /// <summary>
        /// True if this signal is inside the ETCS L2 area and can be used for trains to enter ETCS supervision.
        /// de-DE:  Angabe, ob das Signal als Einstiegssignal innerhalb des L2-Bereichs zul&#228;ssig ist (true) oder nicht (false).
        /// </summary>
        [XmlElement(Order=6)]
        public bool isEtcsEntry
        {
            get
            {
                return _isEtcsEntry;
            }
            set
            {
                _isEtcsEntry = value;
            }
        }
        
        /// <summary>
        /// When the line-side device detects a hot axle box or hot brake, the ETCS signal is where the train is stopped.
        /// </summary>
        [XmlElement("isStoppingPointForDetector", Order=7)]
        public tElementWithIDref[] isStoppingPointForDetector
        {
            get
            {
                return _isStoppingPointForDetector;
            }
            set
            {
                _isStoppingPointForDetector = value;
            }
        }
        
        /// <summary>
        /// Given only when this signal protects a tunnel entry. The tunnel then has the given length.
        /// </summary>
        [XmlElement(Order=8)]
        public Length protectsTunnelOfLength
        {
            get
            {
                if ((_protectsTunnelOfLength == null))
                {
                    _protectsTunnelOfLength = new Length();
                }
                return _protectsTunnelOfLength;
            }
            set
            {
                _protectsTunnelOfLength = value;
            }
        }
        
        /// <summary>
        /// Shortest overlap in the category 200m and upwards.
        /// Only given when the interlocking can't dynamically provide the overlap length to the RBC.
        /// </summary>
        [XmlElement(Order=9)]
        public Length shortestOverlap200
        {
            get
            {
                if ((_shortestOverlap200 == null))
                {
                    _shortestOverlap200 = new Length();
                }
                return _shortestOverlap200;
            }
            set
            {
                _shortestOverlap200 = value;
            }
        }
        
        /// <summary>
        /// The shortest overlap in the category less than 50 metres.
        /// Only given when the interlocking can't dynamically provide the overlap length to the RBC.
        /// </summary>
        [XmlElement(Order=10)]
        public Length shortestOverlap50
        {
            get
            {
                if ((_shortestOverlap50 == null))
                {
                    _shortestOverlap50 = new Length();
                }
                return _shortestOverlap50;
            }
            set
            {
                _shortestOverlap50 = value;
            }
        }
        
        /// <summary>
        /// The shortest overlap in the category 50 to less than 200m.
        /// Only given when the interlocking can't dynamically provide the overlap length to the RBC.
        /// </summary>
        [XmlElement(Order=11)]
        public Length shortestOverlap50_200
        {
            get
            {
                if ((_shortestOverlap50_200 == null))
                {
                    _shortestOverlap50_200 = new Length();
                }
                return _shortestOverlap50_200;
            }
            set
            {
                _shortestOverlap50_200 = value;
            }
        }
        
        /// <summary>
        /// ID used to sub-group the signal and to facilitate communicating to the RBC that in case of a IL failure, a given group of signals has failed.
        /// </summary>
        [XmlElement(Order=12)]
        public string subGroupId
        {
            get
            {
                return _subGroupId;
            }
            set
            {
                _subGroupId = value;
            }
        }
    }
    
    /// <summary>
    /// Types of exit from ETCS allowed when the signal is blocked.
    /// de-DE: Angabe, ob bzw. in welcher Form bei einer ETCS-Sperre ein Ausstieg aus L2 erlaubt ist.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum EtcsBlockageExitTypes
    {
        yes,
        no,
        regular,
    }
    
    /// <summary>
    /// The line-side system can switch the light signal to intentionally dark when a cab signalling ATP system such as LZB or ETCS is leading.
    /// The signal lamps are intentionally turned off and the driver disregards the light signal.
    /// This avoids conflict between line-side aspect and cab aspect in dual signalling environments.
    /// 
    /// Not to be used when a signal is switched to a special aspect (white lamp or white cross), indicating that the signal should be disregarded. The other signal lamps are dark but this is not meant by intentionally dark.
    /// 
    /// Notes about dark signals:
    /// <ul>
    /// <li>A light signal that is dark because it has failed represents danger.</li>
    /// <li>In the UK, dark mode applies to LX warning light that switch to dark on purpose, e.g. a failed level crossing in the UK because a permanent warning light invites undesirable behaviour by motorists.</li>
    /// </ul>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("intentionallyDarkAllowed", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class IntentionallyDarkAllowed
    {
        #region Private fields
        private tElementWithIDref _appliesToLightSignal;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref appliesToLightSignal
        {
            get
            {
                if ((_appliesToLightSignal == null))
                {
                    _appliesToLightSignal = new tElementWithIDref();
                }
                return _appliesToLightSignal;
            }
            set
            {
                _appliesToLightSignal = value;
            }
        }
    }
    
    /// <summary>
    /// Set of properties that apply to DB points and crossings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("etcsPointCrossingProperties", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class EtcsPointCrossingProperties
    {
        #region Private fields
        private tElementWithIDref _appliesToEtcsPointCrossing;
        private string _groupId;
        private bool _locallyOperated;
        private int _subGroupId;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref appliesToEtcsPointCrossing
        {
            get
            {
                if ((_appliesToEtcsPointCrossing == null))
                {
                    _appliesToEtcsPointCrossing = new tElementWithIDref();
                }
                return _appliesToEtcsPointCrossing;
            }
            set
            {
                _appliesToEtcsPointCrossing = value;
            }
        }
        
        /// <summary>
        /// ID used to group the point/crossing and to facilitate communicating to the RBC that in case of a IL failure, a given group of points/crossing has failed.
        /// de-DE: Zuordnung zu einer Gruppe, um im Falle einer Rechnerst&#246;rung im ESTW dem RBC die gest&#246;rten Elemente einfach &#252;bertragen zu k&#246;nnen. Siehe Ril 819.1344 4 (36). Die Angabe entf&#228;llt ggf. zu einem sp&#228;teren Zeitpunkt.
        /// </summary>
        [XmlElement(Order=1)]
        public string groupId
        {
            get
            {
                return _groupId;
            }
            set
            {
                _groupId = value;
            }
        }
        
        /// <summary>
        /// True if this is point is locally worked.
        /// de-DE: Ortsgestellt.
        /// </summary>
        [XmlElement(Order=2)]
        public bool locallyOperated
        {
            get
            {
                return _locallyOperated;
            }
            set
            {
                _locallyOperated = value;
            }
        }
        
        /// <summary>
        /// ID used to sub-group the point/crossing and to facilitate communicating to the RBC that in case of a IL failure, a given group of points/crossings has failed.
        /// </summary>
        [XmlElement(Order=3)]
        public int subGroupId
        {
            get
            {
                return _subGroupId;
            }
            set
            {
                _subGroupId = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("etcsTrackToTrainPacket", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class EtcsTrackToTrainPacket
    {
    }
    
    /// <summary>
    /// Parameters governing behaviour when the level crossing malfunctions.
    /// nl-NL: gedragsconfiguratie bij het defect raken van een overweg.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("levelCrossingMalfunction", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class LevelCrossingMalfunction
    {
        #region Private fields
        private LinearLocation _hasSpeedRestrictionArea;
        private LinearLocation _hasStoppingArea;
        #endregion
        
        /// <summary>
        /// The area across the level crossing to which the indicated speed restriction applies.
        /// This area may differ from the track crossing.
        /// nl-NL: het gebied, over de overweg, waarvoor de aangegeven snelheidsbeperking geldt.
        /// </summary>
        [XmlElement(Order=0)]
        public LinearLocation hasSpeedRestrictionArea
        {
            get
            {
                if ((_hasSpeedRestrictionArea == null))
                {
                    _hasSpeedRestrictionArea = new LinearLocation();
                }
                return _hasSpeedRestrictionArea;
            }
            set
            {
                _hasSpeedRestrictionArea = value;
            }
        }
        
        /// <summary>
        /// A spot on the level crossing track or track straddling the level crossing.
        /// This is where a train has to stop before crossing an unprotected crossing.
        /// 
        /// nl-NL: punt of een gebied op een overwegspoor aan weerszijden van de overweg.
        /// </summary>
        [XmlElement(Order=1)]
        public LinearLocation hasStoppingArea
        {
            get
            {
                if ((_hasStoppingArea == null))
                {
                    _hasStoppingArea = new LinearLocation();
                }
                return _hasStoppingArea;
            }
            set
            {
                _hasStoppingArea = value;
            }
        }
    }
    
    /// <summary>
    /// TP devices can be train-selective. The TPS transmits information to the train such that only  "suitable" trains are allowed through.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("trainSelectionProperties", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class TrainSelectionProperties
    {
        #region Private fields
        private tElementWithIDref _appliesToTpsDevice;
        private string _selectionDescription;
        #endregion
        
        /// <summary>
        /// train selection is applied by this device
        /// </summary>
        [XmlElement(Order=0)]
        public tElementWithIDref appliesToTpsDevice
        {
            get
            {
                if ((_appliesToTpsDevice == null))
                {
                    _appliesToTpsDevice = new tElementWithIDref();
                }
                return _appliesToTpsDevice;
            }
            set
            {
                _appliesToTpsDevice = value;
            }
        }
        
        /// <summary>
        /// Description of the train selection property, e.g. stop non-ETCS train or allow only Paris-bound train.
        /// </summary>
        [XmlAttribute]
        public string selectionDescription
        {
            get
            {
                return _selectionDescription;
            }
            set
            {
                _selectionDescription = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("cableProperties", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class CableProperties
    {
        #region Private fields
        private tElementWithIDref[] _appliesToCable;
        private CableCapacity _hasCableCapacity;
        private CableCapacity _hasSpareCapacity;
        private int _capacitiveCoupling;
        private string _category;
        private float _crossSectionalArea;
        private float _diameter;
        private string _modeltype;
        private int _numberOfCores;
        private int _operatingVoltage;
        private int _ratingPerCore;
        private int _resistancePerCore;
        private int _strandedElements;
        private string _strandingCode;
        private int _testingVoltage;
        #endregion
        
        [XmlElement("appliesToCable", Order=0)]
        public tElementWithIDref[] appliesToCable
        {
            get
            {
                return _appliesToCable;
            }
            set
            {
                _appliesToCable = value;
            }
        }
        
        /// <summary>
        /// Total capacity of the cable in terms of number of pairs or quads.
        /// </summary>
        [XmlElement(Order=1)]
        public CableCapacity hasCableCapacity
        {
            get
            {
                if ((_hasCableCapacity == null))
                {
                    _hasCableCapacity = new CableCapacity();
                }
                return _hasCableCapacity;
            }
            set
            {
                _hasCableCapacity = value;
            }
        }
        
        [XmlElement(Order=2)]
        public CableCapacity hasSpareCapacity
        {
            get
            {
                if ((_hasSpareCapacity == null))
                {
                    _hasSpareCapacity = new CableCapacity();
                }
                return _hasSpareCapacity;
            }
            set
            {
                _hasSpareCapacity = value;
            }
        }
        
        /// <summary>
        /// In picoFarad per kilometre.
        /// </summary>
        [XmlAttribute]
        public int capacitiveCoupling
        {
            get
            {
                return _capacitiveCoupling;
            }
            set
            {
                _capacitiveCoupling = value;
            }
        }
        
        /// <summary>
        /// Taken from a national list. E.g. energy, signalling.
        /// For instance, NR uses A2,A3,A4 cable that is well defined and known throughout the industry.
        /// </summary>
        [XmlAttribute]
        public string category
        {
            get
            {
                return _category;
            }
            set
            {
                _category = value;
            }
        }
        
        /// <summary>
        /// Cross-sectional area in square millimetres.
        /// </summary>
        [XmlAttribute]
        public float crossSectionalArea
        {
            get
            {
                return _crossSectionalArea;
            }
            set
            {
                _crossSectionalArea = value;
            }
        }
        
        /// <summary>
        /// Diameter in mm.
        /// </summary>
        [XmlAttribute]
        public float diameter
        {
            get
            {
                return _diameter;
            }
            set
            {
                _diameter = value;
            }
        }
        
        /// <summary>
        /// OEM designation of the cable type.
        /// </summary>
        [XmlAttribute]
        public string modeltype
        {
            get
            {
                return _modeltype;
            }
            set
            {
                _modeltype = value;
            }
        }
        
        /// <summary>
        /// Number of cores in the cable.
        /// </summary>
        [XmlAttribute]
        public int numberOfCores
        {
            get
            {
                return _numberOfCores;
            }
            set
            {
                _numberOfCores = value;
            }
        }
        
        /// <summary>
        /// Maximum sustainable operational voltage.
        /// </summary>
        [XmlAttribute]
        public int operatingVoltage
        {
            get
            {
                return _operatingVoltage;
            }
            set
            {
                _operatingVoltage = value;
            }
        }
        
        /// <summary>
        /// Rating per core of the cable in Amps.
        /// </summary>
        [XmlAttribute]
        public int ratingPerCore
        {
            get
            {
                return _ratingPerCore;
            }
            set
            {
                _ratingPerCore = value;
            }
        }
        
        /// <summary>
        /// Resistance per metre per core of the cable in Ohms.
        /// </summary>
        [XmlAttribute]
        public int resistancePerCore
        {
            get
            {
                return _resistancePerCore;
            }
            set
            {
                _resistancePerCore = value;
            }
        }
        
        /// <summary>
        /// Number of stranded elements within the cable.
        /// de-DE: Anzahl der Verseilelemente.
        /// </summary>
        [XmlAttribute]
        public int strandedElements
        {
            get
            {
                return _strandedElements;
            }
            set
            {
                _strandedElements = value;
            }
        }
        
        /// <summary>
        /// 4: 4 quad stranded
        /// 2: twisted pair
        /// 1: all cores are twisted
        /// </summary>
        [XmlAttribute]
        public string strandingCode
        {
            get
            {
                return _strandingCode;
            }
            set
            {
                _strandingCode = value;
            }
        }
        
        /// <summary>
        /// Voltage with which core against core resistance against short circuiting is tested.
        /// </summary>
        [XmlAttribute]
        public int testingVoltage
        {
            get
            {
                return _testingVoltage;
            }
            set
            {
                _testingVoltage = value;
            }
        }
    }
    
    /// <summary>
    /// The capacity of the cable in terms of number of included strands.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("cableCapacity", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class CableCapacity
    {
        #region Private fields
        private StrandTypes _isOfStrandType;
        private int _numberOfStrands;
        #endregion
        
        [XmlElement(Order=0)]
        public StrandTypes isOfStrandType
        {
            get
            {
                return _isOfStrandType;
            }
            set
            {
                _isOfStrandType = value;
            }
        }
        
        /// <summary>
        /// The number of included strands (single, pair or quad) inside.
        /// </summary>
        [XmlAttribute]
        public int numberOfStrands
        {
            get
            {
                return _numberOfStrands;
            }
            set
            {
                _numberOfStrands = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum StrandTypes
    {
        pair,
        quad,
        single,
    }
    
    /// <summary>
    /// Applies to two signals and, if applicable, all designated tracks in between these signals.
    /// When one of the two signals is opened, the other remains closed.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("backToBackLocking", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class BackToBackLocking
    {
        #region Private fields
        private tElementWithIDref[] _appliesToSignal;
        private tElementWithIDref[] _appliesToTrackDesignation;
        private RouteCategoryTypes _isOfCategory;
        #endregion
        
        [XmlElement("appliesToSignal", Order=0)]
        public tElementWithIDref[] appliesToSignal
        {
            get
            {
                return _appliesToSignal;
            }
            set
            {
                _appliesToSignal = value;
            }
        }
        
        /// <summary>
        /// In case the track between the back-to-back signals can be split, all relevant track designations have to be given for each possible back-to-back definition.
        /// </summary>
        [XmlElement("appliesToTrackDesignation", Order=1)]
        public tElementWithIDref[] appliesToTrackDesignation
        {
            get
            {
                return _appliesToTrackDesignation;
            }
            set
            {
                _appliesToTrackDesignation = value;
            }
        }
        
        [XmlElement(Order=2)]
        public RouteCategoryTypes isOfCategory
        {
            get
            {
                return _isOfCategory;
            }
            set
            {
                _isOfCategory = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    public enum RouteCategoryTypes
    {
        Main,
        Shunting,
        OnSight,
    }
    
    /// <summary>
    /// The signalplan describes a set of aspect relations between subsequent signals. This expresses a relation such as:
    /// signal Y shows red, then the upstream signal Y shows yellow.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("signalplan", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class Signalplan
    {
        #region Private fields
        private SignalMessageRelation[] _aspectRelation;
        #endregion
        
        [XmlElement("aspectRelation", Order=0)]
        public SignalMessageRelation[] aspectRelation
        {
            get
            {
                return _aspectRelation;
            }
            set
            {
                _aspectRelation = value;
            }
        }
    }
    
    /// <summary>
    /// Description of the alignment point, i.e. the spot that is targeted when orienting the signal head.
    /// Can be used in exceptional cases such as tight curves to describe a target that is situated off- track, for instance "line-side radio mast".
    /// 
    /// NR normally targets the signal's  AWS magnet and alternatively a given distance from the signal, or a spot on the track at a given distance from the signal.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("signalAlignmentPointDescription", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class SignalAlignmentPointDescription
    {
        #region Private fields
        private tElementWithIDref _appliesToLightSignal;
        private tElementWithIDref _appliesToSignalFrame;
        private string _description;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref appliesToLightSignal
        {
            get
            {
                if ((_appliesToLightSignal == null))
                {
                    _appliesToLightSignal = new tElementWithIDref();
                }
                return _appliesToLightSignal;
            }
            set
            {
                _appliesToLightSignal = value;
            }
        }
        
        /// <summary>
        /// A signal can carry more than one frame. Each frame may target a different alignment point, depending on the light parameters or on the type of route (e.g. shunting vs. main route).
        /// </summary>
        [XmlElement(Order=1)]
        public tElementWithIDref appliesToSignalFrame
        {
            get
            {
                if ((_appliesToSignalFrame == null))
                {
                    _appliesToSignalFrame = new tElementWithIDref();
                }
                return _appliesToSignalFrame;
            }
            set
            {
                _appliesToSignalFrame = value;
            }
        }
        
        [XmlAttribute]
        public string description
        {
            get
            {
                return _description;
            }
            set
            {
                _description = value;
            }
        }
    }
    
    /// <summary>
    /// Indicates whether the signal is equipped with a lens diffuser.
    /// It can be specialised and associated with a set of diffuser types.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling")]
    [XmlRootAttribute("lensDiffuser", Namespace="http://www.railtopomodel.org/schemas/EULYNX_Signalling", IsNullable=false)]
    public partial class LensDiffuser
    {
        #region Private fields
        private tElementWithIDref _appliesToLightSignal;
        #endregion
        
        [XmlElement(Order=0)]
        public tElementWithIDref appliesToLightSignal
        {
            get
            {
                if ((_appliesToLightSignal == null))
                {
                    _appliesToLightSignal = new tElementWithIDref();
                }
                return _appliesToLightSignal;
            }
            set
            {
                _appliesToLightSignal = value;
            }
        }
    }
}
#pragma warning restore
