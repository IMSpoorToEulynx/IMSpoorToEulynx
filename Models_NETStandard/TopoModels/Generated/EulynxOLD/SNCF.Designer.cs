// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 5.2.0.0. www.xsd2code.com
//    {"TargetFramework":"Net20","NameSpace":"Models.TopoModels.Eulynx","CollectionObjectType":"Array","CollectionBase":"","ExcludeImportedTypes":true,"Properties":{"LazyLoading":true,"PrivateFieldCustomPrefix":""},"XmlAttribute":{"Enabled":true,"GenerateOrderXmlAttributes":true},"ClassParams":{"GenerateInSeparateFilesDirectory":""},"Miscellaneous":{"EnableDebug":true,"EnableSummaryComment":true},"CustomUsings":[{"NameSpace":"Models.TopoModels.Eulynx.Common"},{"NameSpace":"Models.TopoModels.Eulynx.EULYNX_Signalling"},{"NameSpace":"Models.TopoModels.Eulynx.DB"},{"NameSpace":"Models.TopoModels.Eulynx.EULYNX_XSD"},{"NameSpace":"Models.TopoModels.Eulynx.NetEntity"},{"NameSpace":"Models.TopoModels.Eulynx.NR"},{"NameSpace":"Models.TopoModels.Eulynx.ProRail"},{"NameSpace":"Models.TopoModels.Eulynx.RFI"},{"NameSpace":"Models.TopoModels.Eulynx.Signalling"},{"NameSpace":"Models.TopoModels.Eulynx.SNCF"},{"NameSpace":"Models.TopoModels.Eulynx.TRV"}]}
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace Models.TopoModels.Eulynx.SNCF
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Runtime.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using Models.TopoModels.Eulynx.Common;
    using Models.TopoModels.Eulynx.EULYNX_Signalling;
    using System.Xml;
    
    
    /// <summary>
    /// Used in case of IPCS or ITCS installations.
    /// 
    /// fr-FR: Installations Permanentes ou Temporaires de Contresens.
    /// IPCS est un enclenchement de sens modifi&#233;.
    /// Par d&#233;faut, l'intervalle est orient&#233; dans le sens normal (les signaux de contre-sens sont &#233;teints, sauf celui de sortie de l'intervalle et son signal d'annonce, les crocodiles des signaux de sens contraire sont non aliment&#233;s, les annonces de PN ne fonctionnent que dans le sens normal, etc.).
    /// Pour prendre le sens normal, IPCS fonctionne quasiment comme l'enclenchement de sens sauf que l'occupation de l'intervalle n'est pas v&#233;rifi&#233;e.
    /// Pour prendre le contre-sens, IPCS fonctionne comme l'enclenchement de sens (donc l'occupation de l'intervalle est v&#233;rifi&#233;e), mais cette prise de sens &#224; des cons&#233;quences sur la signalisation de l'intervalle. A la prise du contre-sens, l'intervalle s'oriente en contre-sens (les signaux de contre-sens s'allument, les crocodiles de sens normal sont non aliment&#233;s, les crocodiles de contre-sens sont aliment&#233;s, les annonces de PN ne fonctionnent que dans le contre-sens, etc.).
    /// D&#232;s que l'intervalle n'est plus occup&#233; et qu'il n'y a plus d'itin&#233;raire vers l'intervalle en contre-sens, l'intervalle se r&#233;oriente en sens normal.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/SNCF")]
    [XmlRootAttribute("ipcsLocking", Namespace="http://www.railtopomodel.org/schemas/SNCF", IsNullable=false)]
    public partial class IpcsLocking : TrackLocking
    {
        #region Private fields
        private tElementWithIDref[] _checksState;
        private OpposingRouteLabel[] _conflictsWithSetRoutes;
        private Interval _hasInterval;
        private PointLockedLabel[] _identifiesPointPosition;
        #endregion
        
        /// <summary>
        /// checks that lever or key release instrument is activated.
        /// </summary>
        [XmlElement("checksState", Order=0)]
        public tElementWithIDref[] checksState
        {
            get
            {
                return _checksState;
            }
            set
            {
                _checksState = value;
            }
        }
        
        [XmlElement("conflictsWithSetRoutes", Order=1)]
        public OpposingRouteLabel[] conflictsWithSetRoutes
        {
            get
            {
                return _conflictsWithSetRoutes;
            }
            set
            {
                _conflictsWithSetRoutes = value;
            }
        }
        
        /// <summary>
        /// fr-Fr: L'enclenchement est associ&#233; &#224; un intervalle.
        /// </summary>
        [XmlElement(Order=2)]
        public Interval hasInterval
        {
            get
            {
                if ((_hasInterval == null))
                {
                    _hasInterval = new Interval();
                }
                return _hasInterval;
            }
            set
            {
                _hasInterval = value;
            }
        }
        
        [XmlElement("identifiesPointPosition", Order=3)]
        public PointLockedLabel[] identifiesPointPosition
        {
            get
            {
                return _identifiesPointPosition;
            }
            set
            {
                _identifiesPointPosition = value;
            }
        }
    }
    
    /// <summary>
    /// KVB system properties.
    /// The inherited speed design properties are not used for KVB.
    /// 
    /// FR: champs d'informations
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/SNCF")]
    [XmlRootAttribute("kvbSystemProperties", Namespace="http://www.railtopomodel.org/schemas/SNCF", IsNullable=false)]
    public partial class KvbSystemProperties : TpsDataTransmissionSystemProperties
    {
        #region Private fields
        private KvbInformationField[] _hasInformationField;
        #endregion
        
        /// <summary>
        /// Digital balise group can have many information fields.
        /// The order of the information fields is defined in SNCF document DES258/IG33258.
        /// Analog balise group: multiplicity is one for an unidirectional balise group, or two for a bidirectional balise group.
        /// fr-FR: <i>champs d'information</i>
        /// </summary>
        [XmlElement("hasInformationField", Order=0)]
        public KvbInformationField[] hasInformationField
        {
            get
            {
                return _hasInformationField;
            }
            set
            {
                _hasInformationField = value;
            }
        }
    }
    
    /// <summary>
    /// Individual information fields for a KVB Train Protection System.
    /// </summary>
    [XmlIncludeAttribute(typeof(KvbSpeedControlInformationField))]
    [XmlIncludeAttribute(typeof(KvbCsspInformationField))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/SNCF")]
    [XmlRootAttribute("kvbInformationField", Namespace="http://www.railtopomodel.org/schemas/SNCF", IsNullable=false)]
    public partial class KvbInformationField : BaseObject1
    {
        #region Private fields
        private string _designation;
        private bool _normalDirection;
        private string _remarks;
        #endregion
        
        /// <summary>
        /// Optional designation of an information field; used for digital balises when there is a need to distinguish two information fields that have the same function.
        /// </summary>
        [XmlAttribute]
        public string designation
        {
            get
            {
                return _designation;
            }
            set
            {
                _designation = value;
            }
        }
        
        /// <summary>
        /// true: information works in the normal direction.
        /// false: works in reverse direction.
        /// 
        /// Normal/reverse refers to the orientation of the balise group.
        /// </summary>
        [XmlAttribute]
        public bool normalDirection
        {
            get
            {
                return _normalDirection;
            }
            set
            {
                _normalDirection = value;
            }
        }
        
        /// <summary>
        /// Remarks such as "train sub-category is not subject to speed control".
        /// 
        /// FR: observations, tel que "sous-cat&#233;gorie de train non contr&#244;l&#233;e en vitesse =&gt; non KV".
        /// </summary>
        [XmlAttribute]
        public string remarks
        {
            get
            {
                return _remarks;
            }
            set
            {
                _remarks = value;
            }
        }
    }
    
    /// <summary>
    /// Information linked to speed control.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/SNCF")]
    [XmlRootAttribute("kvbSpeedControlInformationField", Namespace="http://www.railtopomodel.org/schemas/SNCF", IsNullable=false)]
    public partial class KvbSpeedControlInformationField : KvbInformationField
    {
        #region Private fields
        private KvbSpeedControlInformationTypes _hasKvbSpeedControlInformationType;
        private KvbSpeedDesignProperties[] _hasSpeedDesignProperties;
        private KvbTpsToTargetRelation[] _hasTarget;
        #endregion
        
        [XmlElement(Order=0)]
        public KvbSpeedControlInformationTypes hasKvbSpeedControlInformationType
        {
            get
            {
                return _hasKvbSpeedControlInformationType;
            }
            set
            {
                _hasKvbSpeedControlInformationType = value;
            }
        }
        
        [XmlElement("hasSpeedDesignProperties", Order=1)]
        public KvbSpeedDesignProperties[] hasSpeedDesignProperties
        {
            get
            {
                return _hasSpeedDesignProperties;
            }
            set
            {
                _hasSpeedDesignProperties = value;
            }
        }
        
        [XmlElement("hasTarget", Order=2)]
        public KvbTpsToTargetRelation[] hasTarget
        {
            get
            {
                return _hasTarget;
            }
            set
            {
                _hasTarget = value;
            }
        }
    }
    
    /// <summary>
    /// Enumeration of values for the information field linked to speed control.
    /// 
    /// fr-FR: Abr&#233;viations de la d&#233;signation des champs li&#233;s au contr&#244;le de vitesse.
    /// 
    /// Source: SNCF document IG90169, paragraph 6.3.2
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/SNCF")]
    public enum KvbSpeedControlInformationTypes
    {
        /// <summary>
        /// Champ cod&#233; AE pour raison technique.
        /// </summary>
        ae,
        /// <summary>
        /// Annulation d’un TIVD en talon d’appareil.
        /// </summary>
        aativd,
        /// <summary>
        /// Annulation de la vitesse de rappel.
        /// </summary>
        avra,
        /// <summary>
        /// D&#233;but de vitesse limit&#233;e.
        /// </summary>
        dvl,
        /// <summary>
        /// Fin de vitesse limit&#233;e.
        /// </summary>
        fvl,
        /// <summary>
        /// Fin de zone &#233;quip&#233;e.
        /// </summary>
        fz,
        /// <summary>
        /// D&#233;but de zone en construction.
        /// </summary>
        dzc,
        /// <summary>
        /// Fin de zone en construction.
        /// </summary>
        fzc,
        /// <summary>
        /// D&#233;but de zone sans alerte.
        /// </summary>
        dzsa,
        /// <summary>
        /// Fin de zone sans alerte.
        /// </summary>
        fzsa,
        /// <summary>
        /// D&#233;but de zone hors visualisation.
        /// </summary>
        dzhv,
        /// <summary>
        /// Fin de zone hors visualisation.
        /// </summary>
        fzhv,
        /// <summary>
        /// D&#233;but de zone de transmission continue en construction.
        /// </summary>
        dtcc,
        /// <summary>
        /// Fin de zone de transmission continue en construction.
        /// </summary>
        ftcc,
        /// <summary>
        /// Initialisation de la transmission continue.
        /// </summary>
        itc,
        /// <summary>
        /// Initialisation de la localisation.
        /// </summary>
        iloc,
        /// <summary>
        /// Tableau P fixe.
        /// </summary>
        pfix,
        /// <summary>
        /// Tableau P mobile.
        /// </summary>
        vpmob,
        /// <summary>
        /// Proximit&#233; de heurtoir.
        /// </summary>
        proxh,
        /// <summary>
        /// Rafra&#238;chissement d’espace pour canton court.
        /// </summary>
        rafcc,
        /// <summary>
        /// Rafra&#238;chissement d’espace pour canton long.
        /// </summary>
        rafcl,
        /// <summary>
        /// Signal.
        /// </summary>
        s,
        /// <summary>
        /// Traitement de proximit&#233;.
        /// </summary>
        sp,
        /// <summary>
        /// R&#233;ouverture signal.
        /// </summary>
        sreo,
        /// <summary>
        /// Franchissement de signal.
        /// </summary>
        sf,
        /// <summary>
        /// R&#233;veil de train.
        /// </summary>
        srev,
        /// <summary>
        /// Surveillance.
        /// </summary>
        sur,
        /// <summary>
        /// TIVD fixe.
        /// </summary>
        tivd,
        /// <summary>
        /// Ex&#233;cution d’une limitation de vitesse fixe (par plaque Z ou R, de type "LMTR" par pancarte km ou facilement rep&#233;rable ou pour une entr&#233;e syst&#232;me).
        /// </summary>
        tive,
        /// <summary>
        /// TIVE de heurtoir.
        /// </summary>
        tive5,
        /// <summary>
        /// Annulation d’un tableau P mobile au TIV.D pr&#233;annonc&#233;.
        /// </summary>
        tpaa,
        /// <summary>
        /// Ex&#233;cution d’un tableau P fixe au TIV.D pr&#233;annonc&#233;.
        /// </summary>
        tpex,
        /// <summary>
        /// Annulation d’un TIV.D fixe ou mobile.
        /// </summary>
        vaa,
        /// <summary>
        /// Vitesse d’annonce (R ou (R) ou TIV.D mobile).
        /// </summary>
        van,
        /// <summary>
        /// Vitesse de rappel (RR ou (RR) ou TIV.R).
        /// </summary>
        vra,
        /// <summary>
        /// R&#233;ouverture vitesse.
        /// </summary>
        vreo,
        /// <summary>
        /// D&#233;but de zone &#224; grande vitesse
        /// </summary>
        dgv,
        /// <summary>
        /// Fin de zone &#224; grande vitesse
        /// </summary>
        fgv,
    }
    
    /// <summary>
    /// See SNCF document DES258/IG33258 for details about the properties in this class.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/SNCF")]
    [XmlRootAttribute("kvbSpeedDesignProperties", Namespace="http://www.railtopomodel.org/schemas/SNCF", IsNullable=false)]
    public partial class KvbSpeedDesignProperties
    {
        #region Private fields
        private Speed _isDesignedForSpeed;
        private KvbTrain _isDesignedForTrainCategory;
        private bool _trainCategoryHasLowerSpeed;
        private bool _trainCategoryNotAllowed;
        #endregion
        
        /// <summary>
        /// speed is not given when the train category is not allowed on the line or when the train speed is lower than the allowed speed
        /// </summary>
        [XmlElement(Order=0)]
        public Speed isDesignedForSpeed
        {
            get
            {
                if ((_isDesignedForSpeed == null))
                {
                    _isDesignedForSpeed = new Speed();
                }
                return _isDesignedForSpeed;
            }
            set
            {
                _isDesignedForSpeed = value;
            }
        }
        
        [XmlElement(Order=1)]
        public KvbTrain isDesignedForTrainCategory
        {
            get
            {
                if ((_isDesignedForTrainCategory == null))
                {
                    _isDesignedForTrainCategory = new KvbTrain();
                }
                return _isDesignedForTrainCategory;
            }
            set
            {
                _isDesignedForTrainCategory = value;
            }
        }
        
        /// <summary>
        /// <ul>
        /// <li>True: the train ignores this speed limit because the train category has a max speed lower than the speed given by the balise.</li>
        /// <li>False: the train must respect the speed limit given by the balise.</li>
        /// </ul>
        /// 
        /// fr-FR: "Vitesse Train" =&gt; VT
        /// </summary>
        [XmlAttribute]
        public bool trainCategoryHasLowerSpeed
        {
            get
            {
                return _trainCategoryHasLowerSpeed;
            }
            set
            {
                _trainCategoryHasLowerSpeed = value;
            }
        }
        
        /// <summary>
        /// fr-FR: NCP (Ne Circule Pas)
        /// <ul>
        /// <li>True: this train category does not exist on this line.</li>
        /// <li>False: this train category is allowed on the line.</li>
        /// </ul>
        /// </summary>
        [XmlAttribute]
        public bool trainCategoryNotAllowed
        {
            get
            {
                return _trainCategoryNotAllowed;
            }
            set
            {
                _trainCategoryNotAllowed = value;
            }
        }
    }
    
    /// <summary>
    /// Gives the distance from a target where speed must be reduced or equal to zero.
    /// fr-FR: Renseigne la distance &#224; une cible o&#249; la vitesse doit &#234;tre r&#233;duite ou &#233;gale &#224; z&#233;ro.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/SNCF")]
    [XmlRootAttribute("kvbTpsToTargetRelation", Namespace="http://www.railtopomodel.org/schemas/SNCF", IsNullable=false)]
    public partial class KvbTpsToTargetRelation : KvbRelation
    {
        #region Private fields
        private Gradient _hasDesignSlope;
        private Length _hasDistanceFromSignalToTarget;
        private Length _hasDistanceFromTargetToFoulingPoint;
        private Length _hasDistanceTpsToTarget;
        #endregion
        
        /// <summary>
        /// Slope for which the KVB balises have been engineered.
        /// fr-FR: d&#233;clivit&#233; pour laquelle les balises KVB ont &#233;t&#233; dimensionn&#233;es.
        /// </summary>
        [XmlElement(Order=0)]
        public Gradient hasDesignSlope
        {
            get
            {
                if ((_hasDesignSlope == null))
                {
                    _hasDesignSlope = new Gradient();
                }
                return _hasDesignSlope;
            }
            set
            {
                _hasDesignSlope = value;
            }
        }
        
        /// <summary>
        /// Distance between signal and target.
        /// fr-FR: distance entre signal et point but. Utilis&#233;e pour balise prox &#224; distance de glissement entre 100m et 200m.
        /// </summary>
        [XmlElement(Order=1)]
        public Length hasDistanceFromSignalToTarget
        {
            get
            {
                if ((_hasDistanceFromSignalToTarget == null))
                {
                    _hasDistanceFromSignalToTarget = new Length();
                }
                return _hasDistanceFromSignalToTarget;
            }
            set
            {
                _hasDistanceFromSignalToTarget = value;
            }
        }
        
        /// <summary>
        /// Distance from target to fouling point.
        /// fr-FR: distance entre point but et garage franc. Utilis&#233;e pour balise prox &#224; distance de glissement entre 50m et 100m.
        /// </summary>
        [XmlElement(Order=2)]
        public Length hasDistanceFromTargetToFoulingPoint
        {
            get
            {
                if ((_hasDistanceFromTargetToFoulingPoint == null))
                {
                    _hasDistanceFromTargetToFoulingPoint = new Length();
                }
                return _hasDistanceFromTargetToFoulingPoint;
            }
            set
            {
                _hasDistanceFromTargetToFoulingPoint = value;
            }
        }
        
        /// <summary>
        /// Distance from the TP device to the target. Can be zero.
        /// fr-FR: distance but
        /// </summary>
        [XmlElement(Order=3)]
        public Length hasDistanceTpsToTarget
        {
            get
            {
                if ((_hasDistanceTpsToTarget == null))
                {
                    _hasDistanceTpsToTarget = new Length();
                }
                return _hasDistanceTpsToTarget;
            }
            set
            {
                _hasDistanceTpsToTarget = value;
            }
        }
    }
    
    /// <summary>
    /// Informs at what distance the KVB balises are placed on approach to the signal.
    /// fr-FR: Renseigne &#224; quelle distance les balises KVB sont plac&#233;es &#224; l'approche du signal.
    /// </summary>
    [XmlIncludeAttribute(typeof(KvbTpsToTargetRelation))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/SNCF")]
    [XmlRootAttribute("kvbRelation", Namespace="http://www.railtopomodel.org/schemas/SNCF", IsNullable=false)]
    public partial class KvbRelation : TpsRelation
    {
        #region Private fields
        private tElementWithIDref _appliesToFacingTurnout;
        private tElementWithIDref _appliesToFoulingPoint;
        private tElementWithIDref _appliesToLocationOfInterest;
        private tElementWithIDref _appliesToTurnoutBranch;
        private Length _hasDistanceFromTpsToFoulingPoint;
        #endregion
        
        /// <summary>
        /// Applies to a facing point (as opposed to fouling point).
        /// </summary>
        [XmlElement(Order=0)]
        public tElementWithIDref appliesToFacingTurnout
        {
            get
            {
                if ((_appliesToFacingTurnout == null))
                {
                    _appliesToFacingTurnout = new tElementWithIDref();
                }
                return _appliesToFacingTurnout;
            }
            set
            {
                _appliesToFacingTurnout = value;
            }
        }
        
        /// <summary>
        /// Applies to fouling point of the turnout.
        /// fr-FR: point but vis&#233; est le garage franc de l'aiguille.
        /// </summary>
        [XmlElement(Order=1)]
        public tElementWithIDref appliesToFoulingPoint
        {
            get
            {
                if ((_appliesToFoulingPoint == null))
                {
                    _appliesToFoulingPoint = new tElementWithIDref();
                }
                return _appliesToFoulingPoint;
            }
            set
            {
                _appliesToFoulingPoint = value;
            }
        }
        
        /// <summary>
        /// Marks the spot where a speed changes that is the target of a KVB balise group announcing a speed reduction starting at a location of interest.
        /// fr-FR: Point but d'une balise KVB annon&#231;ant une vitesse r&#233;duite au point remarquable.
        /// </summary>
        [XmlElement(Order=2)]
        public tElementWithIDref appliesToLocationOfInterest
        {
            get
            {
                if ((_appliesToLocationOfInterest == null))
                {
                    _appliesToLocationOfInterest = new tElementWithIDref();
                }
                return _appliesToLocationOfInterest;
            }
            set
            {
                _appliesToLocationOfInterest = value;
            }
        }
        
        /// <summary>
        /// Applies to left or right branch of a point.
        /// fr-FR: en talon gauche ou droite d'une aiguille
        /// </summary>
        [XmlElement(Order=3)]
        public tElementWithIDref appliesToTurnoutBranch
        {
            get
            {
                if ((_appliesToTurnoutBranch == null))
                {
                    _appliesToTurnoutBranch = new tElementWithIDref();
                }
                return _appliesToTurnoutBranch;
            }
            set
            {
                _appliesToTurnoutBranch = value;
            }
        }
        
        /// <summary>
        /// fr-FR: distance balise au garage franc, utilis&#233;e pour un point prox avec distance de glissement inf&#233;rieure &#224; 50m.
        /// </summary>
        [XmlElement(Order=4)]
        public Length hasDistanceFromTpsToFoulingPoint
        {
            get
            {
                if ((_hasDistanceFromTpsToFoulingPoint == null))
                {
                    _hasDistanceFromTpsToFoulingPoint = new Length();
                }
                return _hasDistanceFromTpsToFoulingPoint;
            }
            set
            {
                _hasDistanceFromTpsToFoulingPoint = value;
            }
        }
    }
    
    /// <summary>
    /// Information from the CSSP family not linked to speed control.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/SNCF")]
    [XmlRootAttribute("kvbCsspInformationField", Namespace="http://www.railtopomodel.org/schemas/SNCF", IsNullable=false)]
    public partial class KvbCsspInformationField : KvbInformationField
    {
        #region Private fields
        private KvbCsspInformationTypes _hasKvbCsspInformationType;
        private int _value;
        #endregion
        
        [XmlElement(Order=0)]
        public KvbCsspInformationTypes hasKvbCsspInformationType
        {
            get
            {
                return _hasKvbCsspInformationType;
            }
            set
            {
                _hasKvbCsspInformationType = value;
            }
        }
        
        /// <summary>
        /// Value associated with CR, SR, QTB
        /// </summary>
        [XmlAttribute]
        public int value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
    }
    
    /// <summary>
    /// Enumeration of values for the information field of the CSSP family not linked to speed control and various functions.
    /// 
    /// fr-FR: Abr&#233;viations de la d&#233;signation des champs de la famille CSSP <i>non </i>li&#233;s au contr&#244;le de vitesse et fonctions diverses.
    /// 
    /// Source: SNCF document IG90169, paragraph 6.3.3
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/SNCF")]
    public enum KvbCsspInformationTypes
    {
        /// <summary>
        /// Canal radio num&#233;ro ...
        /// </summary>
        cr,
        /// <summary>
        /// Syst&#232;me radio num&#233;ro ...
        /// </summary>
        sr,
        /// <summary>
        /// Entr&#233;e tunnel.
        /// </summary>
        etu,
        /// <summary>
        /// Sortie tunnel.
        /// </summary>
        stu,
        /// <summary>
        /// Quai de type haut.
        /// </summary>
        qte,
        /// <summary>
        /// Quai de type interm&#233;diaire.
        /// </summary>
        qtc,
        /// <summary>
        /// Quai de type mi-haut niveau 1.
        /// </summary>
        qtb1,
        /// <summary>
        /// Quai de type mi-haut niveau 3.
        /// </summary>
        qtb3,
        /// <summary>
        /// Quai de type bas.
        /// </summary>
        qta,
        /// <summary>
        /// Quai &#224; desservir &#224; gauche.
        /// </summary>
        qag,
        /// <summary>
        /// Quai &#224; desservir &#224; droite.
        /// </summary>
        qad,
        /// <summary>
        /// Quai &#224; desservir &#224; gauche et &#224; droite.
        /// </summary>
        qgd,
        /// <summary>
        /// Quai haut &#224; gauche.
        /// </summary>
        qhg,
        /// <summary>
        /// Quai haut &#224; droite.
        /// </summary>
        qhd,
        /// <summary>
        /// Verrouillage WC.
        /// </summary>
        vwc,
        /// <summary>
        /// Lib&#233;ration WC.
        /// </summary>
        lwc,
        /// <summary>
        /// Banlieue Grande Ligne.
        /// </summary>
        bgl,
        /// <summary>
        /// Quai bas &#224; gauche.
        /// </summary>
        qbg,
        /// <summary>
        /// Quai bas &#224; droite.
        /// </summary>
        qbd,
        /// <summary>
        /// Quai haut &#224; droite et &#224; gauche.
        /// </summary>
        qhdg,
        /// <summary>
        /// Quai bas &#224; droite et &#224; gauche.
        /// </summary>
        qbdg,
    }
    
    /// <summary>
    /// System behavioural properties of the crocodile installation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/SNCF")]
    [XmlRootAttribute("crocodileSystemProperties", Namespace="http://www.railtopomodel.org/schemas/SNCF", IsNullable=false)]
    public partial class CrocodileSystemProperties : TpsDataTransmissionSystemProperties
    {
        #region Private fields
        private CrocodileFunctionTypes _hasCrocodileFunction;
        private CrocodileReactionType _isDesignedForReaction;
        private bool _trailable;
        #endregion
        
        /// <summary>
        /// The crocodile system is designed for one specific function.
        /// </summary>
        [XmlElement(Order=0)]
        public CrocodileFunctionTypes hasCrocodileFunction
        {
            get
            {
                return _hasCrocodileFunction;
            }
            set
            {
                _hasCrocodileFunction = value;
            }
        }
        
        /// <summary>
        /// The crocodile is designed to trigger a train-board reaction.
        /// If this is a train recognition crocodile, no reaction is given (Paris suburban trains.)
        /// </summary>
        [XmlElement(Order=1)]
        public CrocodileReactionType isDesignedForReaction
        {
            get
            {
                return _isDesignedForReaction;
            }
            set
            {
                _isDesignedForReaction = value;
            }
        }
        
        /// <summary>
        /// fr-FR: Crocodile talonnable, equip&#233; d'une p&#233;dale pour annuler le crocodile lorsqu'il est franchi en sens inverse.
        /// </summary>
        [XmlAttribute]
        public bool trailable
        {
            get
            {
                return _trailable;
            }
            set
            {
                _trailable = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/SNCF")]
    public enum CrocodileFunctionTypes
    {
        /// <summary>
        /// fr-FR: Controle de vitesse DAAT-Avanc&#233;
        /// </summary>
        speedChecking,
        /// <summary>
        /// fr-FR: Reconnaissance de cat&#233;gorie de trains (de banlieue parisienne)
        /// </summary>
        trainCategoryDetection,
        /// <summary>
        /// Equipement compl&#233;mentaire d'un signal
        /// </summary>
        signal,
    }
    
    /// <summary>
    /// The kind of reaction for which the crocodile is designed. This determines the type of current that is injected into the crocodile.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/SNCF")]
    public enum CrocodileReactionType
    {
        /// <summary>
        /// fr-FR: Avertissement de survitesse
        /// DC current
        /// </summary>
        warning,
        /// <summary>
        /// fr-FR: Frein d'urgence
        /// AC current
        /// </summary>
        emergencyBrake,
        /// <summary>
        /// fr-FR: Avertissement et frein d'urgence.
        /// </summary>
        WarningAndEb,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(TypeName="RouteBody", Namespace="http://www.railtopomodel.org/schemas/SNCF")]
    [XmlRootAttribute("routeBody", Namespace="http://www.railtopomodel.org/schemas/SNCF", IsNullable=false)]
    public partial class RouteBody : EULYNX_Signalling.RouteBody
    {
        #region Private fields
        private tElementWithIDref[] _activatesTransit;
        private tElementWithIDref[] _checksOpposingRouteLocking;
        private SncfDirectionTypes _hasDirection;
        #endregion
        
        [XmlElement("activatesTransit", Order=0)]
        public tElementWithIDref[] activatesTransit
        {
            get
            {
                return _activatesTransit;
            }
            set
            {
                _activatesTransit = value;
            }
        }
        
        [XmlElement("checksOpposingRouteLocking", Order=1)]
        public tElementWithIDref[] checksOpposingRouteLocking
        {
            get
            {
                return _checksOpposingRouteLocking;
            }
            set
            {
                _checksOpposingRouteLocking = value;
            }
        }
        
        [XmlElement(Order=2)]
        public SncfDirectionTypes hasDirection
        {
            get
            {
                return _hasDirection;
            }
            set
            {
                _hasDirection = value;
            }
        }
    }
    
    /// <summary>
    /// Direction types in use with SNCF
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/SNCF")]
    public enum SncfDirectionTypes
    {
        /// <summary>
        /// fr-FR: impair
        /// </summary>
        odd,
        /// <summary>
        /// fr-FR: pair
        /// </summary>
        even,
    }
    
    /// <summary>
    /// A balise used for Controle de Vitesse par Balise (KVB).
    /// </summary>
    [XmlIncludeAttribute(typeof(KvbDigitalBalise))]
    [XmlIncludeAttribute(typeof(KvbAnalogBalise))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/SNCF")]
    [XmlRootAttribute("kvbBalise", Namespace="http://www.railtopomodel.org/schemas/SNCF", IsNullable=false)]
    public partial class KvbBalise : Balise
    {
        #region Private fields
        private string _positionInGroup;
        #endregion
        
        /// <summary>
        /// Position of the balise in the group.
        /// Ranges from A to E.
        /// A for first, E for fifth in group.
        /// </summary>
        [XmlAttribute]
        public string positionInGroup
        {
            get
            {
                return _positionInGroup;
            }
            set
            {
                _positionInGroup = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/SNCF")]
    [XmlRootAttribute("kvbDigitalBalise", Namespace="http://www.railtopomodel.org/schemas/SNCF", IsNullable=false)]
    public partial class KvbDigitalBalise : KvbBalise
    {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/SNCF")]
    [XmlRootAttribute("kvbAnalogBalise", Namespace="http://www.railtopomodel.org/schemas/SNCF", IsNullable=false)]
    public partial class KvbAnalogBalise : KvbBalise
    {
        #region Private fields
        private KvbAnalogBaliseFunctionTypes _hasFunction;
        #endregion
        
        [XmlElement(Order=0)]
        public KvbAnalogBaliseFunctionTypes hasFunction
        {
            get
            {
                return _hasFunction;
            }
            set
            {
                _hasFunction = value;
            }
        }
    }
    
    /// <summary>
    /// Values are in SNCF document IG90169 &#167;6.2.2
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/SNCF")]
    public enum KvbAnalogBaliseFunctionTypes
    {
        /// <summary>
        /// Signal.
        /// </summary>
        s,
        /// <summary>
        /// Distance.
        /// </summary>
        d,
        /// <summary>
        /// Profil (d&#233;clivit&#233;).
        /// </summary>
        p,
        /// <summary>
        /// Distance et profil.
        /// </summary>
        dp,
        /// <summary>
        /// Limitation de vitesse &#171; cat&#233;gorie g&#233;n&#233;rale &#187;.
        /// </summary>
        g,
        /// <summary>
        /// Limitation de vitesse &#171; cat&#233;gories sp&#233;ciales &#187;.
        /// </summary>
        s1,
        /// <summary>
        /// Limitation de vitesse &#171; cat&#233;gories sp&#233;ciales &#187;.
        /// </summary>
        s2,
        /// <summary>
        /// Limitation de vitesse &#171; cat&#233;gories sp&#233;ciales &#187;.
        /// </summary>
        s3,
        /// <summary>
        /// Limitation temporaire de vitesse.
        /// </summary>
        ltv,
        /// <summary>
        /// Marqueur.
        /// </summary>
        m,
        /// <summary>
        /// Informations diverses.
        /// </summary>
        f,
        /// <summary>
        /// Informations pour Cartes de Sortie S&#233;rie Parall&#232;le.
        /// </summary>
        cssp,
    }
    
    /// <summary>
    /// Train Protection Device used in France, Belgium and Luxemburg.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/SNCF")]
    [XmlRootAttribute("crocodile", Namespace="http://www.railtopomodel.org/schemas/SNCF", IsNullable=false)]
    public partial class Crocodile : TpsSpotDevice
    {
        #region Private fields
        private tElementWithIDref _isSuppressedByTreadle;
        #endregion
        
        /// <summary>
        /// crocodile est annul&#233; par p&#233;dale
        /// </summary>
        [XmlElement(Order=0)]
        public tElementWithIDref isSuppressedByTreadle
        {
            get
            {
                if ((_isSuppressedByTreadle == null))
                {
                    _isSuppressedByTreadle = new tElementWithIDref();
                }
                return _isSuppressedByTreadle;
            }
            set
            {
                _isSuppressedByTreadle = value;
            }
        }
    }
    
    /// <summary>
    /// Signal fictif.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/SNCF")]
    [XmlRootAttribute("fictitiousSignal", Namespace="http://www.railtopomodel.org/schemas/SNCF", IsNullable=false)]
    public partial class FictitiousSignal : NonPhysicalSignal
    {
        #region Private fields
        private FictitiousSignalFunctionTypes _hasFunction;
        #endregion
        
        [XmlElement(Order=0)]
        public FictitiousSignalFunctionTypes hasFunction
        {
            get
            {
                return _hasFunction;
            }
            set
            {
                _hasFunction = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/SNCF")]
    public enum FictitiousSignalFunctionTypes
    {
        /// <summary>
        /// Signal fictif &#224; la limite de poste. Permet de scinder un parcours allant d'un poste vers un autre en deux itin&#233;raires compl&#232;tement distincts, limitant ainsi au maximum les d&#233;pendances entre les deux postes.
        /// </summary>
        interlockingBorder,
    }
    
    /// <summary>
    /// A signal that provides entry to a route can only be opened when no opposing route is set. This prevents face-to-face movement.
    /// For this purpose, the system proves that sections in between opposing signals are not claimed for movement in the opposite direction.
    /// </summary>
    [XmlIncludeAttribute(typeof(TrackLocking))]
    [XmlIncludeAttribute(typeof(DirectionLocking))]
    [XmlIncludeAttribute(typeof(SingleTrackLocking))]
    [XmlIncludeAttribute(typeof(StationTrackLocking))]
    [XmlIncludeAttribute(typeof(StandoffLocking))]
    [XmlIncludeAttribute(typeof(IpcsLocking))]
    [XmlIncludeAttribute(typeof(BidirectionalRouteLocking))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/SNCF")]
    [XmlRootAttribute("opposingRouteLocking", Namespace="http://www.railtopomodel.org/schemas/SNCF", IsNullable=false)]
    public abstract partial class OpposingRouteLocking : ConfiguredBaseObject
    {
    }
    
    /// <summary>
    /// Opposing route locking for line without points.
    /// fr-FR: Enclenchement portant sur des portions de voie lin&#233;aire, g&#233;n&#233;ralement sans aiguilles.
    /// </summary>
    [XmlIncludeAttribute(typeof(DirectionLocking))]
    [XmlIncludeAttribute(typeof(SingleTrackLocking))]
    [XmlIncludeAttribute(typeof(StationTrackLocking))]
    [XmlIncludeAttribute(typeof(StandoffLocking))]
    [XmlIncludeAttribute(typeof(IpcsLocking))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/SNCF")]
    [XmlRootAttribute("trackLocking", Namespace="http://www.railtopomodel.org/schemas/SNCF", IsNullable=false)]
    public abstract partial class TrackLocking : OpposingRouteLocking
    {
        #region Private fields
        private TransitAndMovableElementPosition _checksTransitForEvenDirection;
        private TransitAndMovableElementPosition _checksTransitForOddDirection;
        private bool _betweenInterlockings;
        #endregion
        
        [XmlElement(Order=0)]
        public TransitAndMovableElementPosition checksTransitForEvenDirection
        {
            get
            {
                if ((_checksTransitForEvenDirection == null))
                {
                    _checksTransitForEvenDirection = new TransitAndMovableElementPosition();
                }
                return _checksTransitForEvenDirection;
            }
            set
            {
                _checksTransitForEvenDirection = value;
            }
        }
        
        [XmlElement(Order=1)]
        public TransitAndMovableElementPosition checksTransitForOddDirection
        {
            get
            {
                if ((_checksTransitForOddDirection == null))
                {
                    _checksTransitForOddDirection = new TransitAndMovableElementPosition();
                }
                return _checksTransitForOddDirection;
            }
            set
            {
                _checksTransitForOddDirection = value;
            }
        }
        
        /// <summary>
        /// fr-FR: Enclenchement entre postes ou non
        /// </summary>
        [XmlAttribute]
        public bool betweenInterlockings
        {
            get
            {
                return _betweenInterlockings;
            }
            set
            {
                _betweenInterlockings = value;
            }
        }
    }
    
    /// <summary>
    /// Tuple of a transit plus point and position.
    /// fr-FR: paire transit et position de l' aiguille.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/SNCF")]
    [XmlRootAttribute("transitAndMovableElementPosition", Namespace="http://www.railtopomodel.org/schemas/SNCF", IsNullable=false)]
    public partial class TransitAndMovableElementPosition
    {
        #region Private fields
        private MovableElementAndPosition _checksIfMovableElementIsInPosition;
        private tElementWithIDref _checksTransit;
        #endregion
        
        /// <summary>
        /// fr-FR: V&#233;rifie l'&#233;tat du transit si l'aiguille est dans une position donn&#233;e
        /// </summary>
        [XmlElement(Order=0)]
        public MovableElementAndPosition checksIfMovableElementIsInPosition
        {
            get
            {
                if ((_checksIfMovableElementIsInPosition == null))
                {
                    _checksIfMovableElementIsInPosition = new MovableElementAndPosition();
                }
                return _checksIfMovableElementIsInPosition;
            }
            set
            {
                _checksIfMovableElementIsInPosition = value;
            }
        }
        
        [XmlElement(Order=1)]
        public tElementWithIDref checksTransit
        {
            get
            {
                if ((_checksTransit == null))
                {
                    _checksTransit = new tElementWithIDref();
                }
                return _checksTransit;
            }
            set
            {
                _checksTransit = value;
            }
        }
    }
    
    /// <summary>
    /// fr-FR: Enclenchement de sens entre postes.
    /// Checks to prevent simultaneous opening of opposing signals that are controlled by different interlocking systems.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/SNCF")]
    [XmlRootAttribute("directionLocking", Namespace="http://www.railtopomodel.org/schemas/SNCF", IsNullable=false)]
    public partial class DirectionLocking : TrackLocking
    {
        #region Private fields
        private Interval _hasInterval;
        #endregion
        
        /// <summary>
        /// fr-Fr: L'enclenchement est associ&#233; &#224; un intervalle.
        /// </summary>
        [XmlElement(Order=0)]
        public Interval hasInterval
        {
            get
            {
                if ((_hasInterval == null))
                {
                    _hasInterval = new Interval();
                }
                return _hasInterval;
            }
            set
            {
                _hasInterval = value;
            }
        }
    }
    
    /// <summary>
    /// Track between two signals equipped with an interlocked direction.
    /// fr-FR: Intervalle (portion de voie entre 2 signaux munie d'un enclenchement de sens).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/SNCF")]
    [XmlRootAttribute("interval", Namespace="http://www.railtopomodel.org/schemas/SNCF", IsNullable=false)]
    public partial class Interval
    {
        #region Private fields
        private tElementWithIDref[] _hasTvpSections;
        private tElementWithIDref[] _limitedBySignals;
        #endregion
        
        /// <summary>
        /// fr-Fr: L'intervalle est compos&#233; de zones (sections TVP).
        /// </summary>
        [XmlElement("hasTvpSections", Order=0)]
        public tElementWithIDref[] hasTvpSections
        {
            get
            {
                return _hasTvpSections;
            }
            set
            {
                _hasTvpSections = value;
            }
        }
        
        /// <summary>
        /// fr-FR: L'intervalle est d&#233;limit&#233; par deux signaux.
        /// </summary>
        [XmlElement("limitedBySignals", Order=1)]
        public tElementWithIDref[] limitedBySignals
        {
            get
            {
                return _limitedBySignals;
            }
            set
            {
                _limitedBySignals = value;
            }
        }
    }
    
    /// <summary>
    /// Used case of single track, i.e. the opposing routes are part of one yard controlled by a single interlocking.
    /// 
    /// fr-FR: Voie Unique (VU)
    /// Une voie unique dans le poste est une portion de voie d&#233;limit&#233; par deux signaux de sens contraire dos &#224; dos. Est v&#233;rifi&#233; que le transit de sens contraire de la zone de la VU est lib&#233;r&#233;. Si c'est le cas, le sens de la VU est pris et l'itin&#233;raire s'&#233;tablit.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/SNCF")]
    [XmlRootAttribute("singleTrackLocking", Namespace="http://www.railtopomodel.org/schemas/SNCF", IsNullable=false)]
    public partial class SingleTrackLocking : TrackLocking
    {
        #region Private fields
        private Interval _hasInterval;
        #endregion
        
        /// <summary>
        /// fr-Fr: L'enclenchement est associ&#233; &#224; un intervalle.
        /// </summary>
        [XmlElement(Order=0)]
        public Interval hasInterval
        {
            get
            {
                if ((_hasInterval == null))
                {
                    _hasInterval = new Interval();
                }
                return _hasInterval;
            }
            set
            {
                _hasInterval = value;
            }
        }
    }
    
    /// <summary>
    /// Allows shunting movement on track situated between the opposing signals.
    /// 
    /// fr-FR: enclenchement de voie de stationnement (St).
    /// Typiquement utilis&#233; pour une voie &#224; quai. Le transit qui donne acc&#232;s &#224; la voie de stationnement en sens contraire est v&#233;rifi&#233;. Permet de manœuvrer (e.g. pour coupler deux rames ou atteler une locomotive).
    /// 
    /// Comme une VU, sauf que l'on peut y manœuvrer (pour coupler deux rames ou pour atteler une locomotive). Au lieu de v&#233;rifier le transit de sens contraire de la VU, est v&#233;rifi&#233; le transit qui donne acc&#232;s &#224; la voie de stationnement en sens contraire.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/SNCF")]
    [XmlRootAttribute("stationTrackLocking", Namespace="http://www.railtopomodel.org/schemas/SNCF", IsNullable=false)]
    public partial class StationTrackLocking : TrackLocking
    {
        #region Private fields
        private Interval _hasInterval;
        #endregion
        
        /// <summary>
        /// fr-Fr: L'enclenchement est associ&#233; &#224; un intervalle.
        /// </summary>
        [XmlElement(Order=0)]
        public Interval hasInterval
        {
            get
            {
                if ((_hasInterval == null))
                {
                    _hasInterval = new Interval();
                }
                return _hasInterval;
            }
            set
            {
                _hasInterval = value;
            }
        }
    }
    
    /// <summary>
    /// fr-FR: Enclenchement d'affrontement.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/SNCF")]
    [XmlRootAttribute("standoffLocking", Namespace="http://www.railtopomodel.org/schemas/SNCF", IsNullable=false)]
    public partial class StandoffLocking : TrackLocking
    {
        #region Private fields
        private bool _manualReleasePossible;
        #endregion
        
        /// <summary>
        /// When true, the route locking may be released by the signaller.
        /// </summary>
        [XmlAttribute]
        public bool manualReleasePossible
        {
            get
            {
                return _manualReleasePossible;
            }
            set
            {
                _manualReleasePossible = value;
            }
        }
    }
    
    /// <summary>
    /// Opposing route locking for routes in areas with points.
    /// fr-FR: Enclenchement de parcours banalis&#233; (dans les zones &#233;quip&#233;es d'appareils de voie).
    /// Les conditions d'&#233;tablissement de l'itin&#233;raire ne requi&#232;rent que la v&#233;rification du transit de sens contraire en aval du signal origine de l'itin&#233;raire (e.g. pour v&#233;rifier qu'aucun intin&#233;raire de sens contraire form&#233; a pour destination un signal en amont du signal origine.)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/SNCF")]
    [XmlRootAttribute("bidirectionalRouteLocking", Namespace="http://www.railtopomodel.org/schemas/SNCF", IsNullable=false)]
    public partial class BidirectionalRouteLocking : OpposingRouteLocking
    {
        #region Private fields
        private tElementWithIDref _checksTransit;
        #endregion
        
        /// <summary>
        /// This transit needs checking.
        /// </summary>
        [XmlElement(Order=0)]
        public tElementWithIDref checksTransit
        {
            get
            {
                if ((_checksTransit == null))
                {
                    _checksTransit = new tElementWithIDref();
                }
                return _checksTransit;
            }
            set
            {
                _checksTransit = value;
            }
        }
    }
    
    /// <summary>
    /// A transit is a TVP section plus a direction.
    /// fr-FR: Un transit correspond &#224; une section TVP &#224; laquelle on affecte un sens.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/SNCF")]
    [XmlRootAttribute("transit", Namespace="http://www.railtopomodel.org/schemas/SNCF", IsNullable=false)]
    public partial class Transit : ConfiguredBaseObject
    {
        #region Private fields
        private tElementWithIDref _appliesToTvpSection;
        private SncfDirectionTypes _hasDirection;
        #endregion
        
        /// <summary>
        /// fr-FR: Zone (section TVP) &#224; laquelle le transit est associ&#233;
        /// </summary>
        [XmlElement(Order=0)]
        public tElementWithIDref appliesToTvpSection
        {
            get
            {
                if ((_appliesToTvpSection == null))
                {
                    _appliesToTvpSection = new tElementWithIDref();
                }
                return _appliesToTvpSection;
            }
            set
            {
                _appliesToTvpSection = value;
            }
        }
        
        /// <summary>
        /// fr-FR: Le transit est associ&#233; &#224; un sens.
        /// </summary>
        [XmlElement(Order=1)]
        public SncfDirectionTypes hasDirection
        {
            get
            {
                return _hasDirection;
            }
            set
            {
                _hasDirection = value;
            }
        }
    }
    
    /// <summary>
    /// Text identifying that a point is locked in a given position, e.g. "point 5 left" and that allows the train to use the given routebody.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/SNCF")]
    [XmlRootAttribute("pointLockedLabel", Namespace="http://www.railtopomodel.org/schemas/SNCF", IsNullable=false)]
    public partial class PointLockedLabel
    {
    }
    
    /// <summary>
    /// Identifiers of routes in a neighbouring interlocking that are in conflict with the requested routebody.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace="http://www.railtopomodel.org/schemas/SNCF")]
    [XmlRootAttribute("opposingRouteLabel", Namespace="http://www.railtopomodel.org/schemas/SNCF", IsNullable=false)]
    public partial class OpposingRouteLabel
    {
    }
}
#pragma warning restore
